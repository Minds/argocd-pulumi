// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages [repositories](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#repositories) within ArgoCD.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as argocd from "@mindsorg/argocd-pulumi";
 *
 * // Public Helm repository
 * const publicNginxHelm = new argocd.Repository("publicNginxHelm", {
 *     repo: "https://helm.nginx.com/stable",
 *     type: "helm",
 * });
 * // Public Git repository
 * const publicGit = new argocd.Repository("publicGit", {repo: "git@github.com:user/somerepo.git"});
 * // Private Git repository
 * const _private = new argocd.Repository("private", {
 *     insecure: true,
 *     repo: "git@private-git-repository.local:somerepo.git",
 *     sshPrivateKey: `-----BEGIN OPENSSH PRIVATE KEY-----
 * foo
 * bar
 * -----END OPENSSH PRIVATE KEY-----
 * `,
 *     username: "git",
 * });
 * ```
 *
 * ## Import
 *
 * Repositories can be imported using the repository URL.
 *
 *  Note: as the ArgoCD API does not return any sensitive information, a
 *
 *  subsequent `pulumi up` should be executed to make the `password`,
 *
 *  `ssh_private_key` and `tls_client_cert_key` attributes converge to their
 *
 *  expected values defined within the plan.
 *
 *  Example:
 *
 * ```sh
 * $ pulumi import argocd:index/repository:Repository myrepo git@private-git-repository.local:somerepo.git
 * ```
 */
export class Repository extends pulumi.CustomResource {
    /**
     * Get an existing Repository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryState, opts?: pulumi.CustomResourceOptions): Repository {
        return new Repository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'argocd:index/repository:Repository';

    /**
     * Returns true if the given object is an instance of Repository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Repository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Repository.__pulumiType;
    }

    /**
     * Contains information about the current state of connection to the repository server.
     */
    public /*out*/ readonly connectionStateStatus!: pulumi.Output<string>;
    /**
     * Whether `git-lfs` support should be enabled for this repository.
     */
    public readonly enableLfs!: pulumi.Output<boolean | undefined>;
    /**
     * Whether `helm-oci` support should be enabled for this repository.
     */
    public readonly enableOci!: pulumi.Output<boolean | undefined>;
    /**
     * GitHub API URL for GitHub app authentication.
     */
    public readonly githubappEnterpriseBaseUrl!: pulumi.Output<string | undefined>;
    /**
     * ID of the GitHub app used to access the repo.
     */
    public readonly githubappId!: pulumi.Output<string | undefined>;
    /**
     * The installation ID of the GitHub App used to access the repo.
     */
    public readonly githubappInstallationId!: pulumi.Output<string | undefined>;
    /**
     * Private key data (PEM) for authentication via GitHub app.
     */
    public readonly githubappPrivateKey!: pulumi.Output<string | undefined>;
    /**
     * Whether credentials were inherited from a credential set.
     */
    public /*out*/ readonly inheritedCreds!: pulumi.Output<boolean>;
    /**
     * Whether the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.
     */
    public readonly insecure!: pulumi.Output<boolean | undefined>;
    /**
     * Name to be used for this repo. Only used with Helm repos.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Password or PAT used for authenticating at the remote repository.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * The project name, in case the repository is project scoped.
     */
    public readonly project!: pulumi.Output<string | undefined>;
    /**
     * URL of the repository.
     */
    public readonly repo!: pulumi.Output<string>;
    /**
     * PEM data for authenticating at the repo server. Only used with Git repos.
     */
    public readonly sshPrivateKey!: pulumi.Output<string | undefined>;
    /**
     * TLS client certificate in PEM format for authenticating at the repo server.
     */
    public readonly tlsClientCertData!: pulumi.Output<string | undefined>;
    /**
     * TLS client certificate private key in PEM format for authenticating at the repo server.
     */
    public readonly tlsClientCertKey!: pulumi.Output<string | undefined>;
    /**
     * Type of the repo. Can be either `git` or `helm`. `git` is assumed if empty or absent.
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * Username used for authenticating at the remote repository.
     */
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a Repository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryArgs | RepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositoryState | undefined;
            resourceInputs["connectionStateStatus"] = state ? state.connectionStateStatus : undefined;
            resourceInputs["enableLfs"] = state ? state.enableLfs : undefined;
            resourceInputs["enableOci"] = state ? state.enableOci : undefined;
            resourceInputs["githubappEnterpriseBaseUrl"] = state ? state.githubappEnterpriseBaseUrl : undefined;
            resourceInputs["githubappId"] = state ? state.githubappId : undefined;
            resourceInputs["githubappInstallationId"] = state ? state.githubappInstallationId : undefined;
            resourceInputs["githubappPrivateKey"] = state ? state.githubappPrivateKey : undefined;
            resourceInputs["inheritedCreds"] = state ? state.inheritedCreds : undefined;
            resourceInputs["insecure"] = state ? state.insecure : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["repo"] = state ? state.repo : undefined;
            resourceInputs["sshPrivateKey"] = state ? state.sshPrivateKey : undefined;
            resourceInputs["tlsClientCertData"] = state ? state.tlsClientCertData : undefined;
            resourceInputs["tlsClientCertKey"] = state ? state.tlsClientCertKey : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as RepositoryArgs | undefined;
            if ((!args || args.repo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repo'");
            }
            resourceInputs["enableLfs"] = args ? args.enableLfs : undefined;
            resourceInputs["enableOci"] = args ? args.enableOci : undefined;
            resourceInputs["githubappEnterpriseBaseUrl"] = args ? args.githubappEnterpriseBaseUrl : undefined;
            resourceInputs["githubappId"] = args ? args.githubappId : undefined;
            resourceInputs["githubappInstallationId"] = args ? args.githubappInstallationId : undefined;
            resourceInputs["githubappPrivateKey"] = args?.githubappPrivateKey ? pulumi.secret(args.githubappPrivateKey) : undefined;
            resourceInputs["insecure"] = args ? args.insecure : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["repo"] = args ? args.repo : undefined;
            resourceInputs["sshPrivateKey"] = args?.sshPrivateKey ? pulumi.secret(args.sshPrivateKey) : undefined;
            resourceInputs["tlsClientCertData"] = args ? args.tlsClientCertData : undefined;
            resourceInputs["tlsClientCertKey"] = args?.tlsClientCertKey ? pulumi.secret(args.tlsClientCertKey) : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["connectionStateStatus"] = undefined /*out*/;
            resourceInputs["inheritedCreds"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["githubappPrivateKey", "password", "sshPrivateKey", "tlsClientCertKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Repository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Repository resources.
 */
export interface RepositoryState {
    /**
     * Contains information about the current state of connection to the repository server.
     */
    connectionStateStatus?: pulumi.Input<string>;
    /**
     * Whether `git-lfs` support should be enabled for this repository.
     */
    enableLfs?: pulumi.Input<boolean>;
    /**
     * Whether `helm-oci` support should be enabled for this repository.
     */
    enableOci?: pulumi.Input<boolean>;
    /**
     * GitHub API URL for GitHub app authentication.
     */
    githubappEnterpriseBaseUrl?: pulumi.Input<string>;
    /**
     * ID of the GitHub app used to access the repo.
     */
    githubappId?: pulumi.Input<string>;
    /**
     * The installation ID of the GitHub App used to access the repo.
     */
    githubappInstallationId?: pulumi.Input<string>;
    /**
     * Private key data (PEM) for authentication via GitHub app.
     */
    githubappPrivateKey?: pulumi.Input<string>;
    /**
     * Whether credentials were inherited from a credential set.
     */
    inheritedCreds?: pulumi.Input<boolean>;
    /**
     * Whether the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * Name to be used for this repo. Only used with Helm repos.
     */
    name?: pulumi.Input<string>;
    /**
     * Password or PAT used for authenticating at the remote repository.
     */
    password?: pulumi.Input<string>;
    /**
     * The project name, in case the repository is project scoped.
     */
    project?: pulumi.Input<string>;
    /**
     * URL of the repository.
     */
    repo?: pulumi.Input<string>;
    /**
     * PEM data for authenticating at the repo server. Only used with Git repos.
     */
    sshPrivateKey?: pulumi.Input<string>;
    /**
     * TLS client certificate in PEM format for authenticating at the repo server.
     */
    tlsClientCertData?: pulumi.Input<string>;
    /**
     * TLS client certificate private key in PEM format for authenticating at the repo server.
     */
    tlsClientCertKey?: pulumi.Input<string>;
    /**
     * Type of the repo. Can be either `git` or `helm`. `git` is assumed if empty or absent.
     */
    type?: pulumi.Input<string>;
    /**
     * Username used for authenticating at the remote repository.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Repository resource.
 */
export interface RepositoryArgs {
    /**
     * Whether `git-lfs` support should be enabled for this repository.
     */
    enableLfs?: pulumi.Input<boolean>;
    /**
     * Whether `helm-oci` support should be enabled for this repository.
     */
    enableOci?: pulumi.Input<boolean>;
    /**
     * GitHub API URL for GitHub app authentication.
     */
    githubappEnterpriseBaseUrl?: pulumi.Input<string>;
    /**
     * ID of the GitHub app used to access the repo.
     */
    githubappId?: pulumi.Input<string>;
    /**
     * The installation ID of the GitHub App used to access the repo.
     */
    githubappInstallationId?: pulumi.Input<string>;
    /**
     * Private key data (PEM) for authentication via GitHub app.
     */
    githubappPrivateKey?: pulumi.Input<string>;
    /**
     * Whether the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * Name to be used for this repo. Only used with Helm repos.
     */
    name?: pulumi.Input<string>;
    /**
     * Password or PAT used for authenticating at the remote repository.
     */
    password?: pulumi.Input<string>;
    /**
     * The project name, in case the repository is project scoped.
     */
    project?: pulumi.Input<string>;
    /**
     * URL of the repository.
     */
    repo: pulumi.Input<string>;
    /**
     * PEM data for authenticating at the repo server. Only used with Git repos.
     */
    sshPrivateKey?: pulumi.Input<string>;
    /**
     * TLS client certificate in PEM format for authenticating at the repo server.
     */
    tlsClientCertData?: pulumi.Input<string>;
    /**
     * TLS client certificate private key in PEM format for authenticating at the repo server.
     */
    tlsClientCertKey?: pulumi.Input<string>;
    /**
     * Type of the repo. Can be either `git` or `helm`. `git` is assumed if empty or absent.
     */
    type?: pulumi.Input<string>;
    /**
     * Username used for authenticating at the remote repository.
     */
    username?: pulumi.Input<string>;
}
