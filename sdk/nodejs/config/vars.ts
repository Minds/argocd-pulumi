// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("argocd");

/**
 * ArgoCD authentication token, takes precedence over `username`/`password`. Can be set through the `ARGOCD_AUTH_TOKEN`
 * environment variable.
 */
export declare const authToken: string | undefined;
Object.defineProperty(exports, "authToken", {
    get() {
        return __config.get("authToken");
    },
    enumerable: true,
});

/**
 * Additional root CA certificates file to add to the client TLS connection pool.
 */
export declare const certFile: string | undefined;
Object.defineProperty(exports, "certFile", {
    get() {
        return __config.get("certFile");
    },
    enumerable: true,
});

/**
 * Client certificate.
 */
export declare const clientCertFile: string | undefined;
Object.defineProperty(exports, "clientCertFile", {
    get() {
        return __config.get("clientCertFile");
    },
    enumerable: true,
});

/**
 * Client certificate key.
 */
export declare const clientCertKey: string | undefined;
Object.defineProperty(exports, "clientCertKey", {
    get() {
        return __config.get("clientCertKey");
    },
    enumerable: true,
});

/**
 * Override the default config path of `$HOME/.config/argocd/config`. Only relevant when `useLocalConfig`. Can be set
 * through the `ARGOCD_CONFIG_PATH` environment variable.
 */
export declare const configPath: string | undefined;
Object.defineProperty(exports, "configPath", {
    get() {
        return __config.get("configPath");
    },
    enumerable: true,
});

/**
 * Context to choose when using a local ArgoCD config file. Only relevant when `useLocalConfig`. Can be set through
 * `ARGOCD_CONTEXT` environment variable.
 */
export declare const context: string | undefined;
Object.defineProperty(exports, "context", {
    get() {
        return __config.get("context");
    },
    enumerable: true,
});

/**
 * Configure direct access using Kubernetes API server. **Warning**: this feature works by starting a local ArgoCD API
 * server that talks directly to the Kubernetes API using the **current context in the default kubeconfig**
 * (`~/.kube/config`). This behavior cannot be overridden using either environment variables or the `kubernetes` block in
 * the provider configuration at present). If the server fails to start (e.g. your kubeconfig is misconfigured) then the
 * provider will fail as a result of the `argocd` module forcing it to exit and no logs will be available to help you debug
 * this. The error message will be similar to > `The plugin encountered an error, and failed to respond to the
 * plugin.(*GRPCProvider).ReadResource call. The plugin logs may contain more details.` To debug this, you will need to
 * login via the ArgoCD CLI using `argocd login --core` and then running an operation. E.g. `argocd app list`.
 */
export declare const core: boolean | undefined;
Object.defineProperty(exports, "core", {
    get() {
        return __config.getObject<boolean>("core");
    },
    enumerable: true,
});

/**
 * Whether to use gRPC web proxy client. Useful if Argo CD server is behind proxy which does not support HTTP2.
 */
export declare const grpcWeb: boolean | undefined;
Object.defineProperty(exports, "grpcWeb", {
    get() {
        return __config.getObject<boolean>("grpcWeb");
    },
    enumerable: true,
});

/**
 * Use the gRPC web proxy client and set the web root, e.g. `argo-cd`. Useful if the Argo CD server is behind a proxy at a
 * non-root path.
 */
export declare const grpcWebRootPath: string | undefined;
Object.defineProperty(exports, "grpcWebRootPath", {
    get() {
        return __config.get("grpcWebRootPath");
    },
    enumerable: true,
});

/**
 * Additional headers to add to each request to the ArgoCD server.
 */
export declare const headers: string[] | undefined;
Object.defineProperty(exports, "headers", {
    get() {
        return __config.getObject<string[]>("headers");
    },
    enumerable: true,
});

/**
 * Whether to skip TLS server certificate. Can be set through the `ARGOCD_INSECURE` environment variable.
 */
export declare const insecure: boolean | undefined;
Object.defineProperty(exports, "insecure", {
    get() {
        return __config.getObject<boolean>("insecure");
    },
    enumerable: true,
});

/**
 * Kubernetes configuration overrides. Only relevant when `portForward = true` or `portForwardWithNamespace = "foo"`. The
 * kubeconfig file that is used can be overridden using the [`KUBECONFIG` environment
 * variable](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#the-kubeconfig-environment-variable)).
 */
export declare const kubernetes: outputs.config.Kubernetes | undefined;
Object.defineProperty(exports, "kubernetes", {
    get() {
        return __config.getObject<outputs.config.Kubernetes>("kubernetes");
    },
    enumerable: true,
});

/**
 * Authentication password. Can be set through the `ARGOCD_AUTH_PASSWORD` environment variable.
 */
export declare const password: string | undefined;
Object.defineProperty(exports, "password", {
    get() {
        return __config.get("password");
    },
    enumerable: true,
});

/**
 * Whether to initiate an unencrypted connection to ArgoCD server.
 */
export declare const plainText: boolean | undefined;
Object.defineProperty(exports, "plainText", {
    get() {
        return __config.getObject<boolean>("plainText");
    },
    enumerable: true,
});

/**
 * Connect to a random argocd-server port using port forwarding.
 */
export declare const portForward: boolean | undefined;
Object.defineProperty(exports, "portForward", {
    get() {
        return __config.getObject<boolean>("portForward");
    },
    enumerable: true,
});

/**
 * Namespace name which should be used for port forwarding.
 */
export declare const portForwardWithNamespace: string | undefined;
Object.defineProperty(exports, "portForwardWithNamespace", {
    get() {
        return __config.get("portForwardWithNamespace");
    },
    enumerable: true,
});

/**
 * ArgoCD server address with port. Can be set through the `ARGOCD_SERVER` environment variable.
 */
export declare const serverAddr: string | undefined;
Object.defineProperty(exports, "serverAddr", {
    get() {
        return __config.get("serverAddr");
    },
    enumerable: true,
});

/**
 * Use the authentication settings found in the local config file. Useful when you have previously logged in using SSO.
 * Conflicts with `authToken`, `username` and `password`.
 */
export declare const useLocalConfig: boolean | undefined;
Object.defineProperty(exports, "useLocalConfig", {
    get() {
        return __config.getObject<boolean>("useLocalConfig");
    },
    enumerable: true,
});

/**
 * User-Agent request header override.
 */
export declare const userAgent: string | undefined;
Object.defineProperty(exports, "userAgent", {
    get() {
        return __config.get("userAgent");
    },
    enumerable: true,
});

/**
 * Authentication username. Can be set through the `ARGOCD_AUTH_USERNAME` environment variable.
 */
export declare const username: string | undefined;
Object.defineProperty(exports, "username", {
    get() {
        return __config.get("username");
    },
    enumerable: true,
});

