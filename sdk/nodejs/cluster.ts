// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages [clusters](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#clusters) within ArgoCD.
 *
 * ## Bearer token Authentication
 *
 * resource "argocd.Cluster" "kubernetes" {
 *   server = "https://1.2.3.4:12345"
 *
 *   config {
 *     bearerToken = "eyJhbGciOiJSUzI..."
 *
 *     tlsClientConfig {
 *       caData = file("path/to/ca.pem")
 *       // caData = "-----BEGIN CERTIFICATE-----\nfoo\nbar\n-----END CERTIFICATE-----"
 *       // caData = base64decode("LS0tLS1CRUdJTiBDRVJUSUZ...")
 *       // insecure = true
 *     }
 *   }
 * }
 *
 * ## GCP GKE cluster
 *
 * data "googleContainerCluster" "cluster" {
 *   name     = "cluster"
 *   location = "europe-west1"
 * }
 *
 * resource "kubernetesServiceAccount" "argocdManager" {
 *   metadata {
 *     name      = "argocd-manager"
 *     namespace = "kube-system"
 *   }
 * }
 *
 * resource "kubernetesClusterRole" "argocdManager" {
 *   metadata {
 *     name = "argocd-manager-role"
 *   }
 *
 *   rule {
 *     apiGroups = ["*"]
 *     resources  = ["*"]
 *     verbs      = ["*"]
 *   }
 *
 *   rule {
 *     nonResourceUrls = ["*"]
 *     verbs             = ["*"]
 *   }
 * }
 *
 * resource "kubernetesClusterRoleBinding" "argocdManager" {
 *   metadata {
 *     name = "argocd-manager-role-binding"
 *   }
 *
 *   roleRef {
 *     apiGroup = "rbac.authorization.k8s.io"
 *     kind      = "ClusterRole"
 *     name      = kubernetes_cluster_role.argocd_manager.metadata.0.name
 *   }
 *
 *   subject {
 *     kind      = "ServiceAccount"
 *     name      = kubernetes_service_account.argocd_manager.metadata.0.name
 *     namespace = kubernetes_service_account.argocd_manager.metadata.0.namespace
 *   }
 * }
 *
 * data "kubernetesSecret" "argocdManager" {
 *   metadata {
 *     name      = kubernetes_service_account.argocd_manager.default_secret_name
 *     namespace = kubernetes_service_account.argocd_manager.metadata.0.namespace
 *   }
 * }
 *
 * resource "argocd.Cluster" "gke" {
 *   server = format("https://%s", data.google_container_cluster.cluster.endpoint)
 *   name   = "gke"
 *
 *   config {
 *     bearerToken = data.kubernetes_secret.argocd_manager.data["token"]
 *     tlsClientConfig {
 *       caData = base64decode(data.google_container_cluster.cluster.master_auth.0.cluster_ca_certificate)
 *     }
 *   }
 * }
 *
 * ## Import
 *
 * Cluster credentials can be imported using the server URL.
 *
 *  Example:
 *
 * ```sh
 * $ pulumi import argocd:index/cluster:Cluster mycluster https://mycluster.io:443
 * ```
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'argocd:index/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * Cluster information for connecting to a cluster.
     */
    public readonly config!: pulumi.Output<outputs.ClusterConfig>;
    /**
     * Information about cluster cache and state.
     */
    public /*out*/ readonly infos!: pulumi.Output<outputs.ClusterInfo[]>;
    /**
     * Standard cluster secret's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    public readonly metadatas!: pulumi.Output<outputs.ClusterMetadata[] | undefined>;
    /**
     * Name of the cluster. If omitted, will use the server address.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * List of namespaces which are accessible in that cluster. Cluster level resources would be ignored if namespace list is not empty.
     */
    public readonly namespaces!: pulumi.Output<string[] | undefined>;
    /**
     * Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-scoped-repositories-and-clusters.
     */
    public readonly project!: pulumi.Output<string | undefined>;
    /**
     * Server is the API server URL of the Kubernetes cluster.
     */
    public readonly server!: pulumi.Output<string | undefined>;
    /**
     * Optional shard number. Calculated on the fly by the application controller if not specified.
     */
    public readonly shard!: pulumi.Output<string | undefined>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["infos"] = state ? state.infos : undefined;
            resourceInputs["metadatas"] = state ? state.metadatas : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespaces"] = state ? state.namespaces : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["shard"] = state ? state.shard : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["metadatas"] = args ? args.metadatas : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespaces"] = args ? args.namespaces : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["shard"] = args ? args.shard : undefined;
            resourceInputs["infos"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * Cluster information for connecting to a cluster.
     */
    config?: pulumi.Input<inputs.ClusterConfig>;
    /**
     * Information about cluster cache and state.
     */
    infos?: pulumi.Input<pulumi.Input<inputs.ClusterInfo>[]>;
    /**
     * Standard cluster secret's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadatas?: pulumi.Input<pulumi.Input<inputs.ClusterMetadata>[]>;
    /**
     * Name of the cluster. If omitted, will use the server address.
     */
    name?: pulumi.Input<string>;
    /**
     * List of namespaces which are accessible in that cluster. Cluster level resources would be ignored if namespace list is not empty.
     */
    namespaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-scoped-repositories-and-clusters.
     */
    project?: pulumi.Input<string>;
    /**
     * Server is the API server URL of the Kubernetes cluster.
     */
    server?: pulumi.Input<string>;
    /**
     * Optional shard number. Calculated on the fly by the application controller if not specified.
     */
    shard?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * Cluster information for connecting to a cluster.
     */
    config: pulumi.Input<inputs.ClusterConfig>;
    /**
     * Standard cluster secret's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadatas?: pulumi.Input<pulumi.Input<inputs.ClusterMetadata>[]>;
    /**
     * Name of the cluster. If omitted, will use the server address.
     */
    name?: pulumi.Input<string>;
    /**
     * List of namespaces which are accessible in that cluster. Cluster level resources would be ignored if namespace list is not empty.
     */
    namespaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-scoped-repositories-and-clusters.
     */
    project?: pulumi.Input<string>;
    /**
     * Server is the API server URL of the Kubernetes cluster.
     */
    server?: pulumi.Input<string>;
    /**
     * Optional shard number. Calculated on the fly by the application controller if not specified.
     */
    shard?: pulumi.Input<string>;
}
