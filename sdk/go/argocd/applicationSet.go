// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package argocd

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-argocd/sdk/go/argocd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages [application sets](https://argo-cd.readthedocs.io/en/stable/user-guide/application-set/) within ArgoCD.
type ApplicationSet struct {
	pulumi.CustomResourceState

	// Kubernetes object metadata for templated Application.
	Metadata ApplicationSetMetadataOutput `pulumi:"metadata"`
	// The application specification.
	Spec ApplicationSetSpecOutput `pulumi:"spec"`
}

// NewApplicationSet registers a new resource with the given unique name, arguments, and options.
func NewApplicationSet(ctx *pulumi.Context,
	name string, args *ApplicationSetArgs, opts ...pulumi.ResourceOption) (*ApplicationSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Metadata == nil {
		return nil, errors.New("invalid value for required argument 'Metadata'")
	}
	if args.Spec == nil {
		return nil, errors.New("invalid value for required argument 'Spec'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplicationSet
	err := ctx.RegisterResource("argocd:index/applicationSet:ApplicationSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationSet gets an existing ApplicationSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationSetState, opts ...pulumi.ResourceOption) (*ApplicationSet, error) {
	var resource ApplicationSet
	err := ctx.ReadResource("argocd:index/applicationSet:ApplicationSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationSet resources.
type applicationSetState struct {
	// Kubernetes object metadata for templated Application.
	Metadata *ApplicationSetMetadata `pulumi:"metadata"`
	// The application specification.
	Spec *ApplicationSetSpec `pulumi:"spec"`
}

type ApplicationSetState struct {
	// Kubernetes object metadata for templated Application.
	Metadata ApplicationSetMetadataPtrInput
	// The application specification.
	Spec ApplicationSetSpecPtrInput
}

func (ApplicationSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationSetState)(nil)).Elem()
}

type applicationSetArgs struct {
	// Kubernetes object metadata for templated Application.
	Metadata ApplicationSetMetadata `pulumi:"metadata"`
	// The application specification.
	Spec ApplicationSetSpec `pulumi:"spec"`
}

// The set of arguments for constructing a ApplicationSet resource.
type ApplicationSetArgs struct {
	// Kubernetes object metadata for templated Application.
	Metadata ApplicationSetMetadataInput
	// The application specification.
	Spec ApplicationSetSpecInput
}

func (ApplicationSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationSetArgs)(nil)).Elem()
}

type ApplicationSetInput interface {
	pulumi.Input

	ToApplicationSetOutput() ApplicationSetOutput
	ToApplicationSetOutputWithContext(ctx context.Context) ApplicationSetOutput
}

func (*ApplicationSet) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSet)(nil)).Elem()
}

func (i *ApplicationSet) ToApplicationSetOutput() ApplicationSetOutput {
	return i.ToApplicationSetOutputWithContext(context.Background())
}

func (i *ApplicationSet) ToApplicationSetOutputWithContext(ctx context.Context) ApplicationSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSetOutput)
}

// ApplicationSetArrayInput is an input type that accepts ApplicationSetArray and ApplicationSetArrayOutput values.
// You can construct a concrete instance of `ApplicationSetArrayInput` via:
//
//	ApplicationSetArray{ ApplicationSetArgs{...} }
type ApplicationSetArrayInput interface {
	pulumi.Input

	ToApplicationSetArrayOutput() ApplicationSetArrayOutput
	ToApplicationSetArrayOutputWithContext(context.Context) ApplicationSetArrayOutput
}

type ApplicationSetArray []ApplicationSetInput

func (ApplicationSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationSet)(nil)).Elem()
}

func (i ApplicationSetArray) ToApplicationSetArrayOutput() ApplicationSetArrayOutput {
	return i.ToApplicationSetArrayOutputWithContext(context.Background())
}

func (i ApplicationSetArray) ToApplicationSetArrayOutputWithContext(ctx context.Context) ApplicationSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSetArrayOutput)
}

// ApplicationSetMapInput is an input type that accepts ApplicationSetMap and ApplicationSetMapOutput values.
// You can construct a concrete instance of `ApplicationSetMapInput` via:
//
//	ApplicationSetMap{ "key": ApplicationSetArgs{...} }
type ApplicationSetMapInput interface {
	pulumi.Input

	ToApplicationSetMapOutput() ApplicationSetMapOutput
	ToApplicationSetMapOutputWithContext(context.Context) ApplicationSetMapOutput
}

type ApplicationSetMap map[string]ApplicationSetInput

func (ApplicationSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationSet)(nil)).Elem()
}

func (i ApplicationSetMap) ToApplicationSetMapOutput() ApplicationSetMapOutput {
	return i.ToApplicationSetMapOutputWithContext(context.Background())
}

func (i ApplicationSetMap) ToApplicationSetMapOutputWithContext(ctx context.Context) ApplicationSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSetMapOutput)
}

type ApplicationSetOutput struct{ *pulumi.OutputState }

func (ApplicationSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSet)(nil)).Elem()
}

func (o ApplicationSetOutput) ToApplicationSetOutput() ApplicationSetOutput {
	return o
}

func (o ApplicationSetOutput) ToApplicationSetOutputWithContext(ctx context.Context) ApplicationSetOutput {
	return o
}

// Kubernetes object metadata for templated Application.
func (o ApplicationSetOutput) Metadata() ApplicationSetMetadataOutput {
	return o.ApplyT(func(v *ApplicationSet) ApplicationSetMetadataOutput { return v.Metadata }).(ApplicationSetMetadataOutput)
}

// The application specification.
func (o ApplicationSetOutput) Spec() ApplicationSetSpecOutput {
	return o.ApplyT(func(v *ApplicationSet) ApplicationSetSpecOutput { return v.Spec }).(ApplicationSetSpecOutput)
}

type ApplicationSetArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationSet)(nil)).Elem()
}

func (o ApplicationSetArrayOutput) ToApplicationSetArrayOutput() ApplicationSetArrayOutput {
	return o
}

func (o ApplicationSetArrayOutput) ToApplicationSetArrayOutputWithContext(ctx context.Context) ApplicationSetArrayOutput {
	return o
}

func (o ApplicationSetArrayOutput) Index(i pulumi.IntInput) ApplicationSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplicationSet {
		return vs[0].([]*ApplicationSet)[vs[1].(int)]
	}).(ApplicationSetOutput)
}

type ApplicationSetMapOutput struct{ *pulumi.OutputState }

func (ApplicationSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationSet)(nil)).Elem()
}

func (o ApplicationSetMapOutput) ToApplicationSetMapOutput() ApplicationSetMapOutput {
	return o
}

func (o ApplicationSetMapOutput) ToApplicationSetMapOutputWithContext(ctx context.Context) ApplicationSetMapOutput {
	return o
}

func (o ApplicationSetMapOutput) MapIndex(k pulumi.StringInput) ApplicationSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplicationSet {
		return vs[0].(map[string]*ApplicationSet)[vs[1].(string)]
	}).(ApplicationSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSetInput)(nil)).Elem(), &ApplicationSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSetArrayInput)(nil)).Elem(), ApplicationSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSetMapInput)(nil)).Elem(), ApplicationSetMap{})
	pulumi.RegisterOutputType(ApplicationSetOutput{})
	pulumi.RegisterOutputType(ApplicationSetArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSetMapOutput{})
}
