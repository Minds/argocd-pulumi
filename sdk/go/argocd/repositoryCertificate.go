// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package argocd

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-argocd/sdk/go/argocd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages [custom TLS certificates](https://argo-cd.readthedocs.io/en/stable/user-guide/private-repositories/#self-signed-untrusted-tls-certificates) used by ArgoCD for connecting Git repositories.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-argocd/sdk/go/argocd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := argocd.NewRepositoryCertificate(ctx, "private-git-repository", &argocd.RepositoryCertificateArgs{
//				Ssh: &argocd.RepositoryCertificateSshArgs{
//					CertData:    pulumi.String("AAAAB3NzaC1yc2EAAAADAQABAAABgQCiPZAufKgxwRgxP9qy2Gtub0FI8qJGtL8Ldb7KatBeRUQQPn8QK7ZYjzYDvP1GOutFMaQT0rKIqaGImIBsztNCno...\n\n"),
//					CertSubtype: pulumi.String("ssh-rsa"),
//					ServerName:  pulumi.String("private-git-repository.local"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RepositoryCertificate struct {
	pulumi.CustomResourceState

	// Defines a `https` certificate.
	Https RepositoryCertificateHttpsPtrOutput `pulumi:"https"`
	// Defines a `ssh` certificate.
	Ssh RepositoryCertificateSshPtrOutput `pulumi:"ssh"`
}

// NewRepositoryCertificate registers a new resource with the given unique name, arguments, and options.
func NewRepositoryCertificate(ctx *pulumi.Context,
	name string, args *RepositoryCertificateArgs, opts ...pulumi.ResourceOption) (*RepositoryCertificate, error) {
	if args == nil {
		args = &RepositoryCertificateArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RepositoryCertificate
	err := ctx.RegisterResource("argocd:index/repositoryCertificate:RepositoryCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepositoryCertificate gets an existing RepositoryCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositoryCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryCertificateState, opts ...pulumi.ResourceOption) (*RepositoryCertificate, error) {
	var resource RepositoryCertificate
	err := ctx.ReadResource("argocd:index/repositoryCertificate:RepositoryCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepositoryCertificate resources.
type repositoryCertificateState struct {
	// Defines a `https` certificate.
	Https *RepositoryCertificateHttps `pulumi:"https"`
	// Defines a `ssh` certificate.
	Ssh *RepositoryCertificateSsh `pulumi:"ssh"`
}

type RepositoryCertificateState struct {
	// Defines a `https` certificate.
	Https RepositoryCertificateHttpsPtrInput
	// Defines a `ssh` certificate.
	Ssh RepositoryCertificateSshPtrInput
}

func (RepositoryCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryCertificateState)(nil)).Elem()
}

type repositoryCertificateArgs struct {
	// Defines a `https` certificate.
	Https *RepositoryCertificateHttps `pulumi:"https"`
	// Defines a `ssh` certificate.
	Ssh *RepositoryCertificateSsh `pulumi:"ssh"`
}

// The set of arguments for constructing a RepositoryCertificate resource.
type RepositoryCertificateArgs struct {
	// Defines a `https` certificate.
	Https RepositoryCertificateHttpsPtrInput
	// Defines a `ssh` certificate.
	Ssh RepositoryCertificateSshPtrInput
}

func (RepositoryCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryCertificateArgs)(nil)).Elem()
}

type RepositoryCertificateInput interface {
	pulumi.Input

	ToRepositoryCertificateOutput() RepositoryCertificateOutput
	ToRepositoryCertificateOutputWithContext(ctx context.Context) RepositoryCertificateOutput
}

func (*RepositoryCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryCertificate)(nil)).Elem()
}

func (i *RepositoryCertificate) ToRepositoryCertificateOutput() RepositoryCertificateOutput {
	return i.ToRepositoryCertificateOutputWithContext(context.Background())
}

func (i *RepositoryCertificate) ToRepositoryCertificateOutputWithContext(ctx context.Context) RepositoryCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCertificateOutput)
}

// RepositoryCertificateArrayInput is an input type that accepts RepositoryCertificateArray and RepositoryCertificateArrayOutput values.
// You can construct a concrete instance of `RepositoryCertificateArrayInput` via:
//
//	RepositoryCertificateArray{ RepositoryCertificateArgs{...} }
type RepositoryCertificateArrayInput interface {
	pulumi.Input

	ToRepositoryCertificateArrayOutput() RepositoryCertificateArrayOutput
	ToRepositoryCertificateArrayOutputWithContext(context.Context) RepositoryCertificateArrayOutput
}

type RepositoryCertificateArray []RepositoryCertificateInput

func (RepositoryCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryCertificate)(nil)).Elem()
}

func (i RepositoryCertificateArray) ToRepositoryCertificateArrayOutput() RepositoryCertificateArrayOutput {
	return i.ToRepositoryCertificateArrayOutputWithContext(context.Background())
}

func (i RepositoryCertificateArray) ToRepositoryCertificateArrayOutputWithContext(ctx context.Context) RepositoryCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCertificateArrayOutput)
}

// RepositoryCertificateMapInput is an input type that accepts RepositoryCertificateMap and RepositoryCertificateMapOutput values.
// You can construct a concrete instance of `RepositoryCertificateMapInput` via:
//
//	RepositoryCertificateMap{ "key": RepositoryCertificateArgs{...} }
type RepositoryCertificateMapInput interface {
	pulumi.Input

	ToRepositoryCertificateMapOutput() RepositoryCertificateMapOutput
	ToRepositoryCertificateMapOutputWithContext(context.Context) RepositoryCertificateMapOutput
}

type RepositoryCertificateMap map[string]RepositoryCertificateInput

func (RepositoryCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryCertificate)(nil)).Elem()
}

func (i RepositoryCertificateMap) ToRepositoryCertificateMapOutput() RepositoryCertificateMapOutput {
	return i.ToRepositoryCertificateMapOutputWithContext(context.Background())
}

func (i RepositoryCertificateMap) ToRepositoryCertificateMapOutputWithContext(ctx context.Context) RepositoryCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCertificateMapOutput)
}

type RepositoryCertificateOutput struct{ *pulumi.OutputState }

func (RepositoryCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryCertificate)(nil)).Elem()
}

func (o RepositoryCertificateOutput) ToRepositoryCertificateOutput() RepositoryCertificateOutput {
	return o
}

func (o RepositoryCertificateOutput) ToRepositoryCertificateOutputWithContext(ctx context.Context) RepositoryCertificateOutput {
	return o
}

// Defines a `https` certificate.
func (o RepositoryCertificateOutput) Https() RepositoryCertificateHttpsPtrOutput {
	return o.ApplyT(func(v *RepositoryCertificate) RepositoryCertificateHttpsPtrOutput { return v.Https }).(RepositoryCertificateHttpsPtrOutput)
}

// Defines a `ssh` certificate.
func (o RepositoryCertificateOutput) Ssh() RepositoryCertificateSshPtrOutput {
	return o.ApplyT(func(v *RepositoryCertificate) RepositoryCertificateSshPtrOutput { return v.Ssh }).(RepositoryCertificateSshPtrOutput)
}

type RepositoryCertificateArrayOutput struct{ *pulumi.OutputState }

func (RepositoryCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryCertificate)(nil)).Elem()
}

func (o RepositoryCertificateArrayOutput) ToRepositoryCertificateArrayOutput() RepositoryCertificateArrayOutput {
	return o
}

func (o RepositoryCertificateArrayOutput) ToRepositoryCertificateArrayOutputWithContext(ctx context.Context) RepositoryCertificateArrayOutput {
	return o
}

func (o RepositoryCertificateArrayOutput) Index(i pulumi.IntInput) RepositoryCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RepositoryCertificate {
		return vs[0].([]*RepositoryCertificate)[vs[1].(int)]
	}).(RepositoryCertificateOutput)
}

type RepositoryCertificateMapOutput struct{ *pulumi.OutputState }

func (RepositoryCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryCertificate)(nil)).Elem()
}

func (o RepositoryCertificateMapOutput) ToRepositoryCertificateMapOutput() RepositoryCertificateMapOutput {
	return o
}

func (o RepositoryCertificateMapOutput) ToRepositoryCertificateMapOutputWithContext(ctx context.Context) RepositoryCertificateMapOutput {
	return o
}

func (o RepositoryCertificateMapOutput) MapIndex(k pulumi.StringInput) RepositoryCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RepositoryCertificate {
		return vs[0].(map[string]*RepositoryCertificate)[vs[1].(string)]
	}).(RepositoryCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCertificateInput)(nil)).Elem(), &RepositoryCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCertificateArrayInput)(nil)).Elem(), RepositoryCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCertificateMapInput)(nil)).Elem(), RepositoryCertificateMap{})
	pulumi.RegisterOutputType(RepositoryCertificateOutput{})
	pulumi.RegisterOutputType(RepositoryCertificateArrayOutput{})
	pulumi.RegisterOutputType(RepositoryCertificateMapOutput{})
}
