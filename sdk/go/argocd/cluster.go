// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package argocd

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-argocd/sdk/go/argocd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages [clusters](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#clusters) within ArgoCD.
//
// ## Bearer token Authentication
//
//	resource "Cluster" "kubernetes" {
//	  server = "https://1.2.3.4:12345"
//
//	  config {
//	    bearerToken = "eyJhbGciOiJSUzI..."
//
//	    tlsClientConfig {
//	      caData = file("path/to/ca.pem")
//	      // caData = "-----BEGIN CERTIFICATE-----\nfoo\nbar\n-----END CERTIFICATE-----"
//	      // caData = base64decode("LS0tLS1CRUdJTiBDRVJUSUZ...")
//	      // insecure = true
//	    }
//	  }
//	}
//
// ## GCP GKE cluster
//
//	data "googleContainerCluster" "cluster" {
//	  name     = "cluster"
//	  location = "europe-west1"
//	}
//
//	resource "kubernetesServiceAccount" "argocdManager" {
//	  metadata {
//	    name      = "argocd-manager"
//	    namespace = "kube-system"
//	  }
//	}
//
//	resource "kubernetesClusterRole" "argocdManager" {
//	  metadata {
//	    name = "argocd-manager-role"
//	  }
//
//	  rule {
//	    apiGroups = ["*"]
//	    resources  = ["*"]
//	    verbs      = ["*"]
//	  }
//
//	  rule {
//	    nonResourceUrls = ["*"]
//	    verbs             = ["*"]
//	  }
//	}
//
//	resource "kubernetesClusterRoleBinding" "argocdManager" {
//	  metadata {
//	    name = "argocd-manager-role-binding"
//	  }
//
//	  roleRef {
//	    apiGroup = "rbac.authorization.k8s.io"
//	    kind      = "ClusterRole"
//	    name      = kubernetes_cluster_role.argocd_manager.metadata.0.name
//	  }
//
//	  subject {
//	    kind      = "ServiceAccount"
//	    name      = kubernetes_service_account.argocd_manager.metadata.0.name
//	    namespace = kubernetes_service_account.argocd_manager.metadata.0.namespace
//	  }
//	}
//
//	data "kubernetesSecret" "argocdManager" {
//	  metadata {
//	    name      = kubernetes_service_account.argocd_manager.default_secret_name
//	    namespace = kubernetes_service_account.argocd_manager.metadata.0.namespace
//	  }
//	}
//
//	resource "Cluster" "gke" {
//	  server = format("https://%s", data.google_container_cluster.cluster.endpoint)
//	  name   = "gke"
//
//	  config {
//	    bearerToken = data.kubernetes_secret.argocd_manager.data["token"]
//	    tlsClientConfig {
//	      caData = base64decode(data.google_container_cluster.cluster.master_auth.0.cluster_ca_certificate)
//	    }
//	  }
//	}
//
// ## Import
//
// Cluster credentials can be imported using the server URL.
//
//	Example:
//
// ```sh
// $ pulumi import argocd:index/cluster:Cluster mycluster https://mycluster.io:443
// ```
type Cluster struct {
	pulumi.CustomResourceState

	// Cluster information for connecting to a cluster.
	Config ClusterConfigOutput `pulumi:"config"`
	// Information about cluster cache and state.
	Infos ClusterInfoArrayOutput `pulumi:"infos"`
	// Standard cluster secret's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadatas ClusterMetadataArrayOutput `pulumi:"metadatas"`
	// Name of the cluster. If omitted, will use the server address.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of namespaces which are accessible in that cluster. Cluster level resources would be ignored if namespace list is not empty.
	Namespaces pulumi.StringArrayOutput `pulumi:"namespaces"`
	// Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-scoped-repositories-and-clusters.
	Project pulumi.StringPtrOutput `pulumi:"project"`
	// Server is the API server URL of the Kubernetes cluster.
	Server pulumi.StringPtrOutput `pulumi:"server"`
	// Optional shard number. Calculated on the fly by the application controller if not specified.
	Shard pulumi.StringPtrOutput `pulumi:"shard"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("argocd:index/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("argocd:index/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// Cluster information for connecting to a cluster.
	Config *ClusterConfig `pulumi:"config"`
	// Information about cluster cache and state.
	Infos []ClusterInfo `pulumi:"infos"`
	// Standard cluster secret's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadatas []ClusterMetadata `pulumi:"metadatas"`
	// Name of the cluster. If omitted, will use the server address.
	Name *string `pulumi:"name"`
	// List of namespaces which are accessible in that cluster. Cluster level resources would be ignored if namespace list is not empty.
	Namespaces []string `pulumi:"namespaces"`
	// Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-scoped-repositories-and-clusters.
	Project *string `pulumi:"project"`
	// Server is the API server URL of the Kubernetes cluster.
	Server *string `pulumi:"server"`
	// Optional shard number. Calculated on the fly by the application controller if not specified.
	Shard *string `pulumi:"shard"`
}

type ClusterState struct {
	// Cluster information for connecting to a cluster.
	Config ClusterConfigPtrInput
	// Information about cluster cache and state.
	Infos ClusterInfoArrayInput
	// Standard cluster secret's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadatas ClusterMetadataArrayInput
	// Name of the cluster. If omitted, will use the server address.
	Name pulumi.StringPtrInput
	// List of namespaces which are accessible in that cluster. Cluster level resources would be ignored if namespace list is not empty.
	Namespaces pulumi.StringArrayInput
	// Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-scoped-repositories-and-clusters.
	Project pulumi.StringPtrInput
	// Server is the API server URL of the Kubernetes cluster.
	Server pulumi.StringPtrInput
	// Optional shard number. Calculated on the fly by the application controller if not specified.
	Shard pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// Cluster information for connecting to a cluster.
	Config ClusterConfig `pulumi:"config"`
	// Standard cluster secret's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadatas []ClusterMetadata `pulumi:"metadatas"`
	// Name of the cluster. If omitted, will use the server address.
	Name *string `pulumi:"name"`
	// List of namespaces which are accessible in that cluster. Cluster level resources would be ignored if namespace list is not empty.
	Namespaces []string `pulumi:"namespaces"`
	// Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-scoped-repositories-and-clusters.
	Project *string `pulumi:"project"`
	// Server is the API server URL of the Kubernetes cluster.
	Server *string `pulumi:"server"`
	// Optional shard number. Calculated on the fly by the application controller if not specified.
	Shard *string `pulumi:"shard"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// Cluster information for connecting to a cluster.
	Config ClusterConfigInput
	// Standard cluster secret's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadatas ClusterMetadataArrayInput
	// Name of the cluster. If omitted, will use the server address.
	Name pulumi.StringPtrInput
	// List of namespaces which are accessible in that cluster. Cluster level resources would be ignored if namespace list is not empty.
	Namespaces pulumi.StringArrayInput
	// Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-scoped-repositories-and-clusters.
	Project pulumi.StringPtrInput
	// Server is the API server URL of the Kubernetes cluster.
	Server pulumi.StringPtrInput
	// Optional shard number. Calculated on the fly by the application controller if not specified.
	Shard pulumi.StringPtrInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// Cluster information for connecting to a cluster.
func (o ClusterOutput) Config() ClusterConfigOutput {
	return o.ApplyT(func(v *Cluster) ClusterConfigOutput { return v.Config }).(ClusterConfigOutput)
}

// Information about cluster cache and state.
func (o ClusterOutput) Infos() ClusterInfoArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterInfoArrayOutput { return v.Infos }).(ClusterInfoArrayOutput)
}

// Standard cluster secret's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ClusterOutput) Metadatas() ClusterMetadataArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterMetadataArrayOutput { return v.Metadatas }).(ClusterMetadataArrayOutput)
}

// Name of the cluster. If omitted, will use the server address.
func (o ClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of namespaces which are accessible in that cluster. Cluster level resources would be ignored if namespace list is not empty.
func (o ClusterOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.Namespaces }).(pulumi.StringArrayOutput)
}

// Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-scoped-repositories-and-clusters.
func (o ClusterOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.Project }).(pulumi.StringPtrOutput)
}

// Server is the API server URL of the Kubernetes cluster.
func (o ClusterOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.Server }).(pulumi.StringPtrOutput)
}

// Optional shard number. Calculated on the fly by the application controller if not specified.
func (o ClusterOutput) Shard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.Shard }).(pulumi.StringPtrOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
