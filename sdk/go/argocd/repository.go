// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package argocd

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-argocd/sdk/go/argocd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages [repositories](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#repositories) within ArgoCD.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-argocd/sdk/go/argocd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := argocd.NewRepository(ctx, "publicNginxHelm", &argocd.RepositoryArgs{
//				Repo: pulumi.String("https://helm.nginx.com/stable"),
//				Type: pulumi.String("helm"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = argocd.NewRepository(ctx, "publicGit", &argocd.RepositoryArgs{
//				Repo: pulumi.String("git@github.com:user/somerepo.git"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = argocd.NewRepository(ctx, "private", &argocd.RepositoryArgs{
//				Insecure:      pulumi.Bool(true),
//				Repo:          pulumi.String("git@private-git-repository.local:somerepo.git"),
//				SshPrivateKey: pulumi.String("-----BEGIN OPENSSH PRIVATE KEY-----\nfoo\nbar\n-----END OPENSSH PRIVATE KEY-----\n"),
//				Username:      pulumi.String("git"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Repositories can be imported using the repository URL.
//
//	Note: as the ArgoCD API does not return any sensitive information, a
//
//	subsequent `pulumi up` should be executed to make the `password`,
//
//	`ssh_private_key` and `tls_client_cert_key` attributes converge to their
//
//	expected values defined within the plan.
//
//	Example:
//
// ```sh
// $ pulumi import argocd:index/repository:Repository myrepo git@private-git-repository.local:somerepo.git
// ```
type Repository struct {
	pulumi.CustomResourceState

	// Contains information about the current state of connection to the repository server.
	ConnectionStateStatus pulumi.StringOutput `pulumi:"connectionStateStatus"`
	// Whether `git-lfs` support should be enabled for this repository.
	EnableLfs pulumi.BoolPtrOutput `pulumi:"enableLfs"`
	// Whether `helm-oci` support should be enabled for this repository.
	EnableOci pulumi.BoolPtrOutput `pulumi:"enableOci"`
	// GitHub API URL for GitHub app authentication.
	GithubappEnterpriseBaseUrl pulumi.StringPtrOutput `pulumi:"githubappEnterpriseBaseUrl"`
	// ID of the GitHub app used to access the repo.
	GithubappId pulumi.StringPtrOutput `pulumi:"githubappId"`
	// The installation ID of the GitHub App used to access the repo.
	GithubappInstallationId pulumi.StringPtrOutput `pulumi:"githubappInstallationId"`
	// Private key data (PEM) for authentication via GitHub app.
	GithubappPrivateKey pulumi.StringPtrOutput `pulumi:"githubappPrivateKey"`
	// Whether credentials were inherited from a credential set.
	InheritedCreds pulumi.BoolOutput `pulumi:"inheritedCreds"`
	// Whether the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.
	Insecure pulumi.BoolPtrOutput `pulumi:"insecure"`
	// Name to be used for this repo. Only used with Helm repos.
	Name pulumi.StringOutput `pulumi:"name"`
	// Password or PAT used for authenticating at the remote repository.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The project name, in case the repository is project scoped.
	Project pulumi.StringPtrOutput `pulumi:"project"`
	// URL of the repository.
	Repo pulumi.StringOutput `pulumi:"repo"`
	// PEM data for authenticating at the repo server. Only used with Git repos.
	SshPrivateKey pulumi.StringPtrOutput `pulumi:"sshPrivateKey"`
	// TLS client certificate in PEM format for authenticating at the repo server.
	TlsClientCertData pulumi.StringPtrOutput `pulumi:"tlsClientCertData"`
	// TLS client certificate private key in PEM format for authenticating at the repo server.
	TlsClientCertKey pulumi.StringPtrOutput `pulumi:"tlsClientCertKey"`
	// Type of the repo. Can be either `git` or `helm`. `git` is assumed if empty or absent.
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// Username used for authenticating at the remote repository.
	Username pulumi.StringPtrOutput `pulumi:"username"`
}

// NewRepository registers a new resource with the given unique name, arguments, and options.
func NewRepository(ctx *pulumi.Context,
	name string, args *RepositoryArgs, opts ...pulumi.ResourceOption) (*Repository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Repo == nil {
		return nil, errors.New("invalid value for required argument 'Repo'")
	}
	if args.GithubappPrivateKey != nil {
		args.GithubappPrivateKey = pulumi.ToSecret(args.GithubappPrivateKey).(pulumi.StringPtrInput)
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	if args.SshPrivateKey != nil {
		args.SshPrivateKey = pulumi.ToSecret(args.SshPrivateKey).(pulumi.StringPtrInput)
	}
	if args.TlsClientCertKey != nil {
		args.TlsClientCertKey = pulumi.ToSecret(args.TlsClientCertKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"githubappPrivateKey",
		"password",
		"sshPrivateKey",
		"tlsClientCertKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Repository
	err := ctx.RegisterResource("argocd:index/repository:Repository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepository gets an existing Repository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryState, opts ...pulumi.ResourceOption) (*Repository, error) {
	var resource Repository
	err := ctx.ReadResource("argocd:index/repository:Repository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Repository resources.
type repositoryState struct {
	// Contains information about the current state of connection to the repository server.
	ConnectionStateStatus *string `pulumi:"connectionStateStatus"`
	// Whether `git-lfs` support should be enabled for this repository.
	EnableLfs *bool `pulumi:"enableLfs"`
	// Whether `helm-oci` support should be enabled for this repository.
	EnableOci *bool `pulumi:"enableOci"`
	// GitHub API URL for GitHub app authentication.
	GithubappEnterpriseBaseUrl *string `pulumi:"githubappEnterpriseBaseUrl"`
	// ID of the GitHub app used to access the repo.
	GithubappId *string `pulumi:"githubappId"`
	// The installation ID of the GitHub App used to access the repo.
	GithubappInstallationId *string `pulumi:"githubappInstallationId"`
	// Private key data (PEM) for authentication via GitHub app.
	GithubappPrivateKey *string `pulumi:"githubappPrivateKey"`
	// Whether credentials were inherited from a credential set.
	InheritedCreds *bool `pulumi:"inheritedCreds"`
	// Whether the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.
	Insecure *bool `pulumi:"insecure"`
	// Name to be used for this repo. Only used with Helm repos.
	Name *string `pulumi:"name"`
	// Password or PAT used for authenticating at the remote repository.
	Password *string `pulumi:"password"`
	// The project name, in case the repository is project scoped.
	Project *string `pulumi:"project"`
	// URL of the repository.
	Repo *string `pulumi:"repo"`
	// PEM data for authenticating at the repo server. Only used with Git repos.
	SshPrivateKey *string `pulumi:"sshPrivateKey"`
	// TLS client certificate in PEM format for authenticating at the repo server.
	TlsClientCertData *string `pulumi:"tlsClientCertData"`
	// TLS client certificate private key in PEM format for authenticating at the repo server.
	TlsClientCertKey *string `pulumi:"tlsClientCertKey"`
	// Type of the repo. Can be either `git` or `helm`. `git` is assumed if empty or absent.
	Type *string `pulumi:"type"`
	// Username used for authenticating at the remote repository.
	Username *string `pulumi:"username"`
}

type RepositoryState struct {
	// Contains information about the current state of connection to the repository server.
	ConnectionStateStatus pulumi.StringPtrInput
	// Whether `git-lfs` support should be enabled for this repository.
	EnableLfs pulumi.BoolPtrInput
	// Whether `helm-oci` support should be enabled for this repository.
	EnableOci pulumi.BoolPtrInput
	// GitHub API URL for GitHub app authentication.
	GithubappEnterpriseBaseUrl pulumi.StringPtrInput
	// ID of the GitHub app used to access the repo.
	GithubappId pulumi.StringPtrInput
	// The installation ID of the GitHub App used to access the repo.
	GithubappInstallationId pulumi.StringPtrInput
	// Private key data (PEM) for authentication via GitHub app.
	GithubappPrivateKey pulumi.StringPtrInput
	// Whether credentials were inherited from a credential set.
	InheritedCreds pulumi.BoolPtrInput
	// Whether the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.
	Insecure pulumi.BoolPtrInput
	// Name to be used for this repo. Only used with Helm repos.
	Name pulumi.StringPtrInput
	// Password or PAT used for authenticating at the remote repository.
	Password pulumi.StringPtrInput
	// The project name, in case the repository is project scoped.
	Project pulumi.StringPtrInput
	// URL of the repository.
	Repo pulumi.StringPtrInput
	// PEM data for authenticating at the repo server. Only used with Git repos.
	SshPrivateKey pulumi.StringPtrInput
	// TLS client certificate in PEM format for authenticating at the repo server.
	TlsClientCertData pulumi.StringPtrInput
	// TLS client certificate private key in PEM format for authenticating at the repo server.
	TlsClientCertKey pulumi.StringPtrInput
	// Type of the repo. Can be either `git` or `helm`. `git` is assumed if empty or absent.
	Type pulumi.StringPtrInput
	// Username used for authenticating at the remote repository.
	Username pulumi.StringPtrInput
}

func (RepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryState)(nil)).Elem()
}

type repositoryArgs struct {
	// Whether `git-lfs` support should be enabled for this repository.
	EnableLfs *bool `pulumi:"enableLfs"`
	// Whether `helm-oci` support should be enabled for this repository.
	EnableOci *bool `pulumi:"enableOci"`
	// GitHub API URL for GitHub app authentication.
	GithubappEnterpriseBaseUrl *string `pulumi:"githubappEnterpriseBaseUrl"`
	// ID of the GitHub app used to access the repo.
	GithubappId *string `pulumi:"githubappId"`
	// The installation ID of the GitHub App used to access the repo.
	GithubappInstallationId *string `pulumi:"githubappInstallationId"`
	// Private key data (PEM) for authentication via GitHub app.
	GithubappPrivateKey *string `pulumi:"githubappPrivateKey"`
	// Whether the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.
	Insecure *bool `pulumi:"insecure"`
	// Name to be used for this repo. Only used with Helm repos.
	Name *string `pulumi:"name"`
	// Password or PAT used for authenticating at the remote repository.
	Password *string `pulumi:"password"`
	// The project name, in case the repository is project scoped.
	Project *string `pulumi:"project"`
	// URL of the repository.
	Repo string `pulumi:"repo"`
	// PEM data for authenticating at the repo server. Only used with Git repos.
	SshPrivateKey *string `pulumi:"sshPrivateKey"`
	// TLS client certificate in PEM format for authenticating at the repo server.
	TlsClientCertData *string `pulumi:"tlsClientCertData"`
	// TLS client certificate private key in PEM format for authenticating at the repo server.
	TlsClientCertKey *string `pulumi:"tlsClientCertKey"`
	// Type of the repo. Can be either `git` or `helm`. `git` is assumed if empty or absent.
	Type *string `pulumi:"type"`
	// Username used for authenticating at the remote repository.
	Username *string `pulumi:"username"`
}

// The set of arguments for constructing a Repository resource.
type RepositoryArgs struct {
	// Whether `git-lfs` support should be enabled for this repository.
	EnableLfs pulumi.BoolPtrInput
	// Whether `helm-oci` support should be enabled for this repository.
	EnableOci pulumi.BoolPtrInput
	// GitHub API URL for GitHub app authentication.
	GithubappEnterpriseBaseUrl pulumi.StringPtrInput
	// ID of the GitHub app used to access the repo.
	GithubappId pulumi.StringPtrInput
	// The installation ID of the GitHub App used to access the repo.
	GithubappInstallationId pulumi.StringPtrInput
	// Private key data (PEM) for authentication via GitHub app.
	GithubappPrivateKey pulumi.StringPtrInput
	// Whether the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.
	Insecure pulumi.BoolPtrInput
	// Name to be used for this repo. Only used with Helm repos.
	Name pulumi.StringPtrInput
	// Password or PAT used for authenticating at the remote repository.
	Password pulumi.StringPtrInput
	// The project name, in case the repository is project scoped.
	Project pulumi.StringPtrInput
	// URL of the repository.
	Repo pulumi.StringInput
	// PEM data for authenticating at the repo server. Only used with Git repos.
	SshPrivateKey pulumi.StringPtrInput
	// TLS client certificate in PEM format for authenticating at the repo server.
	TlsClientCertData pulumi.StringPtrInput
	// TLS client certificate private key in PEM format for authenticating at the repo server.
	TlsClientCertKey pulumi.StringPtrInput
	// Type of the repo. Can be either `git` or `helm`. `git` is assumed if empty or absent.
	Type pulumi.StringPtrInput
	// Username used for authenticating at the remote repository.
	Username pulumi.StringPtrInput
}

func (RepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryArgs)(nil)).Elem()
}

type RepositoryInput interface {
	pulumi.Input

	ToRepositoryOutput() RepositoryOutput
	ToRepositoryOutputWithContext(ctx context.Context) RepositoryOutput
}

func (*Repository) ElementType() reflect.Type {
	return reflect.TypeOf((**Repository)(nil)).Elem()
}

func (i *Repository) ToRepositoryOutput() RepositoryOutput {
	return i.ToRepositoryOutputWithContext(context.Background())
}

func (i *Repository) ToRepositoryOutputWithContext(ctx context.Context) RepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryOutput)
}

// RepositoryArrayInput is an input type that accepts RepositoryArray and RepositoryArrayOutput values.
// You can construct a concrete instance of `RepositoryArrayInput` via:
//
//	RepositoryArray{ RepositoryArgs{...} }
type RepositoryArrayInput interface {
	pulumi.Input

	ToRepositoryArrayOutput() RepositoryArrayOutput
	ToRepositoryArrayOutputWithContext(context.Context) RepositoryArrayOutput
}

type RepositoryArray []RepositoryInput

func (RepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Repository)(nil)).Elem()
}

func (i RepositoryArray) ToRepositoryArrayOutput() RepositoryArrayOutput {
	return i.ToRepositoryArrayOutputWithContext(context.Background())
}

func (i RepositoryArray) ToRepositoryArrayOutputWithContext(ctx context.Context) RepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryArrayOutput)
}

// RepositoryMapInput is an input type that accepts RepositoryMap and RepositoryMapOutput values.
// You can construct a concrete instance of `RepositoryMapInput` via:
//
//	RepositoryMap{ "key": RepositoryArgs{...} }
type RepositoryMapInput interface {
	pulumi.Input

	ToRepositoryMapOutput() RepositoryMapOutput
	ToRepositoryMapOutputWithContext(context.Context) RepositoryMapOutput
}

type RepositoryMap map[string]RepositoryInput

func (RepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Repository)(nil)).Elem()
}

func (i RepositoryMap) ToRepositoryMapOutput() RepositoryMapOutput {
	return i.ToRepositoryMapOutputWithContext(context.Background())
}

func (i RepositoryMap) ToRepositoryMapOutputWithContext(ctx context.Context) RepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryMapOutput)
}

type RepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Repository)(nil)).Elem()
}

func (o RepositoryOutput) ToRepositoryOutput() RepositoryOutput {
	return o
}

func (o RepositoryOutput) ToRepositoryOutputWithContext(ctx context.Context) RepositoryOutput {
	return o
}

// Contains information about the current state of connection to the repository server.
func (o RepositoryOutput) ConnectionStateStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.ConnectionStateStatus }).(pulumi.StringOutput)
}

// Whether `git-lfs` support should be enabled for this repository.
func (o RepositoryOutput) EnableLfs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.EnableLfs }).(pulumi.BoolPtrOutput)
}

// Whether `helm-oci` support should be enabled for this repository.
func (o RepositoryOutput) EnableOci() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.EnableOci }).(pulumi.BoolPtrOutput)
}

// GitHub API URL for GitHub app authentication.
func (o RepositoryOutput) GithubappEnterpriseBaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.GithubappEnterpriseBaseUrl }).(pulumi.StringPtrOutput)
}

// ID of the GitHub app used to access the repo.
func (o RepositoryOutput) GithubappId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.GithubappId }).(pulumi.StringPtrOutput)
}

// The installation ID of the GitHub App used to access the repo.
func (o RepositoryOutput) GithubappInstallationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.GithubappInstallationId }).(pulumi.StringPtrOutput)
}

// Private key data (PEM) for authentication via GitHub app.
func (o RepositoryOutput) GithubappPrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.GithubappPrivateKey }).(pulumi.StringPtrOutput)
}

// Whether credentials were inherited from a credential set.
func (o RepositoryOutput) InheritedCreds() pulumi.BoolOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolOutput { return v.InheritedCreds }).(pulumi.BoolOutput)
}

// Whether the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.
func (o RepositoryOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.Insecure }).(pulumi.BoolPtrOutput)
}

// Name to be used for this repo. Only used with Helm repos.
func (o RepositoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Password or PAT used for authenticating at the remote repository.
func (o RepositoryOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The project name, in case the repository is project scoped.
func (o RepositoryOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.Project }).(pulumi.StringPtrOutput)
}

// URL of the repository.
func (o RepositoryOutput) Repo() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.Repo }).(pulumi.StringOutput)
}

// PEM data for authenticating at the repo server. Only used with Git repos.
func (o RepositoryOutput) SshPrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.SshPrivateKey }).(pulumi.StringPtrOutput)
}

// TLS client certificate in PEM format for authenticating at the repo server.
func (o RepositoryOutput) TlsClientCertData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.TlsClientCertData }).(pulumi.StringPtrOutput)
}

// TLS client certificate private key in PEM format for authenticating at the repo server.
func (o RepositoryOutput) TlsClientCertKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.TlsClientCertKey }).(pulumi.StringPtrOutput)
}

// Type of the repo. Can be either `git` or `helm`. `git` is assumed if empty or absent.
func (o RepositoryOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// Username used for authenticating at the remote repository.
func (o RepositoryOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

type RepositoryArrayOutput struct{ *pulumi.OutputState }

func (RepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Repository)(nil)).Elem()
}

func (o RepositoryArrayOutput) ToRepositoryArrayOutput() RepositoryArrayOutput {
	return o
}

func (o RepositoryArrayOutput) ToRepositoryArrayOutputWithContext(ctx context.Context) RepositoryArrayOutput {
	return o
}

func (o RepositoryArrayOutput) Index(i pulumi.IntInput) RepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Repository {
		return vs[0].([]*Repository)[vs[1].(int)]
	}).(RepositoryOutput)
}

type RepositoryMapOutput struct{ *pulumi.OutputState }

func (RepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Repository)(nil)).Elem()
}

func (o RepositoryMapOutput) ToRepositoryMapOutput() RepositoryMapOutput {
	return o
}

func (o RepositoryMapOutput) ToRepositoryMapOutputWithContext(ctx context.Context) RepositoryMapOutput {
	return o
}

func (o RepositoryMapOutput) MapIndex(k pulumi.StringInput) RepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Repository {
		return vs[0].(map[string]*Repository)[vs[1].(string)]
	}).(RepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryInput)(nil)).Elem(), &Repository{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryArrayInput)(nil)).Elem(), RepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryMapInput)(nil)).Elem(), RepositoryMap{})
	pulumi.RegisterOutputType(RepositoryOutput{})
	pulumi.RegisterOutputType(RepositoryArrayOutput{})
	pulumi.RegisterOutputType(RepositoryMapOutput{})
}
