// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package argocd

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-argocd/sdk/go/argocd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-argocd/sdk/go/argocd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := argocd.NewAccountToken(ctx, "this", &argocd.AccountTokenArgs{
//				RenewAfter: pulumi.String("168h"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = argocd.NewAccountToken(ctx, "foo", &argocd.AccountTokenArgs{
//				Account:     pulumi.String("foo"),
//				ExpiresIn:   pulumi.String("168h"),
//				RenewBefore: pulumi.String("84h"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type AccountToken struct {
	pulumi.CustomResourceState

	// Account name. Defaults to the current account. I.e. the account configured on the `provider` block.
	Account pulumi.StringPtrOutput `pulumi:"account"`
	// If `expiresIn` is set, Unix timestamp upon which the token will expire.
	ExpiresAt pulumi.StringOutput `pulumi:"expiresAt"`
	// Duration before the token will expire. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. E.g. `12h`, `7d`. Default: No expiration.
	ExpiresIn pulumi.StringPtrOutput `pulumi:"expiresIn"`
	// Unix timestamp at which the token was issued.
	IssuedAt pulumi.StringOutput `pulumi:"issuedAt"`
	// The raw JWT.
	Jwt pulumi.StringOutput `pulumi:"jwt"`
	// Duration to control token silent regeneration based on token age. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. If set, then the token will be regenerated if it is older than `renewAfter`. I.e. if `currentDate - issuedAt > renewAfter`.
	RenewAfter pulumi.StringPtrOutput `pulumi:"renewAfter"`
	// Duration to control token silent regeneration based on remaining token lifetime. If `expires_in` is set, Terraform will
	// regenerate the token if `expires_at - currentDate < renew_before`. Valid time units are `ns`, `us` (or `µs`), `ms`,
	// `s`, `m`, `h`.
	RenewBefore pulumi.StringPtrOutput `pulumi:"renewBefore"`
}

// NewAccountToken registers a new resource with the given unique name, arguments, and options.
func NewAccountToken(ctx *pulumi.Context,
	name string, args *AccountTokenArgs, opts ...pulumi.ResourceOption) (*AccountToken, error) {
	if args == nil {
		args = &AccountTokenArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"jwt",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccountToken
	err := ctx.RegisterResource("argocd:index/accountToken:AccountToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccountToken gets an existing AccountToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountTokenState, opts ...pulumi.ResourceOption) (*AccountToken, error) {
	var resource AccountToken
	err := ctx.ReadResource("argocd:index/accountToken:AccountToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccountToken resources.
type accountTokenState struct {
	// Account name. Defaults to the current account. I.e. the account configured on the `provider` block.
	Account *string `pulumi:"account"`
	// If `expiresIn` is set, Unix timestamp upon which the token will expire.
	ExpiresAt *string `pulumi:"expiresAt"`
	// Duration before the token will expire. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. E.g. `12h`, `7d`. Default: No expiration.
	ExpiresIn *string `pulumi:"expiresIn"`
	// Unix timestamp at which the token was issued.
	IssuedAt *string `pulumi:"issuedAt"`
	// The raw JWT.
	Jwt *string `pulumi:"jwt"`
	// Duration to control token silent regeneration based on token age. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. If set, then the token will be regenerated if it is older than `renewAfter`. I.e. if `currentDate - issuedAt > renewAfter`.
	RenewAfter *string `pulumi:"renewAfter"`
	// Duration to control token silent regeneration based on remaining token lifetime. If `expires_in` is set, Terraform will
	// regenerate the token if `expires_at - currentDate < renew_before`. Valid time units are `ns`, `us` (or `µs`), `ms`,
	// `s`, `m`, `h`.
	RenewBefore *string `pulumi:"renewBefore"`
}

type AccountTokenState struct {
	// Account name. Defaults to the current account. I.e. the account configured on the `provider` block.
	Account pulumi.StringPtrInput
	// If `expiresIn` is set, Unix timestamp upon which the token will expire.
	ExpiresAt pulumi.StringPtrInput
	// Duration before the token will expire. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. E.g. `12h`, `7d`. Default: No expiration.
	ExpiresIn pulumi.StringPtrInput
	// Unix timestamp at which the token was issued.
	IssuedAt pulumi.StringPtrInput
	// The raw JWT.
	Jwt pulumi.StringPtrInput
	// Duration to control token silent regeneration based on token age. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. If set, then the token will be regenerated if it is older than `renewAfter`. I.e. if `currentDate - issuedAt > renewAfter`.
	RenewAfter pulumi.StringPtrInput
	// Duration to control token silent regeneration based on remaining token lifetime. If `expires_in` is set, Terraform will
	// regenerate the token if `expires_at - currentDate < renew_before`. Valid time units are `ns`, `us` (or `µs`), `ms`,
	// `s`, `m`, `h`.
	RenewBefore pulumi.StringPtrInput
}

func (AccountTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountTokenState)(nil)).Elem()
}

type accountTokenArgs struct {
	// Account name. Defaults to the current account. I.e. the account configured on the `provider` block.
	Account *string `pulumi:"account"`
	// Duration before the token will expire. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. E.g. `12h`, `7d`. Default: No expiration.
	ExpiresIn *string `pulumi:"expiresIn"`
	// Duration to control token silent regeneration based on token age. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. If set, then the token will be regenerated if it is older than `renewAfter`. I.e. if `currentDate - issuedAt > renewAfter`.
	RenewAfter *string `pulumi:"renewAfter"`
	// Duration to control token silent regeneration based on remaining token lifetime. If `expires_in` is set, Terraform will
	// regenerate the token if `expires_at - currentDate < renew_before`. Valid time units are `ns`, `us` (or `µs`), `ms`,
	// `s`, `m`, `h`.
	RenewBefore *string `pulumi:"renewBefore"`
}

// The set of arguments for constructing a AccountToken resource.
type AccountTokenArgs struct {
	// Account name. Defaults to the current account. I.e. the account configured on the `provider` block.
	Account pulumi.StringPtrInput
	// Duration before the token will expire. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. E.g. `12h`, `7d`. Default: No expiration.
	ExpiresIn pulumi.StringPtrInput
	// Duration to control token silent regeneration based on token age. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. If set, then the token will be regenerated if it is older than `renewAfter`. I.e. if `currentDate - issuedAt > renewAfter`.
	RenewAfter pulumi.StringPtrInput
	// Duration to control token silent regeneration based on remaining token lifetime. If `expires_in` is set, Terraform will
	// regenerate the token if `expires_at - currentDate < renew_before`. Valid time units are `ns`, `us` (or `µs`), `ms`,
	// `s`, `m`, `h`.
	RenewBefore pulumi.StringPtrInput
}

func (AccountTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountTokenArgs)(nil)).Elem()
}

type AccountTokenInput interface {
	pulumi.Input

	ToAccountTokenOutput() AccountTokenOutput
	ToAccountTokenOutputWithContext(ctx context.Context) AccountTokenOutput
}

func (*AccountToken) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountToken)(nil)).Elem()
}

func (i *AccountToken) ToAccountTokenOutput() AccountTokenOutput {
	return i.ToAccountTokenOutputWithContext(context.Background())
}

func (i *AccountToken) ToAccountTokenOutputWithContext(ctx context.Context) AccountTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountTokenOutput)
}

// AccountTokenArrayInput is an input type that accepts AccountTokenArray and AccountTokenArrayOutput values.
// You can construct a concrete instance of `AccountTokenArrayInput` via:
//
//	AccountTokenArray{ AccountTokenArgs{...} }
type AccountTokenArrayInput interface {
	pulumi.Input

	ToAccountTokenArrayOutput() AccountTokenArrayOutput
	ToAccountTokenArrayOutputWithContext(context.Context) AccountTokenArrayOutput
}

type AccountTokenArray []AccountTokenInput

func (AccountTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountToken)(nil)).Elem()
}

func (i AccountTokenArray) ToAccountTokenArrayOutput() AccountTokenArrayOutput {
	return i.ToAccountTokenArrayOutputWithContext(context.Background())
}

func (i AccountTokenArray) ToAccountTokenArrayOutputWithContext(ctx context.Context) AccountTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountTokenArrayOutput)
}

// AccountTokenMapInput is an input type that accepts AccountTokenMap and AccountTokenMapOutput values.
// You can construct a concrete instance of `AccountTokenMapInput` via:
//
//	AccountTokenMap{ "key": AccountTokenArgs{...} }
type AccountTokenMapInput interface {
	pulumi.Input

	ToAccountTokenMapOutput() AccountTokenMapOutput
	ToAccountTokenMapOutputWithContext(context.Context) AccountTokenMapOutput
}

type AccountTokenMap map[string]AccountTokenInput

func (AccountTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountToken)(nil)).Elem()
}

func (i AccountTokenMap) ToAccountTokenMapOutput() AccountTokenMapOutput {
	return i.ToAccountTokenMapOutputWithContext(context.Background())
}

func (i AccountTokenMap) ToAccountTokenMapOutputWithContext(ctx context.Context) AccountTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountTokenMapOutput)
}

type AccountTokenOutput struct{ *pulumi.OutputState }

func (AccountTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountToken)(nil)).Elem()
}

func (o AccountTokenOutput) ToAccountTokenOutput() AccountTokenOutput {
	return o
}

func (o AccountTokenOutput) ToAccountTokenOutputWithContext(ctx context.Context) AccountTokenOutput {
	return o
}

// Account name. Defaults to the current account. I.e. the account configured on the `provider` block.
func (o AccountTokenOutput) Account() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountToken) pulumi.StringPtrOutput { return v.Account }).(pulumi.StringPtrOutput)
}

// If `expiresIn` is set, Unix timestamp upon which the token will expire.
func (o AccountTokenOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountToken) pulumi.StringOutput { return v.ExpiresAt }).(pulumi.StringOutput)
}

// Duration before the token will expire. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. E.g. `12h`, `7d`. Default: No expiration.
func (o AccountTokenOutput) ExpiresIn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountToken) pulumi.StringPtrOutput { return v.ExpiresIn }).(pulumi.StringPtrOutput)
}

// Unix timestamp at which the token was issued.
func (o AccountTokenOutput) IssuedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountToken) pulumi.StringOutput { return v.IssuedAt }).(pulumi.StringOutput)
}

// The raw JWT.
func (o AccountTokenOutput) Jwt() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountToken) pulumi.StringOutput { return v.Jwt }).(pulumi.StringOutput)
}

// Duration to control token silent regeneration based on token age. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. If set, then the token will be regenerated if it is older than `renewAfter`. I.e. if `currentDate - issuedAt > renewAfter`.
func (o AccountTokenOutput) RenewAfter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountToken) pulumi.StringPtrOutput { return v.RenewAfter }).(pulumi.StringPtrOutput)
}

// Duration to control token silent regeneration based on remaining token lifetime. If `expires_in` is set, Terraform will
// regenerate the token if `expires_at - currentDate < renew_before`. Valid time units are `ns`, `us` (or `µs`), `ms`,
// `s`, `m`, `h`.
func (o AccountTokenOutput) RenewBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountToken) pulumi.StringPtrOutput { return v.RenewBefore }).(pulumi.StringPtrOutput)
}

type AccountTokenArrayOutput struct{ *pulumi.OutputState }

func (AccountTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountToken)(nil)).Elem()
}

func (o AccountTokenArrayOutput) ToAccountTokenArrayOutput() AccountTokenArrayOutput {
	return o
}

func (o AccountTokenArrayOutput) ToAccountTokenArrayOutputWithContext(ctx context.Context) AccountTokenArrayOutput {
	return o
}

func (o AccountTokenArrayOutput) Index(i pulumi.IntInput) AccountTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccountToken {
		return vs[0].([]*AccountToken)[vs[1].(int)]
	}).(AccountTokenOutput)
}

type AccountTokenMapOutput struct{ *pulumi.OutputState }

func (AccountTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountToken)(nil)).Elem()
}

func (o AccountTokenMapOutput) ToAccountTokenMapOutput() AccountTokenMapOutput {
	return o
}

func (o AccountTokenMapOutput) ToAccountTokenMapOutputWithContext(ctx context.Context) AccountTokenMapOutput {
	return o
}

func (o AccountTokenMapOutput) MapIndex(k pulumi.StringInput) AccountTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccountToken {
		return vs[0].(map[string]*AccountToken)[vs[1].(string)]
	}).(AccountTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountTokenInput)(nil)).Elem(), &AccountToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountTokenArrayInput)(nil)).Elem(), AccountTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountTokenMapInput)(nil)).Elem(), AccountTokenMap{})
	pulumi.RegisterOutputType(AccountTokenOutput{})
	pulumi.RegisterOutputType(AccountTokenArrayOutput{})
	pulumi.RegisterOutputType(AccountTokenMapOutput{})
}
