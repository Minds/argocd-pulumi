// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package argocd

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-argocd/sdk/go/argocd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-argocd/sdk/go/argocd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := argocd.NewRepositoryCredentials(ctx, "private", &argocd.RepositoryCredentialsArgs{
//				SshPrivateKey: pulumi.String("-----BEGIN OPENSSH PRIVATE KEY-----\nfoo\nbar\n-----END OPENSSH PRIVATE KEY-----\n"),
//				Url:           pulumi.String("git@private-git-repository.local"),
//				Username:      pulumi.String("git"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Repository credentials can be imported using the repository URL.
//
//	Note: as the ArgoCD API does not return any sensitive information, a
//
//	subsequent `pulumi up` should be executed to make the `password`,
//
//	`ssh_private_key` and `tls_client_cert_key` attributes converge to their
//
//	expected values defined within the plan.
//
//	Example:
//
// ```sh
// $ pulumi import argocd:index/repositoryCredentials:RepositoryCredentials myrepocreds git@private-git-repository.local:somerepo.git
// ```
type RepositoryCredentials struct {
	pulumi.CustomResourceState

	// Whether `helm-oci` support should be enabled for this repo.
	EnableOci pulumi.BoolPtrOutput `pulumi:"enableOci"`
	// GitHub API URL for GitHub app authentication.
	GithubappEnterpriseBaseUrl pulumi.StringPtrOutput `pulumi:"githubappEnterpriseBaseUrl"`
	// Github App ID of the app used to access the repo for GitHub app authentication.
	GithubappId pulumi.StringPtrOutput `pulumi:"githubappId"`
	// ID of the installed GitHub App for GitHub app authentication.
	GithubappInstallationId pulumi.StringPtrOutput `pulumi:"githubappInstallationId"`
	// Private key data (PEM) for authentication via GitHub app.
	GithubappPrivateKey pulumi.StringPtrOutput `pulumi:"githubappPrivateKey"`
	// Password for authenticating at the repo server.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Private key data for authenticating at the repo server using SSH (only Git repos).
	SshPrivateKey pulumi.StringPtrOutput `pulumi:"sshPrivateKey"`
	// TLS client cert data for authenticating at the repo server.
	TlsClientCertData pulumi.StringPtrOutput `pulumi:"tlsClientCertData"`
	// TLS client cert key for authenticating at the repo server.
	TlsClientCertKey pulumi.StringPtrOutput `pulumi:"tlsClientCertKey"`
	// URL that these credentials matches to.
	Url pulumi.StringOutput `pulumi:"url"`
	// Username for authenticating at the repo server.
	Username pulumi.StringPtrOutput `pulumi:"username"`
}

// NewRepositoryCredentials registers a new resource with the given unique name, arguments, and options.
func NewRepositoryCredentials(ctx *pulumi.Context,
	name string, args *RepositoryCredentialsArgs, opts ...pulumi.ResourceOption) (*RepositoryCredentials, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.GithubappPrivateKey != nil {
		args.GithubappPrivateKey = pulumi.ToSecret(args.GithubappPrivateKey).(pulumi.StringPtrInput)
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	if args.SshPrivateKey != nil {
		args.SshPrivateKey = pulumi.ToSecret(args.SshPrivateKey).(pulumi.StringPtrInput)
	}
	if args.TlsClientCertKey != nil {
		args.TlsClientCertKey = pulumi.ToSecret(args.TlsClientCertKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"githubappPrivateKey",
		"password",
		"sshPrivateKey",
		"tlsClientCertKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RepositoryCredentials
	err := ctx.RegisterResource("argocd:index/repositoryCredentials:RepositoryCredentials", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepositoryCredentials gets an existing RepositoryCredentials resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositoryCredentials(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryCredentialsState, opts ...pulumi.ResourceOption) (*RepositoryCredentials, error) {
	var resource RepositoryCredentials
	err := ctx.ReadResource("argocd:index/repositoryCredentials:RepositoryCredentials", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepositoryCredentials resources.
type repositoryCredentialsState struct {
	// Whether `helm-oci` support should be enabled for this repo.
	EnableOci *bool `pulumi:"enableOci"`
	// GitHub API URL for GitHub app authentication.
	GithubappEnterpriseBaseUrl *string `pulumi:"githubappEnterpriseBaseUrl"`
	// Github App ID of the app used to access the repo for GitHub app authentication.
	GithubappId *string `pulumi:"githubappId"`
	// ID of the installed GitHub App for GitHub app authentication.
	GithubappInstallationId *string `pulumi:"githubappInstallationId"`
	// Private key data (PEM) for authentication via GitHub app.
	GithubappPrivateKey *string `pulumi:"githubappPrivateKey"`
	// Password for authenticating at the repo server.
	Password *string `pulumi:"password"`
	// Private key data for authenticating at the repo server using SSH (only Git repos).
	SshPrivateKey *string `pulumi:"sshPrivateKey"`
	// TLS client cert data for authenticating at the repo server.
	TlsClientCertData *string `pulumi:"tlsClientCertData"`
	// TLS client cert key for authenticating at the repo server.
	TlsClientCertKey *string `pulumi:"tlsClientCertKey"`
	// URL that these credentials matches to.
	Url *string `pulumi:"url"`
	// Username for authenticating at the repo server.
	Username *string `pulumi:"username"`
}

type RepositoryCredentialsState struct {
	// Whether `helm-oci` support should be enabled for this repo.
	EnableOci pulumi.BoolPtrInput
	// GitHub API URL for GitHub app authentication.
	GithubappEnterpriseBaseUrl pulumi.StringPtrInput
	// Github App ID of the app used to access the repo for GitHub app authentication.
	GithubappId pulumi.StringPtrInput
	// ID of the installed GitHub App for GitHub app authentication.
	GithubappInstallationId pulumi.StringPtrInput
	// Private key data (PEM) for authentication via GitHub app.
	GithubappPrivateKey pulumi.StringPtrInput
	// Password for authenticating at the repo server.
	Password pulumi.StringPtrInput
	// Private key data for authenticating at the repo server using SSH (only Git repos).
	SshPrivateKey pulumi.StringPtrInput
	// TLS client cert data for authenticating at the repo server.
	TlsClientCertData pulumi.StringPtrInput
	// TLS client cert key for authenticating at the repo server.
	TlsClientCertKey pulumi.StringPtrInput
	// URL that these credentials matches to.
	Url pulumi.StringPtrInput
	// Username for authenticating at the repo server.
	Username pulumi.StringPtrInput
}

func (RepositoryCredentialsState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryCredentialsState)(nil)).Elem()
}

type repositoryCredentialsArgs struct {
	// Whether `helm-oci` support should be enabled for this repo.
	EnableOci *bool `pulumi:"enableOci"`
	// GitHub API URL for GitHub app authentication.
	GithubappEnterpriseBaseUrl *string `pulumi:"githubappEnterpriseBaseUrl"`
	// Github App ID of the app used to access the repo for GitHub app authentication.
	GithubappId *string `pulumi:"githubappId"`
	// ID of the installed GitHub App for GitHub app authentication.
	GithubappInstallationId *string `pulumi:"githubappInstallationId"`
	// Private key data (PEM) for authentication via GitHub app.
	GithubappPrivateKey *string `pulumi:"githubappPrivateKey"`
	// Password for authenticating at the repo server.
	Password *string `pulumi:"password"`
	// Private key data for authenticating at the repo server using SSH (only Git repos).
	SshPrivateKey *string `pulumi:"sshPrivateKey"`
	// TLS client cert data for authenticating at the repo server.
	TlsClientCertData *string `pulumi:"tlsClientCertData"`
	// TLS client cert key for authenticating at the repo server.
	TlsClientCertKey *string `pulumi:"tlsClientCertKey"`
	// URL that these credentials matches to.
	Url string `pulumi:"url"`
	// Username for authenticating at the repo server.
	Username *string `pulumi:"username"`
}

// The set of arguments for constructing a RepositoryCredentials resource.
type RepositoryCredentialsArgs struct {
	// Whether `helm-oci` support should be enabled for this repo.
	EnableOci pulumi.BoolPtrInput
	// GitHub API URL for GitHub app authentication.
	GithubappEnterpriseBaseUrl pulumi.StringPtrInput
	// Github App ID of the app used to access the repo for GitHub app authentication.
	GithubappId pulumi.StringPtrInput
	// ID of the installed GitHub App for GitHub app authentication.
	GithubappInstallationId pulumi.StringPtrInput
	// Private key data (PEM) for authentication via GitHub app.
	GithubappPrivateKey pulumi.StringPtrInput
	// Password for authenticating at the repo server.
	Password pulumi.StringPtrInput
	// Private key data for authenticating at the repo server using SSH (only Git repos).
	SshPrivateKey pulumi.StringPtrInput
	// TLS client cert data for authenticating at the repo server.
	TlsClientCertData pulumi.StringPtrInput
	// TLS client cert key for authenticating at the repo server.
	TlsClientCertKey pulumi.StringPtrInput
	// URL that these credentials matches to.
	Url pulumi.StringInput
	// Username for authenticating at the repo server.
	Username pulumi.StringPtrInput
}

func (RepositoryCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryCredentialsArgs)(nil)).Elem()
}

type RepositoryCredentialsInput interface {
	pulumi.Input

	ToRepositoryCredentialsOutput() RepositoryCredentialsOutput
	ToRepositoryCredentialsOutputWithContext(ctx context.Context) RepositoryCredentialsOutput
}

func (*RepositoryCredentials) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryCredentials)(nil)).Elem()
}

func (i *RepositoryCredentials) ToRepositoryCredentialsOutput() RepositoryCredentialsOutput {
	return i.ToRepositoryCredentialsOutputWithContext(context.Background())
}

func (i *RepositoryCredentials) ToRepositoryCredentialsOutputWithContext(ctx context.Context) RepositoryCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCredentialsOutput)
}

// RepositoryCredentialsArrayInput is an input type that accepts RepositoryCredentialsArray and RepositoryCredentialsArrayOutput values.
// You can construct a concrete instance of `RepositoryCredentialsArrayInput` via:
//
//	RepositoryCredentialsArray{ RepositoryCredentialsArgs{...} }
type RepositoryCredentialsArrayInput interface {
	pulumi.Input

	ToRepositoryCredentialsArrayOutput() RepositoryCredentialsArrayOutput
	ToRepositoryCredentialsArrayOutputWithContext(context.Context) RepositoryCredentialsArrayOutput
}

type RepositoryCredentialsArray []RepositoryCredentialsInput

func (RepositoryCredentialsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryCredentials)(nil)).Elem()
}

func (i RepositoryCredentialsArray) ToRepositoryCredentialsArrayOutput() RepositoryCredentialsArrayOutput {
	return i.ToRepositoryCredentialsArrayOutputWithContext(context.Background())
}

func (i RepositoryCredentialsArray) ToRepositoryCredentialsArrayOutputWithContext(ctx context.Context) RepositoryCredentialsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCredentialsArrayOutput)
}

// RepositoryCredentialsMapInput is an input type that accepts RepositoryCredentialsMap and RepositoryCredentialsMapOutput values.
// You can construct a concrete instance of `RepositoryCredentialsMapInput` via:
//
//	RepositoryCredentialsMap{ "key": RepositoryCredentialsArgs{...} }
type RepositoryCredentialsMapInput interface {
	pulumi.Input

	ToRepositoryCredentialsMapOutput() RepositoryCredentialsMapOutput
	ToRepositoryCredentialsMapOutputWithContext(context.Context) RepositoryCredentialsMapOutput
}

type RepositoryCredentialsMap map[string]RepositoryCredentialsInput

func (RepositoryCredentialsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryCredentials)(nil)).Elem()
}

func (i RepositoryCredentialsMap) ToRepositoryCredentialsMapOutput() RepositoryCredentialsMapOutput {
	return i.ToRepositoryCredentialsMapOutputWithContext(context.Background())
}

func (i RepositoryCredentialsMap) ToRepositoryCredentialsMapOutputWithContext(ctx context.Context) RepositoryCredentialsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCredentialsMapOutput)
}

type RepositoryCredentialsOutput struct{ *pulumi.OutputState }

func (RepositoryCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryCredentials)(nil)).Elem()
}

func (o RepositoryCredentialsOutput) ToRepositoryCredentialsOutput() RepositoryCredentialsOutput {
	return o
}

func (o RepositoryCredentialsOutput) ToRepositoryCredentialsOutputWithContext(ctx context.Context) RepositoryCredentialsOutput {
	return o
}

// Whether `helm-oci` support should be enabled for this repo.
func (o RepositoryCredentialsOutput) EnableOci() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryCredentials) pulumi.BoolPtrOutput { return v.EnableOci }).(pulumi.BoolPtrOutput)
}

// GitHub API URL for GitHub app authentication.
func (o RepositoryCredentialsOutput) GithubappEnterpriseBaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCredentials) pulumi.StringPtrOutput { return v.GithubappEnterpriseBaseUrl }).(pulumi.StringPtrOutput)
}

// Github App ID of the app used to access the repo for GitHub app authentication.
func (o RepositoryCredentialsOutput) GithubappId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCredentials) pulumi.StringPtrOutput { return v.GithubappId }).(pulumi.StringPtrOutput)
}

// ID of the installed GitHub App for GitHub app authentication.
func (o RepositoryCredentialsOutput) GithubappInstallationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCredentials) pulumi.StringPtrOutput { return v.GithubappInstallationId }).(pulumi.StringPtrOutput)
}

// Private key data (PEM) for authentication via GitHub app.
func (o RepositoryCredentialsOutput) GithubappPrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCredentials) pulumi.StringPtrOutput { return v.GithubappPrivateKey }).(pulumi.StringPtrOutput)
}

// Password for authenticating at the repo server.
func (o RepositoryCredentialsOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCredentials) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Private key data for authenticating at the repo server using SSH (only Git repos).
func (o RepositoryCredentialsOutput) SshPrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCredentials) pulumi.StringPtrOutput { return v.SshPrivateKey }).(pulumi.StringPtrOutput)
}

// TLS client cert data for authenticating at the repo server.
func (o RepositoryCredentialsOutput) TlsClientCertData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCredentials) pulumi.StringPtrOutput { return v.TlsClientCertData }).(pulumi.StringPtrOutput)
}

// TLS client cert key for authenticating at the repo server.
func (o RepositoryCredentialsOutput) TlsClientCertKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCredentials) pulumi.StringPtrOutput { return v.TlsClientCertKey }).(pulumi.StringPtrOutput)
}

// URL that these credentials matches to.
func (o RepositoryCredentialsOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryCredentials) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// Username for authenticating at the repo server.
func (o RepositoryCredentialsOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCredentials) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

type RepositoryCredentialsArrayOutput struct{ *pulumi.OutputState }

func (RepositoryCredentialsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryCredentials)(nil)).Elem()
}

func (o RepositoryCredentialsArrayOutput) ToRepositoryCredentialsArrayOutput() RepositoryCredentialsArrayOutput {
	return o
}

func (o RepositoryCredentialsArrayOutput) ToRepositoryCredentialsArrayOutputWithContext(ctx context.Context) RepositoryCredentialsArrayOutput {
	return o
}

func (o RepositoryCredentialsArrayOutput) Index(i pulumi.IntInput) RepositoryCredentialsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RepositoryCredentials {
		return vs[0].([]*RepositoryCredentials)[vs[1].(int)]
	}).(RepositoryCredentialsOutput)
}

type RepositoryCredentialsMapOutput struct{ *pulumi.OutputState }

func (RepositoryCredentialsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryCredentials)(nil)).Elem()
}

func (o RepositoryCredentialsMapOutput) ToRepositoryCredentialsMapOutput() RepositoryCredentialsMapOutput {
	return o
}

func (o RepositoryCredentialsMapOutput) ToRepositoryCredentialsMapOutputWithContext(ctx context.Context) RepositoryCredentialsMapOutput {
	return o
}

func (o RepositoryCredentialsMapOutput) MapIndex(k pulumi.StringInput) RepositoryCredentialsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RepositoryCredentials {
		return vs[0].(map[string]*RepositoryCredentials)[vs[1].(string)]
	}).(RepositoryCredentialsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCredentialsInput)(nil)).Elem(), &RepositoryCredentials{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCredentialsArrayInput)(nil)).Elem(), RepositoryCredentialsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCredentialsMapInput)(nil)).Elem(), RepositoryCredentialsMap{})
	pulumi.RegisterOutputType(RepositoryCredentialsOutput{})
	pulumi.RegisterOutputType(RepositoryCredentialsArrayOutput{})
	pulumi.RegisterOutputType(RepositoryCredentialsMapOutput{})
}
