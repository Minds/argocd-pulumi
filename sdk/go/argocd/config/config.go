// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"github.com/pulumi/pulumi-argocd/sdk/go/argocd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
)

var _ = internal.GetEnvOrDefault

// ArgoCD authentication token, takes precedence over `username`/`password`. Can be set through the `ARGOCD_AUTH_TOKEN`
// environment variable.
func GetAuthToken(ctx *pulumi.Context) string {
	return config.Get(ctx, "argocd:authToken")
}

// Additional root CA certificates file to add to the client TLS connection pool.
func GetCertFile(ctx *pulumi.Context) string {
	return config.Get(ctx, "argocd:certFile")
}

// Client certificate.
func GetClientCertFile(ctx *pulumi.Context) string {
	return config.Get(ctx, "argocd:clientCertFile")
}

// Client certificate key.
func GetClientCertKey(ctx *pulumi.Context) string {
	return config.Get(ctx, "argocd:clientCertKey")
}

// Override the default config path of `$HOME/.config/argocd/config`. Only relevant when `useLocalConfig`. Can be set
// through the `ARGOCD_CONFIG_PATH` environment variable.
func GetConfigPath(ctx *pulumi.Context) string {
	return config.Get(ctx, "argocd:configPath")
}

// Context to choose when using a local ArgoCD config file. Only relevant when `useLocalConfig`. Can be set through
// `ARGOCD_CONTEXT` environment variable.
func GetContext(ctx *pulumi.Context) string {
	return config.Get(ctx, "argocd:context")
}

// Configure direct access using Kubernetes API server. **Warning**: this feature works by starting a local ArgoCD API
// server that talks directly to the Kubernetes API using the **current context in the default kubeconfig**
// (`~/.kube/config`). This behavior cannot be overridden using either environment variables or the `kubernetes` block in
// the provider configuration at present). If the server fails to start (e.g. your kubeconfig is misconfigured) then the
// provider will fail as a result of the `argocd` module forcing it to exit and no logs will be available to help you debug
// this. The error message will be similar to > `The plugin encountered an error, and failed to respond to the
// plugin.(*GRPCProvider).ReadResource call. The plugin logs may contain more details.` To debug this, you will need to
// login via the ArgoCD CLI using `argocd login --core` and then running an operation. E.g. `argocd app list`.
func GetCore(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "argocd:core")
}

// Whether to use gRPC web proxy client. Useful if Argo CD server is behind proxy which does not support HTTP2.
func GetGrpcWeb(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "argocd:grpcWeb")
}

// Use the gRPC web proxy client and set the web root, e.g. `argo-cd`. Useful if the Argo CD server is behind a proxy at a
// non-root path.
func GetGrpcWebRootPath(ctx *pulumi.Context) string {
	return config.Get(ctx, "argocd:grpcWebRootPath")
}

// Additional headers to add to each request to the ArgoCD server.
func GetHeaders(ctx *pulumi.Context) string {
	return config.Get(ctx, "argocd:headers")
}

// Whether to skip TLS server certificate. Can be set through the `ARGOCD_INSECURE` environment variable.
func GetInsecure(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "argocd:insecure")
}

// Kubernetes configuration overrides. Only relevant when `portForward = true` or `portForwardWithNamespace = "foo"`. The
// kubeconfig file that is used can be overridden using the [`KUBECONFIG` environment
// variable](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#the-kubeconfig-environment-variable)).
func GetKubernetes(ctx *pulumi.Context) string {
	return config.Get(ctx, "argocd:kubernetes")
}

// Authentication password. Can be set through the `ARGOCD_AUTH_PASSWORD` environment variable.
func GetPassword(ctx *pulumi.Context) string {
	return config.Get(ctx, "argocd:password")
}

// Whether to initiate an unencrypted connection to ArgoCD server.
func GetPlainText(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "argocd:plainText")
}

// Connect to a random argocd-server port using port forwarding.
func GetPortForward(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "argocd:portForward")
}

// Namespace name which should be used for port forwarding.
func GetPortForwardWithNamespace(ctx *pulumi.Context) string {
	return config.Get(ctx, "argocd:portForwardWithNamespace")
}

// ArgoCD server address with port. Can be set through the `ARGOCD_SERVER` environment variable.
func GetServerAddr(ctx *pulumi.Context) string {
	return config.Get(ctx, "argocd:serverAddr")
}

// Use the authentication settings found in the local config file. Useful when you have previously logged in using SSO.
// Conflicts with `authToken`, `username` and `password`.
func GetUseLocalConfig(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "argocd:useLocalConfig")
}

// User-Agent request header override.
func GetUserAgent(ctx *pulumi.Context) string {
	return config.Get(ctx, "argocd:userAgent")
}

// Authentication username. Can be set through the `ARGOCD_AUTH_USERNAME` environment variable.
func GetUsername(ctx *pulumi.Context) string {
	return config.Get(ctx, "argocd:username")
}
