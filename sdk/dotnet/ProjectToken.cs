// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Argocd
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Argocd = Pulumi.Argocd;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var secret = new Argocd.ProjectToken("secret", new()
    ///     {
    ///         Description = "short lived token",
    ///         ExpiresIn = "1h",
    ///         Project = "someproject",
    ///         RenewBefore = "30m",
    ///         Role = "foobar",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [ArgocdResourceType("argocd:index/projectToken:ProjectToken")]
    public partial class ProjectToken : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Description of the token.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// If `expires_in` is set, Unix timestamp upon which the token will expire.
        /// </summary>
        [Output("expiresAt")]
        public Output<string> ExpiresAt { get; private set; } = null!;

        /// <summary>
        /// Duration before the token will expire. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. E.g. `12h`, `7d`. Default: No expiration.
        /// </summary>
        [Output("expiresIn")]
        public Output<string?> ExpiresIn { get; private set; } = null!;

        /// <summary>
        /// Unix timestamp at which the token was issued.
        /// </summary>
        [Output("issuedAt")]
        public Output<string> IssuedAt { get; private set; } = null!;

        /// <summary>
        /// The raw JWT.
        /// </summary>
        [Output("jwt")]
        public Output<string> Jwt { get; private set; } = null!;

        /// <summary>
        /// The project associated with the token.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Duration to control token silent regeneration based on token age. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. If set, then the token will be regenerated if it is older than `renew_after`. I.e. if `currentDate - issued_at &gt; renew_after`.
        /// </summary>
        [Output("renewAfter")]
        public Output<string?> RenewAfter { get; private set; } = null!;

        /// <summary>
        /// Duration to control token silent regeneration based on remaining token lifetime. If `expires_in` is set, Terraform will
        /// regenerate the token if `expires_at - currentDate &lt; renew_before`. Valid time units are `ns`, `us` (or `µs`), `ms`,
        /// `s`, `m`, `h`.
        /// </summary>
        [Output("renewBefore")]
        public Output<string?> RenewBefore { get; private set; } = null!;

        /// <summary>
        /// The name of the role in the project associated with the token.
        /// </summary>
        [Output("role")]
        public Output<string> Role { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectToken resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectToken(string name, ProjectTokenArgs args, CustomResourceOptions? options = null)
            : base("argocd:index/projectToken:ProjectToken", name, args ?? new ProjectTokenArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectToken(string name, Input<string> id, ProjectTokenState? state = null, CustomResourceOptions? options = null)
            : base("argocd:index/projectToken:ProjectToken", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "jwt",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectToken resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectToken Get(string name, Input<string> id, ProjectTokenState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectToken(name, id, state, options);
        }
    }

    public sealed class ProjectTokenArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the token.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Duration before the token will expire. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. E.g. `12h`, `7d`. Default: No expiration.
        /// </summary>
        [Input("expiresIn")]
        public Input<string>? ExpiresIn { get; set; }

        /// <summary>
        /// The project associated with the token.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// Duration to control token silent regeneration based on token age. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. If set, then the token will be regenerated if it is older than `renew_after`. I.e. if `currentDate - issued_at &gt; renew_after`.
        /// </summary>
        [Input("renewAfter")]
        public Input<string>? RenewAfter { get; set; }

        /// <summary>
        /// Duration to control token silent regeneration based on remaining token lifetime. If `expires_in` is set, Terraform will
        /// regenerate the token if `expires_at - currentDate &lt; renew_before`. Valid time units are `ns`, `us` (or `µs`), `ms`,
        /// `s`, `m`, `h`.
        /// </summary>
        [Input("renewBefore")]
        public Input<string>? RenewBefore { get; set; }

        /// <summary>
        /// The name of the role in the project associated with the token.
        /// </summary>
        [Input("role", required: true)]
        public Input<string> Role { get; set; } = null!;

        public ProjectTokenArgs()
        {
        }
        public static new ProjectTokenArgs Empty => new ProjectTokenArgs();
    }

    public sealed class ProjectTokenState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the token.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// If `expires_in` is set, Unix timestamp upon which the token will expire.
        /// </summary>
        [Input("expiresAt")]
        public Input<string>? ExpiresAt { get; set; }

        /// <summary>
        /// Duration before the token will expire. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. E.g. `12h`, `7d`. Default: No expiration.
        /// </summary>
        [Input("expiresIn")]
        public Input<string>? ExpiresIn { get; set; }

        /// <summary>
        /// Unix timestamp at which the token was issued.
        /// </summary>
        [Input("issuedAt")]
        public Input<string>? IssuedAt { get; set; }

        [Input("jwt")]
        private Input<string>? _jwt;

        /// <summary>
        /// The raw JWT.
        /// </summary>
        public Input<string>? Jwt
        {
            get => _jwt;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _jwt = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The project associated with the token.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Duration to control token silent regeneration based on token age. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. If set, then the token will be regenerated if it is older than `renew_after`. I.e. if `currentDate - issued_at &gt; renew_after`.
        /// </summary>
        [Input("renewAfter")]
        public Input<string>? RenewAfter { get; set; }

        /// <summary>
        /// Duration to control token silent regeneration based on remaining token lifetime. If `expires_in` is set, Terraform will
        /// regenerate the token if `expires_at - currentDate &lt; renew_before`. Valid time units are `ns`, `us` (or `µs`), `ms`,
        /// `s`, `m`, `h`.
        /// </summary>
        [Input("renewBefore")]
        public Input<string>? RenewBefore { get; set; }

        /// <summary>
        /// The name of the role in the project associated with the token.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        public ProjectTokenState()
        {
        }
        public static new ProjectTokenState Empty => new ProjectTokenState();
    }
}
