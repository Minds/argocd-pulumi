// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Argocd
{
    /// <summary>
    /// Manages [applications](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#applications) within ArgoCD.
    /// 
    /// ## Import
    /// 
    /// ArgoCD applications can be imported using an id consisting of `{name}:{namespace}`. E.g.
    /// 
    /// ```sh
    /// $ pulumi import argocd:index/application:Application myapp myapp:argocd
    /// ```
    /// </summary>
    [ArgocdResourceType("argocd:index/application:Application")]
    public partial class Application : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to applying cascading deletion when application is removed.
        /// </summary>
        [Output("cascade")]
        public Output<bool?> Cascade { get; private set; } = null!;

        /// <summary>
        /// Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
        /// </summary>
        [Output("metadata")]
        public Output<Outputs.ApplicationMetadata> Metadata { get; private set; } = null!;

        /// <summary>
        /// The application specification.
        /// </summary>
        [Output("spec")]
        public Output<Outputs.ApplicationSpec> Spec { get; private set; } = null!;

        /// <summary>
        /// Status information for the application. **Note**: this is not guaranteed to be up to date immediately after
        /// creating/updating an application unless `wait=true`.
        /// </summary>
        [Output("statuses")]
        public Output<ImmutableArray<Outputs.ApplicationStatus>> Statuses { get; private set; } = null!;

        /// <summary>
        /// Upon application creation or update, wait for application health/sync status to be healthy/Synced, upon application
        /// deletion, wait for application to be removed, when set to true. Wait timeouts are controlled by Terraform Create, Update
        /// and Delete resource timeouts (all default to 5 minutes). **Note**: if ArgoCD decides not to sync an application (e.g.
        /// because the project to which the application belongs has a `sync_window` applied) then you will experience an expected
        /// timeout event if `wait = true`.
        /// </summary>
        [Output("wait")]
        public Output<bool?> Wait { get; private set; } = null!;


        /// <summary>
        /// Create a Application resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Application(string name, ApplicationArgs args, CustomResourceOptions? options = null)
            : base("argocd:index/application:Application", name, args ?? new ApplicationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Application(string name, Input<string> id, ApplicationState? state = null, CustomResourceOptions? options = null)
            : base("argocd:index/application:Application", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Application resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Application Get(string name, Input<string> id, ApplicationState? state = null, CustomResourceOptions? options = null)
        {
            return new Application(name, id, state, options);
        }
    }

    public sealed class ApplicationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to applying cascading deletion when application is removed.
        /// </summary>
        [Input("cascade")]
        public Input<bool>? Cascade { get; set; }

        /// <summary>
        /// Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
        /// </summary>
        [Input("metadata", required: true)]
        public Input<Inputs.ApplicationMetadataArgs> Metadata { get; set; } = null!;

        /// <summary>
        /// The application specification.
        /// </summary>
        [Input("spec", required: true)]
        public Input<Inputs.ApplicationSpecArgs> Spec { get; set; } = null!;

        /// <summary>
        /// Upon application creation or update, wait for application health/sync status to be healthy/Synced, upon application
        /// deletion, wait for application to be removed, when set to true. Wait timeouts are controlled by Terraform Create, Update
        /// and Delete resource timeouts (all default to 5 minutes). **Note**: if ArgoCD decides not to sync an application (e.g.
        /// because the project to which the application belongs has a `sync_window` applied) then you will experience an expected
        /// timeout event if `wait = true`.
        /// </summary>
        [Input("wait")]
        public Input<bool>? Wait { get; set; }

        public ApplicationArgs()
        {
        }
        public static new ApplicationArgs Empty => new ApplicationArgs();
    }

    public sealed class ApplicationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to applying cascading deletion when application is removed.
        /// </summary>
        [Input("cascade")]
        public Input<bool>? Cascade { get; set; }

        /// <summary>
        /// Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
        /// </summary>
        [Input("metadata")]
        public Input<Inputs.ApplicationMetadataGetArgs>? Metadata { get; set; }

        /// <summary>
        /// The application specification.
        /// </summary>
        [Input("spec")]
        public Input<Inputs.ApplicationSpecGetArgs>? Spec { get; set; }

        [Input("statuses")]
        private InputList<Inputs.ApplicationStatusGetArgs>? _statuses;

        /// <summary>
        /// Status information for the application. **Note**: this is not guaranteed to be up to date immediately after
        /// creating/updating an application unless `wait=true`.
        /// </summary>
        public InputList<Inputs.ApplicationStatusGetArgs> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<Inputs.ApplicationStatusGetArgs>());
            set => _statuses = value;
        }

        /// <summary>
        /// Upon application creation or update, wait for application health/sync status to be healthy/Synced, upon application
        /// deletion, wait for application to be removed, when set to true. Wait timeouts are controlled by Terraform Create, Update
        /// and Delete resource timeouts (all default to 5 minutes). **Note**: if ArgoCD decides not to sync an application (e.g.
        /// because the project to which the application belongs has a `sync_window` applied) then you will experience an expected
        /// timeout event if `wait = true`.
        /// </summary>
        [Input("wait")]
        public Input<bool>? Wait { get; set; }

        public ApplicationState()
        {
        }
        public static new ApplicationState Empty => new ApplicationState();
    }
}
