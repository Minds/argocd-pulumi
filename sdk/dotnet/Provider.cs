// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Argocd
{
    /// <summary>
    /// The provider type for the argocd package. By default, resources use package-wide configuration
    /// settings, however an explicit `Provider` instance may be created and passed during resource
    /// construction to achieve fine-grained programmatic control over provider settings. See the
    /// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
    /// </summary>
    [ArgocdResourceType("pulumi:providers:argocd")]
    public partial class Provider : global::Pulumi.ProviderResource
    {
        /// <summary>
        /// ArgoCD authentication token, takes precedence over `username`/`password`. Can be set through the `ARGOCD_AUTH_TOKEN`
        /// environment variable.
        /// </summary>
        [Output("authToken")]
        public Output<string?> AuthToken { get; private set; } = null!;

        /// <summary>
        /// Additional root CA certificates file to add to the client TLS connection pool.
        /// </summary>
        [Output("certFile")]
        public Output<string?> CertFile { get; private set; } = null!;

        /// <summary>
        /// Client certificate.
        /// </summary>
        [Output("clientCertFile")]
        public Output<string?> ClientCertFile { get; private set; } = null!;

        /// <summary>
        /// Client certificate key.
        /// </summary>
        [Output("clientCertKey")]
        public Output<string?> ClientCertKey { get; private set; } = null!;

        /// <summary>
        /// Override the default config path of `$HOME/.config/argocd/config`. Only relevant when `use_local_config`. Can be set
        /// through the `ARGOCD_CONFIG_PATH` environment variable.
        /// </summary>
        [Output("configPath")]
        public Output<string?> ConfigPath { get; private set; } = null!;

        /// <summary>
        /// Context to choose when using a local ArgoCD config file. Only relevant when `use_local_config`. Can be set through
        /// `ARGOCD_CONTEXT` environment variable.
        /// </summary>
        [Output("context")]
        public Output<string?> Context { get; private set; } = null!;

        /// <summary>
        /// Use the gRPC web proxy client and set the web root, e.g. `argo-cd`. Useful if the Argo CD server is behind a proxy at a
        /// non-root path.
        /// </summary>
        [Output("grpcWebRootPath")]
        public Output<string?> GrpcWebRootPath { get; private set; } = null!;

        /// <summary>
        /// Authentication password. Can be set through the `ARGOCD_AUTH_PASSWORD` environment variable.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// Namespace name which should be used for port forwarding.
        /// </summary>
        [Output("portForwardWithNamespace")]
        public Output<string?> PortForwardWithNamespace { get; private set; } = null!;

        /// <summary>
        /// ArgoCD server address with port. Can be set through the `ARGOCD_SERVER` environment variable.
        /// </summary>
        [Output("serverAddr")]
        public Output<string?> ServerAddr { get; private set; } = null!;

        /// <summary>
        /// User-Agent request header override.
        /// </summary>
        [Output("userAgent")]
        public Output<string?> UserAgent { get; private set; } = null!;

        /// <summary>
        /// Authentication username. Can be set through the `ARGOCD_AUTH_USERNAME` environment variable.
        /// </summary>
        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;


        /// <summary>
        /// Create a Provider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Provider(string name, ProviderArgs? args = null, CustomResourceOptions? options = null)
            : base("argocd", name, args ?? new ProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "authToken",
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class ProviderArgs : global::Pulumi.ResourceArgs
    {
        [Input("authToken")]
        private Input<string>? _authToken;

        /// <summary>
        /// ArgoCD authentication token, takes precedence over `username`/`password`. Can be set through the `ARGOCD_AUTH_TOKEN`
        /// environment variable.
        /// </summary>
        public Input<string>? AuthToken
        {
            get => _authToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _authToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Additional root CA certificates file to add to the client TLS connection pool.
        /// </summary>
        [Input("certFile")]
        public Input<string>? CertFile { get; set; }

        /// <summary>
        /// Client certificate.
        /// </summary>
        [Input("clientCertFile")]
        public Input<string>? ClientCertFile { get; set; }

        /// <summary>
        /// Client certificate key.
        /// </summary>
        [Input("clientCertKey")]
        public Input<string>? ClientCertKey { get; set; }

        /// <summary>
        /// Override the default config path of `$HOME/.config/argocd/config`. Only relevant when `use_local_config`. Can be set
        /// through the `ARGOCD_CONFIG_PATH` environment variable.
        /// </summary>
        [Input("configPath")]
        public Input<string>? ConfigPath { get; set; }

        /// <summary>
        /// Context to choose when using a local ArgoCD config file. Only relevant when `use_local_config`. Can be set through
        /// `ARGOCD_CONTEXT` environment variable.
        /// </summary>
        [Input("context")]
        public Input<string>? Context { get; set; }

        /// <summary>
        /// Configure direct access using Kubernetes API server. **Warning**: this feature works by starting a local ArgoCD API
        /// server that talks directly to the Kubernetes API using the **current context in the default kubeconfig**
        /// (`~/.kube/config`). This behavior cannot be overridden using either environment variables or the `kubernetes` block in
        /// the provider configuration at present). If the server fails to start (e.g. your kubeconfig is misconfigured) then the
        /// provider will fail as a result of the `argocd` module forcing it to exit and no logs will be available to help you debug
        /// this. The error message will be similar to &gt; `The plugin encountered an error, and failed to respond to the
        /// plugin.(*GRPCProvider).ReadResource call. The plugin logs may contain more details.` To debug this, you will need to
        /// login via the ArgoCD CLI using `argocd login --core` and then running an operation. E.g. `argocd app list`.
        /// </summary>
        [Input("core", json: true)]
        public Input<bool>? Core { get; set; }

        /// <summary>
        /// Whether to use gRPC web proxy client. Useful if Argo CD server is behind proxy which does not support HTTP2.
        /// </summary>
        [Input("grpcWeb", json: true)]
        public Input<bool>? GrpcWeb { get; set; }

        /// <summary>
        /// Use the gRPC web proxy client and set the web root, e.g. `argo-cd`. Useful if the Argo CD server is behind a proxy at a
        /// non-root path.
        /// </summary>
        [Input("grpcWebRootPath")]
        public Input<string>? GrpcWebRootPath { get; set; }

        [Input("headers", json: true)]
        private InputList<string>? _headers;

        /// <summary>
        /// Additional headers to add to each request to the ArgoCD server.
        /// </summary>
        public InputList<string> Headers
        {
            get => _headers ?? (_headers = new InputList<string>());
            set => _headers = value;
        }

        /// <summary>
        /// Whether to skip TLS server certificate. Can be set through the `ARGOCD_INSECURE` environment variable.
        /// </summary>
        [Input("insecure", json: true)]
        public Input<bool>? Insecure { get; set; }

        /// <summary>
        /// Kubernetes configuration overrides. Only relevant when `port_forward = true` or `port_forward_with_namespace = "foo"`.
        /// The kubeconfig file that is used can be overridden using the [`KUBECONFIG` environment
        /// variable](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#the-kubeconfig-environment-variable)).
        /// </summary>
        [Input("kubernetes", json: true)]
        public Input<Inputs.ProviderKubernetesArgs>? Kubernetes { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Authentication password. Can be set through the `ARGOCD_AUTH_PASSWORD` environment variable.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Whether to initiate an unencrypted connection to ArgoCD server.
        /// </summary>
        [Input("plainText", json: true)]
        public Input<bool>? PlainText { get; set; }

        /// <summary>
        /// Connect to a random argocd-server port using port forwarding.
        /// </summary>
        [Input("portForward", json: true)]
        public Input<bool>? PortForward { get; set; }

        /// <summary>
        /// Namespace name which should be used for port forwarding.
        /// </summary>
        [Input("portForwardWithNamespace")]
        public Input<string>? PortForwardWithNamespace { get; set; }

        /// <summary>
        /// ArgoCD server address with port. Can be set through the `ARGOCD_SERVER` environment variable.
        /// </summary>
        [Input("serverAddr")]
        public Input<string>? ServerAddr { get; set; }

        /// <summary>
        /// Use the authentication settings found in the local config file. Useful when you have previously logged in using SSO.
        /// Conflicts with `auth_token`, `username` and `password`.
        /// </summary>
        [Input("useLocalConfig", json: true)]
        public Input<bool>? UseLocalConfig { get; set; }

        /// <summary>
        /// User-Agent request header override.
        /// </summary>
        [Input("userAgent")]
        public Input<string>? UserAgent { get; set; }

        /// <summary>
        /// Authentication username. Can be set through the `ARGOCD_AUTH_USERNAME` environment variable.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public ProviderArgs()
        {
        }
        public static new ProviderArgs Empty => new ProviderArgs();
    }
}
