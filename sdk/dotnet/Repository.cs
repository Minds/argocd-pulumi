// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Argocd
{
    /// <summary>
    /// Manages [repositories](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#repositories) within ArgoCD.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Argocd = Pulumi.Argocd;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Public Helm repository
    ///     var publicNginxHelm = new Argocd.Repository("publicNginxHelm", new()
    ///     {
    ///         Repo = "https://helm.nginx.com/stable",
    ///         Type = "helm",
    ///     });
    /// 
    ///     // Public Git repository
    ///     var publicGit = new Argocd.Repository("publicGit", new()
    ///     {
    ///         Repo = "git@github.com:user/somerepo.git",
    ///     });
    /// 
    ///     // Private Git repository
    ///     var @private = new Argocd.Repository("private", new()
    ///     {
    ///         Insecure = true,
    ///         Repo = "git@private-git-repository.local:somerepo.git",
    ///         SshPrivateKey = @"-----BEGIN OPENSSH PRIVATE KEY-----
    /// foo
    /// bar
    /// -----END OPENSSH PRIVATE KEY-----
    /// ",
    ///         Username = "git",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Repositories can be imported using the repository URL.
    /// 
    ///  Note: as the ArgoCD API does not return any sensitive information, a
    /// 
    ///  subsequent `pulumi up` should be executed to make the `password`,
    /// 
    ///  `ssh_private_key` and `tls_client_cert_key` attributes converge to their
    /// 
    ///  expected values defined within the plan.
    /// 
    ///  Example:
    /// 
    /// ```sh
    /// $ pulumi import argocd:index/repository:Repository myrepo git@private-git-repository.local:somerepo.git
    /// ```
    /// </summary>
    [ArgocdResourceType("argocd:index/repository:Repository")]
    public partial class Repository : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Contains information about the current state of connection to the repository server.
        /// </summary>
        [Output("connectionStateStatus")]
        public Output<string> ConnectionStateStatus { get; private set; } = null!;

        /// <summary>
        /// Whether `git-lfs` support should be enabled for this repository.
        /// </summary>
        [Output("enableLfs")]
        public Output<bool?> EnableLfs { get; private set; } = null!;

        /// <summary>
        /// Whether `helm-oci` support should be enabled for this repository.
        /// </summary>
        [Output("enableOci")]
        public Output<bool?> EnableOci { get; private set; } = null!;

        /// <summary>
        /// GitHub API URL for GitHub app authentication.
        /// </summary>
        [Output("githubappEnterpriseBaseUrl")]
        public Output<string?> GithubappEnterpriseBaseUrl { get; private set; } = null!;

        /// <summary>
        /// ID of the GitHub app used to access the repo.
        /// </summary>
        [Output("githubappId")]
        public Output<string?> GithubappId { get; private set; } = null!;

        /// <summary>
        /// The installation ID of the GitHub App used to access the repo.
        /// </summary>
        [Output("githubappInstallationId")]
        public Output<string?> GithubappInstallationId { get; private set; } = null!;

        /// <summary>
        /// Private key data (PEM) for authentication via GitHub app.
        /// </summary>
        [Output("githubappPrivateKey")]
        public Output<string?> GithubappPrivateKey { get; private set; } = null!;

        /// <summary>
        /// Whether credentials were inherited from a credential set.
        /// </summary>
        [Output("inheritedCreds")]
        public Output<bool> InheritedCreds { get; private set; } = null!;

        /// <summary>
        /// Whether the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.
        /// </summary>
        [Output("insecure")]
        public Output<bool?> Insecure { get; private set; } = null!;

        /// <summary>
        /// Name to be used for this repo. Only used with Helm repos.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Password or PAT used for authenticating at the remote repository.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// The project name, in case the repository is project scoped.
        /// </summary>
        [Output("project")]
        public Output<string?> Project { get; private set; } = null!;

        /// <summary>
        /// URL of the repository.
        /// </summary>
        [Output("repo")]
        public Output<string> Repo { get; private set; } = null!;

        /// <summary>
        /// PEM data for authenticating at the repo server. Only used with Git repos.
        /// </summary>
        [Output("sshPrivateKey")]
        public Output<string?> SshPrivateKey { get; private set; } = null!;

        /// <summary>
        /// TLS client certificate in PEM format for authenticating at the repo server.
        /// </summary>
        [Output("tlsClientCertData")]
        public Output<string?> TlsClientCertData { get; private set; } = null!;

        /// <summary>
        /// TLS client certificate private key in PEM format for authenticating at the repo server.
        /// </summary>
        [Output("tlsClientCertKey")]
        public Output<string?> TlsClientCertKey { get; private set; } = null!;

        /// <summary>
        /// Type of the repo. Can be either `git` or `helm`. `git` is assumed if empty or absent.
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        /// <summary>
        /// Username used for authenticating at the remote repository.
        /// </summary>
        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;


        /// <summary>
        /// Create a Repository resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Repository(string name, RepositoryArgs args, CustomResourceOptions? options = null)
            : base("argocd:index/repository:Repository", name, args ?? new RepositoryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Repository(string name, Input<string> id, RepositoryState? state = null, CustomResourceOptions? options = null)
            : base("argocd:index/repository:Repository", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "githubappPrivateKey",
                    "password",
                    "sshPrivateKey",
                    "tlsClientCertKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Repository resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Repository Get(string name, Input<string> id, RepositoryState? state = null, CustomResourceOptions? options = null)
        {
            return new Repository(name, id, state, options);
        }
    }

    public sealed class RepositoryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether `git-lfs` support should be enabled for this repository.
        /// </summary>
        [Input("enableLfs")]
        public Input<bool>? EnableLfs { get; set; }

        /// <summary>
        /// Whether `helm-oci` support should be enabled for this repository.
        /// </summary>
        [Input("enableOci")]
        public Input<bool>? EnableOci { get; set; }

        /// <summary>
        /// GitHub API URL for GitHub app authentication.
        /// </summary>
        [Input("githubappEnterpriseBaseUrl")]
        public Input<string>? GithubappEnterpriseBaseUrl { get; set; }

        /// <summary>
        /// ID of the GitHub app used to access the repo.
        /// </summary>
        [Input("githubappId")]
        public Input<string>? GithubappId { get; set; }

        /// <summary>
        /// The installation ID of the GitHub App used to access the repo.
        /// </summary>
        [Input("githubappInstallationId")]
        public Input<string>? GithubappInstallationId { get; set; }

        [Input("githubappPrivateKey")]
        private Input<string>? _githubappPrivateKey;

        /// <summary>
        /// Private key data (PEM) for authentication via GitHub app.
        /// </summary>
        public Input<string>? GithubappPrivateKey
        {
            get => _githubappPrivateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _githubappPrivateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Whether the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.
        /// </summary>
        [Input("insecure")]
        public Input<bool>? Insecure { get; set; }

        /// <summary>
        /// Name to be used for this repo. Only used with Helm repos.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Password or PAT used for authenticating at the remote repository.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The project name, in case the repository is project scoped.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// URL of the repository.
        /// </summary>
        [Input("repo", required: true)]
        public Input<string> Repo { get; set; } = null!;

        [Input("sshPrivateKey")]
        private Input<string>? _sshPrivateKey;

        /// <summary>
        /// PEM data for authenticating at the repo server. Only used with Git repos.
        /// </summary>
        public Input<string>? SshPrivateKey
        {
            get => _sshPrivateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sshPrivateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// TLS client certificate in PEM format for authenticating at the repo server.
        /// </summary>
        [Input("tlsClientCertData")]
        public Input<string>? TlsClientCertData { get; set; }

        [Input("tlsClientCertKey")]
        private Input<string>? _tlsClientCertKey;

        /// <summary>
        /// TLS client certificate private key in PEM format for authenticating at the repo server.
        /// </summary>
        public Input<string>? TlsClientCertKey
        {
            get => _tlsClientCertKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tlsClientCertKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Type of the repo. Can be either `git` or `helm`. `git` is assumed if empty or absent.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Username used for authenticating at the remote repository.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public RepositoryArgs()
        {
        }
        public static new RepositoryArgs Empty => new RepositoryArgs();
    }

    public sealed class RepositoryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Contains information about the current state of connection to the repository server.
        /// </summary>
        [Input("connectionStateStatus")]
        public Input<string>? ConnectionStateStatus { get; set; }

        /// <summary>
        /// Whether `git-lfs` support should be enabled for this repository.
        /// </summary>
        [Input("enableLfs")]
        public Input<bool>? EnableLfs { get; set; }

        /// <summary>
        /// Whether `helm-oci` support should be enabled for this repository.
        /// </summary>
        [Input("enableOci")]
        public Input<bool>? EnableOci { get; set; }

        /// <summary>
        /// GitHub API URL for GitHub app authentication.
        /// </summary>
        [Input("githubappEnterpriseBaseUrl")]
        public Input<string>? GithubappEnterpriseBaseUrl { get; set; }

        /// <summary>
        /// ID of the GitHub app used to access the repo.
        /// </summary>
        [Input("githubappId")]
        public Input<string>? GithubappId { get; set; }

        /// <summary>
        /// The installation ID of the GitHub App used to access the repo.
        /// </summary>
        [Input("githubappInstallationId")]
        public Input<string>? GithubappInstallationId { get; set; }

        [Input("githubappPrivateKey")]
        private Input<string>? _githubappPrivateKey;

        /// <summary>
        /// Private key data (PEM) for authentication via GitHub app.
        /// </summary>
        public Input<string>? GithubappPrivateKey
        {
            get => _githubappPrivateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _githubappPrivateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Whether credentials were inherited from a credential set.
        /// </summary>
        [Input("inheritedCreds")]
        public Input<bool>? InheritedCreds { get; set; }

        /// <summary>
        /// Whether the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.
        /// </summary>
        [Input("insecure")]
        public Input<bool>? Insecure { get; set; }

        /// <summary>
        /// Name to be used for this repo. Only used with Helm repos.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Password or PAT used for authenticating at the remote repository.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The project name, in case the repository is project scoped.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// URL of the repository.
        /// </summary>
        [Input("repo")]
        public Input<string>? Repo { get; set; }

        [Input("sshPrivateKey")]
        private Input<string>? _sshPrivateKey;

        /// <summary>
        /// PEM data for authenticating at the repo server. Only used with Git repos.
        /// </summary>
        public Input<string>? SshPrivateKey
        {
            get => _sshPrivateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sshPrivateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// TLS client certificate in PEM format for authenticating at the repo server.
        /// </summary>
        [Input("tlsClientCertData")]
        public Input<string>? TlsClientCertData { get; set; }

        [Input("tlsClientCertKey")]
        private Input<string>? _tlsClientCertKey;

        /// <summary>
        /// TLS client certificate private key in PEM format for authenticating at the repo server.
        /// </summary>
        public Input<string>? TlsClientCertKey
        {
            get => _tlsClientCertKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tlsClientCertKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Type of the repo. Can be either `git` or `helm`. `git` is assumed if empty or absent.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Username used for authenticating at the remote repository.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public RepositoryState()
        {
        }
        public static new RepositoryState Empty => new RepositoryState();
    }
}
