// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Argocd.Inputs
{

    public sealed class ProjectSpecArgs : global::Pulumi.ResourceArgs
    {
        [Input("clusterResourceBlacklists")]
        private InputList<Inputs.ProjectSpecClusterResourceBlacklistArgs>? _clusterResourceBlacklists;

        /// <summary>
        /// Blacklisted cluster level resources.
        /// </summary>
        public InputList<Inputs.ProjectSpecClusterResourceBlacklistArgs> ClusterResourceBlacklists
        {
            get => _clusterResourceBlacklists ?? (_clusterResourceBlacklists = new InputList<Inputs.ProjectSpecClusterResourceBlacklistArgs>());
            set => _clusterResourceBlacklists = value;
        }

        [Input("clusterResourceWhitelists")]
        private InputList<Inputs.ProjectSpecClusterResourceWhitelistArgs>? _clusterResourceWhitelists;

        /// <summary>
        /// Whitelisted cluster level resources.
        /// </summary>
        public InputList<Inputs.ProjectSpecClusterResourceWhitelistArgs> ClusterResourceWhitelists
        {
            get => _clusterResourceWhitelists ?? (_clusterResourceWhitelists = new InputList<Inputs.ProjectSpecClusterResourceWhitelistArgs>());
            set => _clusterResourceWhitelists = value;
        }

        /// <summary>
        /// Project description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("destinations", required: true)]
        private InputList<Inputs.ProjectSpecDestinationArgs>? _destinations;

        /// <summary>
        /// Destinations available for deployment.
        /// </summary>
        public InputList<Inputs.ProjectSpecDestinationArgs> Destinations
        {
            get => _destinations ?? (_destinations = new InputList<Inputs.ProjectSpecDestinationArgs>());
            set => _destinations = value;
        }

        [Input("namespaceResourceBlacklists")]
        private InputList<Inputs.ProjectSpecNamespaceResourceBlacklistArgs>? _namespaceResourceBlacklists;

        /// <summary>
        /// Blacklisted namespace level resources.
        /// </summary>
        public InputList<Inputs.ProjectSpecNamespaceResourceBlacklistArgs> NamespaceResourceBlacklists
        {
            get => _namespaceResourceBlacklists ?? (_namespaceResourceBlacklists = new InputList<Inputs.ProjectSpecNamespaceResourceBlacklistArgs>());
            set => _namespaceResourceBlacklists = value;
        }

        [Input("namespaceResourceWhitelists")]
        private InputList<Inputs.ProjectSpecNamespaceResourceWhitelistArgs>? _namespaceResourceWhitelists;

        /// <summary>
        /// Whitelisted namespace level resources.
        /// </summary>
        public InputList<Inputs.ProjectSpecNamespaceResourceWhitelistArgs> NamespaceResourceWhitelists
        {
            get => _namespaceResourceWhitelists ?? (_namespaceResourceWhitelists = new InputList<Inputs.ProjectSpecNamespaceResourceWhitelistArgs>());
            set => _namespaceResourceWhitelists = value;
        }

        /// <summary>
        /// Settings specifying if controller should monitor orphaned resources of apps in this project.
        /// </summary>
        [Input("orphanedResources")]
        public Input<Inputs.ProjectSpecOrphanedResourcesArgs>? OrphanedResources { get; set; }

        [Input("roles")]
        private InputList<Inputs.ProjectSpecRoleArgs>? _roles;

        /// <summary>
        /// User defined RBAC roles associated with this project.
        /// </summary>
        public InputList<Inputs.ProjectSpecRoleArgs> Roles
        {
            get => _roles ?? (_roles = new InputList<Inputs.ProjectSpecRoleArgs>());
            set => _roles = value;
        }

        [Input("signatureKeys")]
        private InputList<string>? _signatureKeys;

        /// <summary>
        /// List of PGP key IDs that commits in Git must be signed with in order to be allowed for sync.
        /// </summary>
        public InputList<string> SignatureKeys
        {
            get => _signatureKeys ?? (_signatureKeys = new InputList<string>());
            set => _signatureKeys = value;
        }

        [Input("sourceNamespaces")]
        private InputList<string>? _sourceNamespaces;

        /// <summary>
        /// List of namespaces that application resources are allowed to be created in.
        /// </summary>
        public InputList<string> SourceNamespaces
        {
            get => _sourceNamespaces ?? (_sourceNamespaces = new InputList<string>());
            set => _sourceNamespaces = value;
        }

        [Input("sourceRepos", required: true)]
        private InputList<string>? _sourceRepos;

        /// <summary>
        /// List of repository URLs which can be used for deployment. Can be set to `["*"]` to allow all configured repositories configured in ArgoCD.
        /// </summary>
        public InputList<string> SourceRepos
        {
            get => _sourceRepos ?? (_sourceRepos = new InputList<string>());
            set => _sourceRepos = value;
        }

        [Input("syncWindows")]
        private InputList<Inputs.ProjectSpecSyncWindowArgs>? _syncWindows;

        /// <summary>
        /// Settings controlling when syncs can be run for apps in this project.
        /// </summary>
        public InputList<Inputs.ProjectSpecSyncWindowArgs> SyncWindows
        {
            get => _syncWindows ?? (_syncWindows = new InputList<Inputs.ProjectSpecSyncWindowArgs>());
            set => _syncWindows = value;
        }

        public ProjectSpecArgs()
        {
        }
        public static new ProjectSpecArgs Empty => new ProjectSpecArgs();
    }
}
