// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Argocd.Inputs
{

    public sealed class ProviderKubernetesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// PEM-encoded client certificate for TLS authentication. Can be sourced from `KUBE_CLIENT_CERT_DATA`.
        /// </summary>
        [Input("clientCertificate")]
        public Input<string>? ClientCertificate { get; set; }

        [Input("clientKey")]
        private Input<string>? _clientKey;

        /// <summary>
        /// PEM-encoded client certificate key for TLS authentication. Can be sourced from `KUBE_CLIENT_KEY_DATA`.
        /// </summary>
        public Input<string>? ClientKey
        {
            get => _clientKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// PEM-encoded root certificates bundle for TLS authentication. Can be sourced from `KUBE_CLUSTER_CA_CERT_DATA`.
        /// </summary>
        [Input("clusterCaCertificate")]
        public Input<string>? ClusterCaCertificate { get; set; }

        /// <summary>
        /// Context to choose from the config file. Can be sourced from `KUBE_CTX`.
        /// </summary>
        [Input("configContext")]
        public Input<string>? ConfigContext { get; set; }

        [Input("configContextAuthInfo")]
        public Input<string>? ConfigContextAuthInfo { get; set; }

        [Input("configContextCluster")]
        public Input<string>? ConfigContextCluster { get; set; }

        /// <summary>
        /// Configuration block to use an [exec-based credential plugin](https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins), e.g. call an external command to receive user credentials.
        /// </summary>
        [Input("exec")]
        public Input<Inputs.ProviderKubernetesExecArgs>? Exec { get; set; }

        /// <summary>
        /// The hostname (in form of URI) of the Kubernetes API. Can be sourced from `KUBE_HOST`.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// Whether server should be accessed without verifying the TLS certificate. Can be sourced from `KUBE_INSECURE`.
        /// </summary>
        [Input("insecure")]
        public Input<bool>? Insecure { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password to use for HTTP basic authentication when accessing the Kubernetes API. Can be sourced from `KUBE_PASSWORD`.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// Token to authenticate an service account. Can be sourced from `KUBE_TOKEN`.
        /// </summary>
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The username to use for HTTP basic authentication when accessing the Kubernetes API. Can be sourced from `KUBE_USER`.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public ProviderKubernetesArgs()
        {
        }
        public static new ProviderKubernetesArgs Empty => new ProviderKubernetesArgs();
    }
}
