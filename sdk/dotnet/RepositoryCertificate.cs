// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Argocd
{
    /// <summary>
    /// Manages [custom TLS certificates](https://argo-cd.readthedocs.io/en/stable/user-guide/private-repositories/#self-signed-untrusted-tls-certificates) used by ArgoCD for connecting Git repositories.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Argocd = Pulumi.Argocd;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // SSH certificate
    ///     var private_git_repository = new Argocd.RepositoryCertificate("private-git-repository", new()
    ///     {
    ///         Ssh = new Argocd.Inputs.RepositoryCertificateSshArgs
    ///         {
    ///             CertData = @"AAAAB3NzaC1yc2EAAAADAQABAAABgQCiPZAufKgxwRgxP9qy2Gtub0FI8qJGtL8Ldb7KatBeRUQQPn8QK7ZYjzYDvP1GOutFMaQT0rKIqaGImIBsztNCno...
    /// 
    /// ",
    ///             CertSubtype = "ssh-rsa",
    ///             ServerName = "private-git-repository.local",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [ArgocdResourceType("argocd:index/repositoryCertificate:RepositoryCertificate")]
    public partial class RepositoryCertificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Defines a `https` certificate.
        /// </summary>
        [Output("https")]
        public Output<Outputs.RepositoryCertificateHttps?> Https { get; private set; } = null!;

        /// <summary>
        /// Defines a `ssh` certificate.
        /// </summary>
        [Output("ssh")]
        public Output<Outputs.RepositoryCertificateSsh?> Ssh { get; private set; } = null!;


        /// <summary>
        /// Create a RepositoryCertificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RepositoryCertificate(string name, RepositoryCertificateArgs? args = null, CustomResourceOptions? options = null)
            : base("argocd:index/repositoryCertificate:RepositoryCertificate", name, args ?? new RepositoryCertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RepositoryCertificate(string name, Input<string> id, RepositoryCertificateState? state = null, CustomResourceOptions? options = null)
            : base("argocd:index/repositoryCertificate:RepositoryCertificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RepositoryCertificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RepositoryCertificate Get(string name, Input<string> id, RepositoryCertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new RepositoryCertificate(name, id, state, options);
        }
    }

    public sealed class RepositoryCertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defines a `https` certificate.
        /// </summary>
        [Input("https")]
        public Input<Inputs.RepositoryCertificateHttpsArgs>? Https { get; set; }

        /// <summary>
        /// Defines a `ssh` certificate.
        /// </summary>
        [Input("ssh")]
        public Input<Inputs.RepositoryCertificateSshArgs>? Ssh { get; set; }

        public RepositoryCertificateArgs()
        {
        }
        public static new RepositoryCertificateArgs Empty => new RepositoryCertificateArgs();
    }

    public sealed class RepositoryCertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defines a `https` certificate.
        /// </summary>
        [Input("https")]
        public Input<Inputs.RepositoryCertificateHttpsGetArgs>? Https { get; set; }

        /// <summary>
        /// Defines a `ssh` certificate.
        /// </summary>
        [Input("ssh")]
        public Input<Inputs.RepositoryCertificateSshGetArgs>? Ssh { get; set; }

        public RepositoryCertificateState()
        {
        }
        public static new RepositoryCertificateState Empty => new RepositoryCertificateState();
    }
}
