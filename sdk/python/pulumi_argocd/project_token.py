# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ProjectTokenArgs', 'ProjectToken']

@pulumi.input_type
class ProjectTokenArgs:
    def __init__(__self__, *,
                 project: pulumi.Input[str],
                 role: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 expires_in: Optional[pulumi.Input[str]] = None,
                 renew_after: Optional[pulumi.Input[str]] = None,
                 renew_before: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ProjectToken resource.
        :param pulumi.Input[str] project: The project associated with the token.
        :param pulumi.Input[str] role: The name of the role in the project associated with the token.
        :param pulumi.Input[str] description: Description of the token.
        :param pulumi.Input[str] expires_in: Duration before the token will expire. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. E.g. `12h`, `7d`. Default: No expiration.
        :param pulumi.Input[str] renew_after: Duration to control token silent regeneration based on token age. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. If set, then the token will be regenerated if it is older than `renew_after`. I.e. if `currentDate - issued_at > renew_after`.
        :param pulumi.Input[str] renew_before: Duration to control token silent regeneration based on remaining token lifetime. If `expires_in` is set, Terraform will
               regenerate the token if `expires_at - currentDate < renew_before`. Valid time units are `ns`, `us` (or `µs`), `ms`,
               `s`, `m`, `h`.
        """
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "role", role)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expires_in is not None:
            pulumi.set(__self__, "expires_in", expires_in)
        if renew_after is not None:
            pulumi.set(__self__, "renew_after", renew_after)
        if renew_before is not None:
            pulumi.set(__self__, "renew_before", renew_before)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        """
        The project associated with the token.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        """
        The name of the role in the project associated with the token.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the token.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="expiresIn")
    def expires_in(self) -> Optional[pulumi.Input[str]]:
        """
        Duration before the token will expire. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. E.g. `12h`, `7d`. Default: No expiration.
        """
        return pulumi.get(self, "expires_in")

    @expires_in.setter
    def expires_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expires_in", value)

    @property
    @pulumi.getter(name="renewAfter")
    def renew_after(self) -> Optional[pulumi.Input[str]]:
        """
        Duration to control token silent regeneration based on token age. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. If set, then the token will be regenerated if it is older than `renew_after`. I.e. if `currentDate - issued_at > renew_after`.
        """
        return pulumi.get(self, "renew_after")

    @renew_after.setter
    def renew_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "renew_after", value)

    @property
    @pulumi.getter(name="renewBefore")
    def renew_before(self) -> Optional[pulumi.Input[str]]:
        """
        Duration to control token silent regeneration based on remaining token lifetime. If `expires_in` is set, Terraform will
        regenerate the token if `expires_at - currentDate < renew_before`. Valid time units are `ns`, `us` (or `µs`), `ms`,
        `s`, `m`, `h`.
        """
        return pulumi.get(self, "renew_before")

    @renew_before.setter
    def renew_before(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "renew_before", value)


@pulumi.input_type
class _ProjectTokenState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 expires_at: Optional[pulumi.Input[str]] = None,
                 expires_in: Optional[pulumi.Input[str]] = None,
                 issued_at: Optional[pulumi.Input[str]] = None,
                 jwt: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 renew_after: Optional[pulumi.Input[str]] = None,
                 renew_before: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ProjectToken resources.
        :param pulumi.Input[str] description: Description of the token.
        :param pulumi.Input[str] expires_at: If `expires_in` is set, Unix timestamp upon which the token will expire.
        :param pulumi.Input[str] expires_in: Duration before the token will expire. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. E.g. `12h`, `7d`. Default: No expiration.
        :param pulumi.Input[str] issued_at: Unix timestamp at which the token was issued.
        :param pulumi.Input[str] jwt: The raw JWT.
        :param pulumi.Input[str] project: The project associated with the token.
        :param pulumi.Input[str] renew_after: Duration to control token silent regeneration based on token age. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. If set, then the token will be regenerated if it is older than `renew_after`. I.e. if `currentDate - issued_at > renew_after`.
        :param pulumi.Input[str] renew_before: Duration to control token silent regeneration based on remaining token lifetime. If `expires_in` is set, Terraform will
               regenerate the token if `expires_at - currentDate < renew_before`. Valid time units are `ns`, `us` (or `µs`), `ms`,
               `s`, `m`, `h`.
        :param pulumi.Input[str] role: The name of the role in the project associated with the token.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expires_at is not None:
            pulumi.set(__self__, "expires_at", expires_at)
        if expires_in is not None:
            pulumi.set(__self__, "expires_in", expires_in)
        if issued_at is not None:
            pulumi.set(__self__, "issued_at", issued_at)
        if jwt is not None:
            pulumi.set(__self__, "jwt", jwt)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if renew_after is not None:
            pulumi.set(__self__, "renew_after", renew_after)
        if renew_before is not None:
            pulumi.set(__self__, "renew_before", renew_before)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the token.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> Optional[pulumi.Input[str]]:
        """
        If `expires_in` is set, Unix timestamp upon which the token will expire.
        """
        return pulumi.get(self, "expires_at")

    @expires_at.setter
    def expires_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expires_at", value)

    @property
    @pulumi.getter(name="expiresIn")
    def expires_in(self) -> Optional[pulumi.Input[str]]:
        """
        Duration before the token will expire. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. E.g. `12h`, `7d`. Default: No expiration.
        """
        return pulumi.get(self, "expires_in")

    @expires_in.setter
    def expires_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expires_in", value)

    @property
    @pulumi.getter(name="issuedAt")
    def issued_at(self) -> Optional[pulumi.Input[str]]:
        """
        Unix timestamp at which the token was issued.
        """
        return pulumi.get(self, "issued_at")

    @issued_at.setter
    def issued_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issued_at", value)

    @property
    @pulumi.getter
    def jwt(self) -> Optional[pulumi.Input[str]]:
        """
        The raw JWT.
        """
        return pulumi.get(self, "jwt")

    @jwt.setter
    def jwt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jwt", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The project associated with the token.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="renewAfter")
    def renew_after(self) -> Optional[pulumi.Input[str]]:
        """
        Duration to control token silent regeneration based on token age. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. If set, then the token will be regenerated if it is older than `renew_after`. I.e. if `currentDate - issued_at > renew_after`.
        """
        return pulumi.get(self, "renew_after")

    @renew_after.setter
    def renew_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "renew_after", value)

    @property
    @pulumi.getter(name="renewBefore")
    def renew_before(self) -> Optional[pulumi.Input[str]]:
        """
        Duration to control token silent regeneration based on remaining token lifetime. If `expires_in` is set, Terraform will
        regenerate the token if `expires_at - currentDate < renew_before`. Valid time units are `ns`, `us` (or `µs`), `ms`,
        `s`, `m`, `h`.
        """
        return pulumi.get(self, "renew_before")

    @renew_before.setter
    def renew_before(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "renew_before", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the role in the project associated with the token.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


class ProjectToken(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 expires_in: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 renew_after: Optional[pulumi.Input[str]] = None,
                 renew_before: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_argocd as argocd

        secret = argocd.ProjectToken("secret",
            description="short lived token",
            expires_in="1h",
            project="someproject",
            renew_before="30m",
            role="foobar")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the token.
        :param pulumi.Input[str] expires_in: Duration before the token will expire. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. E.g. `12h`, `7d`. Default: No expiration.
        :param pulumi.Input[str] project: The project associated with the token.
        :param pulumi.Input[str] renew_after: Duration to control token silent regeneration based on token age. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. If set, then the token will be regenerated if it is older than `renew_after`. I.e. if `currentDate - issued_at > renew_after`.
        :param pulumi.Input[str] renew_before: Duration to control token silent regeneration based on remaining token lifetime. If `expires_in` is set, Terraform will
               regenerate the token if `expires_at - currentDate < renew_before`. Valid time units are `ns`, `us` (or `µs`), `ms`,
               `s`, `m`, `h`.
        :param pulumi.Input[str] role: The name of the role in the project associated with the token.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProjectTokenArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_argocd as argocd

        secret = argocd.ProjectToken("secret",
            description="short lived token",
            expires_in="1h",
            project="someproject",
            renew_before="30m",
            role="foobar")
        ```

        :param str resource_name: The name of the resource.
        :param ProjectTokenArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProjectTokenArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 expires_in: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 renew_after: Optional[pulumi.Input[str]] = None,
                 renew_before: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProjectTokenArgs.__new__(ProjectTokenArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["expires_in"] = expires_in
            if project is None and not opts.urn:
                raise TypeError("Missing required property 'project'")
            __props__.__dict__["project"] = project
            __props__.__dict__["renew_after"] = renew_after
            __props__.__dict__["renew_before"] = renew_before
            if role is None and not opts.urn:
                raise TypeError("Missing required property 'role'")
            __props__.__dict__["role"] = role
            __props__.__dict__["expires_at"] = None
            __props__.__dict__["issued_at"] = None
            __props__.__dict__["jwt"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["jwt"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ProjectToken, __self__).__init__(
            'argocd:index/projectToken:ProjectToken',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            expires_at: Optional[pulumi.Input[str]] = None,
            expires_in: Optional[pulumi.Input[str]] = None,
            issued_at: Optional[pulumi.Input[str]] = None,
            jwt: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None,
            renew_after: Optional[pulumi.Input[str]] = None,
            renew_before: Optional[pulumi.Input[str]] = None,
            role: Optional[pulumi.Input[str]] = None) -> 'ProjectToken':
        """
        Get an existing ProjectToken resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the token.
        :param pulumi.Input[str] expires_at: If `expires_in` is set, Unix timestamp upon which the token will expire.
        :param pulumi.Input[str] expires_in: Duration before the token will expire. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. E.g. `12h`, `7d`. Default: No expiration.
        :param pulumi.Input[str] issued_at: Unix timestamp at which the token was issued.
        :param pulumi.Input[str] jwt: The raw JWT.
        :param pulumi.Input[str] project: The project associated with the token.
        :param pulumi.Input[str] renew_after: Duration to control token silent regeneration based on token age. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. If set, then the token will be regenerated if it is older than `renew_after`. I.e. if `currentDate - issued_at > renew_after`.
        :param pulumi.Input[str] renew_before: Duration to control token silent regeneration based on remaining token lifetime. If `expires_in` is set, Terraform will
               regenerate the token if `expires_at - currentDate < renew_before`. Valid time units are `ns`, `us` (or `µs`), `ms`,
               `s`, `m`, `h`.
        :param pulumi.Input[str] role: The name of the role in the project associated with the token.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProjectTokenState.__new__(_ProjectTokenState)

        __props__.__dict__["description"] = description
        __props__.__dict__["expires_at"] = expires_at
        __props__.__dict__["expires_in"] = expires_in
        __props__.__dict__["issued_at"] = issued_at
        __props__.__dict__["jwt"] = jwt
        __props__.__dict__["project"] = project
        __props__.__dict__["renew_after"] = renew_after
        __props__.__dict__["renew_before"] = renew_before
        __props__.__dict__["role"] = role
        return ProjectToken(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the token.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> pulumi.Output[str]:
        """
        If `expires_in` is set, Unix timestamp upon which the token will expire.
        """
        return pulumi.get(self, "expires_at")

    @property
    @pulumi.getter(name="expiresIn")
    def expires_in(self) -> pulumi.Output[Optional[str]]:
        """
        Duration before the token will expire. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. E.g. `12h`, `7d`. Default: No expiration.
        """
        return pulumi.get(self, "expires_in")

    @property
    @pulumi.getter(name="issuedAt")
    def issued_at(self) -> pulumi.Output[str]:
        """
        Unix timestamp at which the token was issued.
        """
        return pulumi.get(self, "issued_at")

    @property
    @pulumi.getter
    def jwt(self) -> pulumi.Output[str]:
        """
        The raw JWT.
        """
        return pulumi.get(self, "jwt")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        The project associated with the token.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="renewAfter")
    def renew_after(self) -> pulumi.Output[Optional[str]]:
        """
        Duration to control token silent regeneration based on token age. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. If set, then the token will be regenerated if it is older than `renew_after`. I.e. if `currentDate - issued_at > renew_after`.
        """
        return pulumi.get(self, "renew_after")

    @property
    @pulumi.getter(name="renewBefore")
    def renew_before(self) -> pulumi.Output[Optional[str]]:
        """
        Duration to control token silent regeneration based on remaining token lifetime. If `expires_in` is set, Terraform will
        regenerate the token if `expires_at - currentDate < renew_before`. Valid time units are `ns`, `us` (or `µs`), `ms`,
        `s`, `m`, `h`.
        """
        return pulumi.get(self, "renew_before")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[str]:
        """
        The name of the role in the project associated with the token.
        """
        return pulumi.get(self, "role")

