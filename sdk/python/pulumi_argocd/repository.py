# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['RepositoryArgs', 'Repository']

@pulumi.input_type
class RepositoryArgs:
    def __init__(__self__, *,
                 repo: pulumi.Input[str],
                 enable_lfs: Optional[pulumi.Input[bool]] = None,
                 enable_oci: Optional[pulumi.Input[bool]] = None,
                 githubapp_enterprise_base_url: Optional[pulumi.Input[str]] = None,
                 githubapp_id: Optional[pulumi.Input[str]] = None,
                 githubapp_installation_id: Optional[pulumi.Input[str]] = None,
                 githubapp_private_key: Optional[pulumi.Input[str]] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 ssh_private_key: Optional[pulumi.Input[str]] = None,
                 tls_client_cert_data: Optional[pulumi.Input[str]] = None,
                 tls_client_cert_key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Repository resource.
        :param pulumi.Input[str] repo: URL of the repository.
        :param pulumi.Input[bool] enable_lfs: Whether `git-lfs` support should be enabled for this repository.
        :param pulumi.Input[bool] enable_oci: Whether `helm-oci` support should be enabled for this repository.
        :param pulumi.Input[str] githubapp_enterprise_base_url: GitHub API URL for GitHub app authentication.
        :param pulumi.Input[str] githubapp_id: ID of the GitHub app used to access the repo.
        :param pulumi.Input[str] githubapp_installation_id: The installation ID of the GitHub App used to access the repo.
        :param pulumi.Input[str] githubapp_private_key: Private key data (PEM) for authentication via GitHub app.
        :param pulumi.Input[bool] insecure: Whether the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.
        :param pulumi.Input[str] name: Name to be used for this repo. Only used with Helm repos.
        :param pulumi.Input[str] password: Password or PAT used for authenticating at the remote repository.
        :param pulumi.Input[str] project: The project name, in case the repository is project scoped.
        :param pulumi.Input[str] ssh_private_key: PEM data for authenticating at the repo server. Only used with Git repos.
        :param pulumi.Input[str] tls_client_cert_data: TLS client certificate in PEM format for authenticating at the repo server.
        :param pulumi.Input[str] tls_client_cert_key: TLS client certificate private key in PEM format for authenticating at the repo server.
        :param pulumi.Input[str] type: Type of the repo. Can be either `git` or `helm`. `git` is assumed if empty or absent.
        :param pulumi.Input[str] username: Username used for authenticating at the remote repository.
        """
        pulumi.set(__self__, "repo", repo)
        if enable_lfs is not None:
            pulumi.set(__self__, "enable_lfs", enable_lfs)
        if enable_oci is not None:
            pulumi.set(__self__, "enable_oci", enable_oci)
        if githubapp_enterprise_base_url is not None:
            pulumi.set(__self__, "githubapp_enterprise_base_url", githubapp_enterprise_base_url)
        if githubapp_id is not None:
            pulumi.set(__self__, "githubapp_id", githubapp_id)
        if githubapp_installation_id is not None:
            pulumi.set(__self__, "githubapp_installation_id", githubapp_installation_id)
        if githubapp_private_key is not None:
            pulumi.set(__self__, "githubapp_private_key", githubapp_private_key)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if ssh_private_key is not None:
            pulumi.set(__self__, "ssh_private_key", ssh_private_key)
        if tls_client_cert_data is not None:
            pulumi.set(__self__, "tls_client_cert_data", tls_client_cert_data)
        if tls_client_cert_key is not None:
            pulumi.set(__self__, "tls_client_cert_key", tls_client_cert_key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def repo(self) -> pulumi.Input[str]:
        """
        URL of the repository.
        """
        return pulumi.get(self, "repo")

    @repo.setter
    def repo(self, value: pulumi.Input[str]):
        pulumi.set(self, "repo", value)

    @property
    @pulumi.getter(name="enableLfs")
    def enable_lfs(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether `git-lfs` support should be enabled for this repository.
        """
        return pulumi.get(self, "enable_lfs")

    @enable_lfs.setter
    def enable_lfs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_lfs", value)

    @property
    @pulumi.getter(name="enableOci")
    def enable_oci(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether `helm-oci` support should be enabled for this repository.
        """
        return pulumi.get(self, "enable_oci")

    @enable_oci.setter
    def enable_oci(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_oci", value)

    @property
    @pulumi.getter(name="githubappEnterpriseBaseUrl")
    def githubapp_enterprise_base_url(self) -> Optional[pulumi.Input[str]]:
        """
        GitHub API URL for GitHub app authentication.
        """
        return pulumi.get(self, "githubapp_enterprise_base_url")

    @githubapp_enterprise_base_url.setter
    def githubapp_enterprise_base_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "githubapp_enterprise_base_url", value)

    @property
    @pulumi.getter(name="githubappId")
    def githubapp_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the GitHub app used to access the repo.
        """
        return pulumi.get(self, "githubapp_id")

    @githubapp_id.setter
    def githubapp_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "githubapp_id", value)

    @property
    @pulumi.getter(name="githubappInstallationId")
    def githubapp_installation_id(self) -> Optional[pulumi.Input[str]]:
        """
        The installation ID of the GitHub App used to access the repo.
        """
        return pulumi.get(self, "githubapp_installation_id")

    @githubapp_installation_id.setter
    def githubapp_installation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "githubapp_installation_id", value)

    @property
    @pulumi.getter(name="githubappPrivateKey")
    def githubapp_private_key(self) -> Optional[pulumi.Input[str]]:
        """
        Private key data (PEM) for authentication via GitHub app.
        """
        return pulumi.get(self, "githubapp_private_key")

    @githubapp_private_key.setter
    def githubapp_private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "githubapp_private_key", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.
        """
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name to be used for this repo. Only used with Helm repos.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password or PAT used for authenticating at the remote repository.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The project name, in case the repository is project scoped.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="sshPrivateKey")
    def ssh_private_key(self) -> Optional[pulumi.Input[str]]:
        """
        PEM data for authenticating at the repo server. Only used with Git repos.
        """
        return pulumi.get(self, "ssh_private_key")

    @ssh_private_key.setter
    def ssh_private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_private_key", value)

    @property
    @pulumi.getter(name="tlsClientCertData")
    def tls_client_cert_data(self) -> Optional[pulumi.Input[str]]:
        """
        TLS client certificate in PEM format for authenticating at the repo server.
        """
        return pulumi.get(self, "tls_client_cert_data")

    @tls_client_cert_data.setter
    def tls_client_cert_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_client_cert_data", value)

    @property
    @pulumi.getter(name="tlsClientCertKey")
    def tls_client_cert_key(self) -> Optional[pulumi.Input[str]]:
        """
        TLS client certificate private key in PEM format for authenticating at the repo server.
        """
        return pulumi.get(self, "tls_client_cert_key")

    @tls_client_cert_key.setter
    def tls_client_cert_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_client_cert_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the repo. Can be either `git` or `helm`. `git` is assumed if empty or absent.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username used for authenticating at the remote repository.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class _RepositoryState:
    def __init__(__self__, *,
                 connection_state_status: Optional[pulumi.Input[str]] = None,
                 enable_lfs: Optional[pulumi.Input[bool]] = None,
                 enable_oci: Optional[pulumi.Input[bool]] = None,
                 githubapp_enterprise_base_url: Optional[pulumi.Input[str]] = None,
                 githubapp_id: Optional[pulumi.Input[str]] = None,
                 githubapp_installation_id: Optional[pulumi.Input[str]] = None,
                 githubapp_private_key: Optional[pulumi.Input[str]] = None,
                 inherited_creds: Optional[pulumi.Input[bool]] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 repo: Optional[pulumi.Input[str]] = None,
                 ssh_private_key: Optional[pulumi.Input[str]] = None,
                 tls_client_cert_data: Optional[pulumi.Input[str]] = None,
                 tls_client_cert_key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Repository resources.
        :param pulumi.Input[str] connection_state_status: Contains information about the current state of connection to the repository server.
        :param pulumi.Input[bool] enable_lfs: Whether `git-lfs` support should be enabled for this repository.
        :param pulumi.Input[bool] enable_oci: Whether `helm-oci` support should be enabled for this repository.
        :param pulumi.Input[str] githubapp_enterprise_base_url: GitHub API URL for GitHub app authentication.
        :param pulumi.Input[str] githubapp_id: ID of the GitHub app used to access the repo.
        :param pulumi.Input[str] githubapp_installation_id: The installation ID of the GitHub App used to access the repo.
        :param pulumi.Input[str] githubapp_private_key: Private key data (PEM) for authentication via GitHub app.
        :param pulumi.Input[bool] inherited_creds: Whether credentials were inherited from a credential set.
        :param pulumi.Input[bool] insecure: Whether the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.
        :param pulumi.Input[str] name: Name to be used for this repo. Only used with Helm repos.
        :param pulumi.Input[str] password: Password or PAT used for authenticating at the remote repository.
        :param pulumi.Input[str] project: The project name, in case the repository is project scoped.
        :param pulumi.Input[str] repo: URL of the repository.
        :param pulumi.Input[str] ssh_private_key: PEM data for authenticating at the repo server. Only used with Git repos.
        :param pulumi.Input[str] tls_client_cert_data: TLS client certificate in PEM format for authenticating at the repo server.
        :param pulumi.Input[str] tls_client_cert_key: TLS client certificate private key in PEM format for authenticating at the repo server.
        :param pulumi.Input[str] type: Type of the repo. Can be either `git` or `helm`. `git` is assumed if empty or absent.
        :param pulumi.Input[str] username: Username used for authenticating at the remote repository.
        """
        if connection_state_status is not None:
            pulumi.set(__self__, "connection_state_status", connection_state_status)
        if enable_lfs is not None:
            pulumi.set(__self__, "enable_lfs", enable_lfs)
        if enable_oci is not None:
            pulumi.set(__self__, "enable_oci", enable_oci)
        if githubapp_enterprise_base_url is not None:
            pulumi.set(__self__, "githubapp_enterprise_base_url", githubapp_enterprise_base_url)
        if githubapp_id is not None:
            pulumi.set(__self__, "githubapp_id", githubapp_id)
        if githubapp_installation_id is not None:
            pulumi.set(__self__, "githubapp_installation_id", githubapp_installation_id)
        if githubapp_private_key is not None:
            pulumi.set(__self__, "githubapp_private_key", githubapp_private_key)
        if inherited_creds is not None:
            pulumi.set(__self__, "inherited_creds", inherited_creds)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if repo is not None:
            pulumi.set(__self__, "repo", repo)
        if ssh_private_key is not None:
            pulumi.set(__self__, "ssh_private_key", ssh_private_key)
        if tls_client_cert_data is not None:
            pulumi.set(__self__, "tls_client_cert_data", tls_client_cert_data)
        if tls_client_cert_key is not None:
            pulumi.set(__self__, "tls_client_cert_key", tls_client_cert_key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="connectionStateStatus")
    def connection_state_status(self) -> Optional[pulumi.Input[str]]:
        """
        Contains information about the current state of connection to the repository server.
        """
        return pulumi.get(self, "connection_state_status")

    @connection_state_status.setter
    def connection_state_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_state_status", value)

    @property
    @pulumi.getter(name="enableLfs")
    def enable_lfs(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether `git-lfs` support should be enabled for this repository.
        """
        return pulumi.get(self, "enable_lfs")

    @enable_lfs.setter
    def enable_lfs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_lfs", value)

    @property
    @pulumi.getter(name="enableOci")
    def enable_oci(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether `helm-oci` support should be enabled for this repository.
        """
        return pulumi.get(self, "enable_oci")

    @enable_oci.setter
    def enable_oci(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_oci", value)

    @property
    @pulumi.getter(name="githubappEnterpriseBaseUrl")
    def githubapp_enterprise_base_url(self) -> Optional[pulumi.Input[str]]:
        """
        GitHub API URL for GitHub app authentication.
        """
        return pulumi.get(self, "githubapp_enterprise_base_url")

    @githubapp_enterprise_base_url.setter
    def githubapp_enterprise_base_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "githubapp_enterprise_base_url", value)

    @property
    @pulumi.getter(name="githubappId")
    def githubapp_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the GitHub app used to access the repo.
        """
        return pulumi.get(self, "githubapp_id")

    @githubapp_id.setter
    def githubapp_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "githubapp_id", value)

    @property
    @pulumi.getter(name="githubappInstallationId")
    def githubapp_installation_id(self) -> Optional[pulumi.Input[str]]:
        """
        The installation ID of the GitHub App used to access the repo.
        """
        return pulumi.get(self, "githubapp_installation_id")

    @githubapp_installation_id.setter
    def githubapp_installation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "githubapp_installation_id", value)

    @property
    @pulumi.getter(name="githubappPrivateKey")
    def githubapp_private_key(self) -> Optional[pulumi.Input[str]]:
        """
        Private key data (PEM) for authentication via GitHub app.
        """
        return pulumi.get(self, "githubapp_private_key")

    @githubapp_private_key.setter
    def githubapp_private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "githubapp_private_key", value)

    @property
    @pulumi.getter(name="inheritedCreds")
    def inherited_creds(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether credentials were inherited from a credential set.
        """
        return pulumi.get(self, "inherited_creds")

    @inherited_creds.setter
    def inherited_creds(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "inherited_creds", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.
        """
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name to be used for this repo. Only used with Helm repos.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password or PAT used for authenticating at the remote repository.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The project name, in case the repository is project scoped.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def repo(self) -> Optional[pulumi.Input[str]]:
        """
        URL of the repository.
        """
        return pulumi.get(self, "repo")

    @repo.setter
    def repo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo", value)

    @property
    @pulumi.getter(name="sshPrivateKey")
    def ssh_private_key(self) -> Optional[pulumi.Input[str]]:
        """
        PEM data for authenticating at the repo server. Only used with Git repos.
        """
        return pulumi.get(self, "ssh_private_key")

    @ssh_private_key.setter
    def ssh_private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_private_key", value)

    @property
    @pulumi.getter(name="tlsClientCertData")
    def tls_client_cert_data(self) -> Optional[pulumi.Input[str]]:
        """
        TLS client certificate in PEM format for authenticating at the repo server.
        """
        return pulumi.get(self, "tls_client_cert_data")

    @tls_client_cert_data.setter
    def tls_client_cert_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_client_cert_data", value)

    @property
    @pulumi.getter(name="tlsClientCertKey")
    def tls_client_cert_key(self) -> Optional[pulumi.Input[str]]:
        """
        TLS client certificate private key in PEM format for authenticating at the repo server.
        """
        return pulumi.get(self, "tls_client_cert_key")

    @tls_client_cert_key.setter
    def tls_client_cert_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_client_cert_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the repo. Can be either `git` or `helm`. `git` is assumed if empty or absent.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username used for authenticating at the remote repository.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


class Repository(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_lfs: Optional[pulumi.Input[bool]] = None,
                 enable_oci: Optional[pulumi.Input[bool]] = None,
                 githubapp_enterprise_base_url: Optional[pulumi.Input[str]] = None,
                 githubapp_id: Optional[pulumi.Input[str]] = None,
                 githubapp_installation_id: Optional[pulumi.Input[str]] = None,
                 githubapp_private_key: Optional[pulumi.Input[str]] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 repo: Optional[pulumi.Input[str]] = None,
                 ssh_private_key: Optional[pulumi.Input[str]] = None,
                 tls_client_cert_data: Optional[pulumi.Input[str]] = None,
                 tls_client_cert_key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages [repositories](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#repositories) within ArgoCD.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_argocd as argocd

        # Public Helm repository
        public_nginx_helm = argocd.Repository("publicNginxHelm",
            repo="https://helm.nginx.com/stable",
            type="helm")
        # Public Git repository
        public_git = argocd.Repository("publicGit", repo="git@github.com:user/somerepo.git")
        # Private Git repository
        private = argocd.Repository("private",
            insecure=True,
            repo="git@private-git-repository.local:somerepo.git",
            ssh_private_key=\"\"\"-----BEGIN OPENSSH PRIVATE KEY-----
        foo
        bar
        -----END OPENSSH PRIVATE KEY-----
        \"\"\",
            username="git")
        ```

        ## Import

        Repositories can be imported using the repository URL.

         Note: as the ArgoCD API does not return any sensitive information, a

         subsequent `pulumi up` should be executed to make the `password`,

         `ssh_private_key` and `tls_client_cert_key` attributes converge to their

         expected values defined within the plan.

         Example:

        ```sh
        $ pulumi import argocd:index/repository:Repository myrepo git@private-git-repository.local:somerepo.git
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enable_lfs: Whether `git-lfs` support should be enabled for this repository.
        :param pulumi.Input[bool] enable_oci: Whether `helm-oci` support should be enabled for this repository.
        :param pulumi.Input[str] githubapp_enterprise_base_url: GitHub API URL for GitHub app authentication.
        :param pulumi.Input[str] githubapp_id: ID of the GitHub app used to access the repo.
        :param pulumi.Input[str] githubapp_installation_id: The installation ID of the GitHub App used to access the repo.
        :param pulumi.Input[str] githubapp_private_key: Private key data (PEM) for authentication via GitHub app.
        :param pulumi.Input[bool] insecure: Whether the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.
        :param pulumi.Input[str] name: Name to be used for this repo. Only used with Helm repos.
        :param pulumi.Input[str] password: Password or PAT used for authenticating at the remote repository.
        :param pulumi.Input[str] project: The project name, in case the repository is project scoped.
        :param pulumi.Input[str] repo: URL of the repository.
        :param pulumi.Input[str] ssh_private_key: PEM data for authenticating at the repo server. Only used with Git repos.
        :param pulumi.Input[str] tls_client_cert_data: TLS client certificate in PEM format for authenticating at the repo server.
        :param pulumi.Input[str] tls_client_cert_key: TLS client certificate private key in PEM format for authenticating at the repo server.
        :param pulumi.Input[str] type: Type of the repo. Can be either `git` or `helm`. `git` is assumed if empty or absent.
        :param pulumi.Input[str] username: Username used for authenticating at the remote repository.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RepositoryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages [repositories](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#repositories) within ArgoCD.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_argocd as argocd

        # Public Helm repository
        public_nginx_helm = argocd.Repository("publicNginxHelm",
            repo="https://helm.nginx.com/stable",
            type="helm")
        # Public Git repository
        public_git = argocd.Repository("publicGit", repo="git@github.com:user/somerepo.git")
        # Private Git repository
        private = argocd.Repository("private",
            insecure=True,
            repo="git@private-git-repository.local:somerepo.git",
            ssh_private_key=\"\"\"-----BEGIN OPENSSH PRIVATE KEY-----
        foo
        bar
        -----END OPENSSH PRIVATE KEY-----
        \"\"\",
            username="git")
        ```

        ## Import

        Repositories can be imported using the repository URL.

         Note: as the ArgoCD API does not return any sensitive information, a

         subsequent `pulumi up` should be executed to make the `password`,

         `ssh_private_key` and `tls_client_cert_key` attributes converge to their

         expected values defined within the plan.

         Example:

        ```sh
        $ pulumi import argocd:index/repository:Repository myrepo git@private-git-repository.local:somerepo.git
        ```

        :param str resource_name: The name of the resource.
        :param RepositoryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RepositoryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_lfs: Optional[pulumi.Input[bool]] = None,
                 enable_oci: Optional[pulumi.Input[bool]] = None,
                 githubapp_enterprise_base_url: Optional[pulumi.Input[str]] = None,
                 githubapp_id: Optional[pulumi.Input[str]] = None,
                 githubapp_installation_id: Optional[pulumi.Input[str]] = None,
                 githubapp_private_key: Optional[pulumi.Input[str]] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 repo: Optional[pulumi.Input[str]] = None,
                 ssh_private_key: Optional[pulumi.Input[str]] = None,
                 tls_client_cert_data: Optional[pulumi.Input[str]] = None,
                 tls_client_cert_key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RepositoryArgs.__new__(RepositoryArgs)

            __props__.__dict__["enable_lfs"] = enable_lfs
            __props__.__dict__["enable_oci"] = enable_oci
            __props__.__dict__["githubapp_enterprise_base_url"] = githubapp_enterprise_base_url
            __props__.__dict__["githubapp_id"] = githubapp_id
            __props__.__dict__["githubapp_installation_id"] = githubapp_installation_id
            __props__.__dict__["githubapp_private_key"] = None if githubapp_private_key is None else pulumi.Output.secret(githubapp_private_key)
            __props__.__dict__["insecure"] = insecure
            __props__.__dict__["name"] = name
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["project"] = project
            if repo is None and not opts.urn:
                raise TypeError("Missing required property 'repo'")
            __props__.__dict__["repo"] = repo
            __props__.__dict__["ssh_private_key"] = None if ssh_private_key is None else pulumi.Output.secret(ssh_private_key)
            __props__.__dict__["tls_client_cert_data"] = tls_client_cert_data
            __props__.__dict__["tls_client_cert_key"] = None if tls_client_cert_key is None else pulumi.Output.secret(tls_client_cert_key)
            __props__.__dict__["type"] = type
            __props__.__dict__["username"] = username
            __props__.__dict__["connection_state_status"] = None
            __props__.__dict__["inherited_creds"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["githubappPrivateKey", "password", "sshPrivateKey", "tlsClientCertKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Repository, __self__).__init__(
            'argocd:index/repository:Repository',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            connection_state_status: Optional[pulumi.Input[str]] = None,
            enable_lfs: Optional[pulumi.Input[bool]] = None,
            enable_oci: Optional[pulumi.Input[bool]] = None,
            githubapp_enterprise_base_url: Optional[pulumi.Input[str]] = None,
            githubapp_id: Optional[pulumi.Input[str]] = None,
            githubapp_installation_id: Optional[pulumi.Input[str]] = None,
            githubapp_private_key: Optional[pulumi.Input[str]] = None,
            inherited_creds: Optional[pulumi.Input[bool]] = None,
            insecure: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None,
            repo: Optional[pulumi.Input[str]] = None,
            ssh_private_key: Optional[pulumi.Input[str]] = None,
            tls_client_cert_data: Optional[pulumi.Input[str]] = None,
            tls_client_cert_key: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None) -> 'Repository':
        """
        Get an existing Repository resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] connection_state_status: Contains information about the current state of connection to the repository server.
        :param pulumi.Input[bool] enable_lfs: Whether `git-lfs` support should be enabled for this repository.
        :param pulumi.Input[bool] enable_oci: Whether `helm-oci` support should be enabled for this repository.
        :param pulumi.Input[str] githubapp_enterprise_base_url: GitHub API URL for GitHub app authentication.
        :param pulumi.Input[str] githubapp_id: ID of the GitHub app used to access the repo.
        :param pulumi.Input[str] githubapp_installation_id: The installation ID of the GitHub App used to access the repo.
        :param pulumi.Input[str] githubapp_private_key: Private key data (PEM) for authentication via GitHub app.
        :param pulumi.Input[bool] inherited_creds: Whether credentials were inherited from a credential set.
        :param pulumi.Input[bool] insecure: Whether the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.
        :param pulumi.Input[str] name: Name to be used for this repo. Only used with Helm repos.
        :param pulumi.Input[str] password: Password or PAT used for authenticating at the remote repository.
        :param pulumi.Input[str] project: The project name, in case the repository is project scoped.
        :param pulumi.Input[str] repo: URL of the repository.
        :param pulumi.Input[str] ssh_private_key: PEM data for authenticating at the repo server. Only used with Git repos.
        :param pulumi.Input[str] tls_client_cert_data: TLS client certificate in PEM format for authenticating at the repo server.
        :param pulumi.Input[str] tls_client_cert_key: TLS client certificate private key in PEM format for authenticating at the repo server.
        :param pulumi.Input[str] type: Type of the repo. Can be either `git` or `helm`. `git` is assumed if empty or absent.
        :param pulumi.Input[str] username: Username used for authenticating at the remote repository.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RepositoryState.__new__(_RepositoryState)

        __props__.__dict__["connection_state_status"] = connection_state_status
        __props__.__dict__["enable_lfs"] = enable_lfs
        __props__.__dict__["enable_oci"] = enable_oci
        __props__.__dict__["githubapp_enterprise_base_url"] = githubapp_enterprise_base_url
        __props__.__dict__["githubapp_id"] = githubapp_id
        __props__.__dict__["githubapp_installation_id"] = githubapp_installation_id
        __props__.__dict__["githubapp_private_key"] = githubapp_private_key
        __props__.__dict__["inherited_creds"] = inherited_creds
        __props__.__dict__["insecure"] = insecure
        __props__.__dict__["name"] = name
        __props__.__dict__["password"] = password
        __props__.__dict__["project"] = project
        __props__.__dict__["repo"] = repo
        __props__.__dict__["ssh_private_key"] = ssh_private_key
        __props__.__dict__["tls_client_cert_data"] = tls_client_cert_data
        __props__.__dict__["tls_client_cert_key"] = tls_client_cert_key
        __props__.__dict__["type"] = type
        __props__.__dict__["username"] = username
        return Repository(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="connectionStateStatus")
    def connection_state_status(self) -> pulumi.Output[str]:
        """
        Contains information about the current state of connection to the repository server.
        """
        return pulumi.get(self, "connection_state_status")

    @property
    @pulumi.getter(name="enableLfs")
    def enable_lfs(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether `git-lfs` support should be enabled for this repository.
        """
        return pulumi.get(self, "enable_lfs")

    @property
    @pulumi.getter(name="enableOci")
    def enable_oci(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether `helm-oci` support should be enabled for this repository.
        """
        return pulumi.get(self, "enable_oci")

    @property
    @pulumi.getter(name="githubappEnterpriseBaseUrl")
    def githubapp_enterprise_base_url(self) -> pulumi.Output[Optional[str]]:
        """
        GitHub API URL for GitHub app authentication.
        """
        return pulumi.get(self, "githubapp_enterprise_base_url")

    @property
    @pulumi.getter(name="githubappId")
    def githubapp_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the GitHub app used to access the repo.
        """
        return pulumi.get(self, "githubapp_id")

    @property
    @pulumi.getter(name="githubappInstallationId")
    def githubapp_installation_id(self) -> pulumi.Output[Optional[str]]:
        """
        The installation ID of the GitHub App used to access the repo.
        """
        return pulumi.get(self, "githubapp_installation_id")

    @property
    @pulumi.getter(name="githubappPrivateKey")
    def githubapp_private_key(self) -> pulumi.Output[Optional[str]]:
        """
        Private key data (PEM) for authentication via GitHub app.
        """
        return pulumi.get(self, "githubapp_private_key")

    @property
    @pulumi.getter(name="inheritedCreds")
    def inherited_creds(self) -> pulumi.Output[bool]:
        """
        Whether credentials were inherited from a credential set.
        """
        return pulumi.get(self, "inherited_creds")

    @property
    @pulumi.getter
    def insecure(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.
        """
        return pulumi.get(self, "insecure")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name to be used for this repo. Only used with Helm repos.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Password or PAT used for authenticating at the remote repository.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[Optional[str]]:
        """
        The project name, in case the repository is project scoped.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def repo(self) -> pulumi.Output[str]:
        """
        URL of the repository.
        """
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter(name="sshPrivateKey")
    def ssh_private_key(self) -> pulumi.Output[Optional[str]]:
        """
        PEM data for authenticating at the repo server. Only used with Git repos.
        """
        return pulumi.get(self, "ssh_private_key")

    @property
    @pulumi.getter(name="tlsClientCertData")
    def tls_client_cert_data(self) -> pulumi.Output[Optional[str]]:
        """
        TLS client certificate in PEM format for authenticating at the repo server.
        """
        return pulumi.get(self, "tls_client_cert_data")

    @property
    @pulumi.getter(name="tlsClientCertKey")
    def tls_client_cert_key(self) -> pulumi.Output[Optional[str]]:
        """
        TLS client certificate private key in PEM format for authenticating at the repo server.
        """
        return pulumi.get(self, "tls_client_cert_key")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        """
        Type of the repo. Can be either `git` or `helm`. `git` is assumed if empty or absent.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[Optional[str]]:
        """
        Username used for authenticating at the remote repository.
        """
        return pulumi.get(self, "username")

