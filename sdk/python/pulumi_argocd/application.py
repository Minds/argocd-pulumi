# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ApplicationArgs', 'Application']

@pulumi.input_type
class ApplicationArgs:
    def __init__(__self__, *,
                 metadata: pulumi.Input['ApplicationMetadataArgs'],
                 spec: pulumi.Input['ApplicationSpecArgs'],
                 cascade: Optional[pulumi.Input[bool]] = None,
                 wait: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Application resource.
        :param pulumi.Input['ApplicationMetadataArgs'] metadata: Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
        :param pulumi.Input['ApplicationSpecArgs'] spec: The application specification.
        :param pulumi.Input[bool] cascade: Whether to applying cascading deletion when application is removed.
        :param pulumi.Input[bool] wait: Upon application creation or update, wait for application health/sync status to be healthy/Synced, upon application
               deletion, wait for application to be removed, when set to true. Wait timeouts are controlled by Terraform Create, Update
               and Delete resource timeouts (all default to 5 minutes). **Note**: if ArgoCD decides not to sync an application (e.g.
               because the project to which the application belongs has a `sync_window` applied) then you will experience an expected
               timeout event if `wait = true`.
        """
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "spec", spec)
        if cascade is not None:
            pulumi.set(__self__, "cascade", cascade)
        if wait is not None:
            pulumi.set(__self__, "wait", wait)

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Input['ApplicationMetadataArgs']:
        """
        Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: pulumi.Input['ApplicationMetadataArgs']):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Input['ApplicationSpecArgs']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: pulumi.Input['ApplicationSpecArgs']):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter
    def cascade(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to applying cascading deletion when application is removed.
        """
        return pulumi.get(self, "cascade")

    @cascade.setter
    def cascade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cascade", value)

    @property
    @pulumi.getter
    def wait(self) -> Optional[pulumi.Input[bool]]:
        """
        Upon application creation or update, wait for application health/sync status to be healthy/Synced, upon application
        deletion, wait for application to be removed, when set to true. Wait timeouts are controlled by Terraform Create, Update
        and Delete resource timeouts (all default to 5 minutes). **Note**: if ArgoCD decides not to sync an application (e.g.
        because the project to which the application belongs has a `sync_window` applied) then you will experience an expected
        timeout event if `wait = true`.
        """
        return pulumi.get(self, "wait")

    @wait.setter
    def wait(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wait", value)


@pulumi.input_type
class _ApplicationState:
    def __init__(__self__, *,
                 cascade: Optional[pulumi.Input[bool]] = None,
                 metadata: Optional[pulumi.Input['ApplicationMetadataArgs']] = None,
                 spec: Optional[pulumi.Input['ApplicationSpecArgs']] = None,
                 statuses: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusArgs']]]] = None,
                 wait: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Application resources.
        :param pulumi.Input[bool] cascade: Whether to applying cascading deletion when application is removed.
        :param pulumi.Input['ApplicationMetadataArgs'] metadata: Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
        :param pulumi.Input['ApplicationSpecArgs'] spec: The application specification.
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationStatusArgs']]] statuses: Status information for the application. **Note**: this is not guaranteed to be up to date immediately after
               creating/updating an application unless `wait=true`.
        :param pulumi.Input[bool] wait: Upon application creation or update, wait for application health/sync status to be healthy/Synced, upon application
               deletion, wait for application to be removed, when set to true. Wait timeouts are controlled by Terraform Create, Update
               and Delete resource timeouts (all default to 5 minutes). **Note**: if ArgoCD decides not to sync an application (e.g.
               because the project to which the application belongs has a `sync_window` applied) then you will experience an expected
               timeout event if `wait = true`.
        """
        if cascade is not None:
            pulumi.set(__self__, "cascade", cascade)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if statuses is not None:
            pulumi.set(__self__, "statuses", statuses)
        if wait is not None:
            pulumi.set(__self__, "wait", wait)

    @property
    @pulumi.getter
    def cascade(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to applying cascading deletion when application is removed.
        """
        return pulumi.get(self, "cascade")

    @cascade.setter
    def cascade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cascade", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ApplicationMetadataArgs']]:
        """
        Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ApplicationMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['ApplicationSpecArgs']]:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['ApplicationSpecArgs']]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter
    def statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusArgs']]]]:
        """
        Status information for the application. **Note**: this is not guaranteed to be up to date immediately after
        creating/updating an application unless `wait=true`.
        """
        return pulumi.get(self, "statuses")

    @statuses.setter
    def statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusArgs']]]]):
        pulumi.set(self, "statuses", value)

    @property
    @pulumi.getter
    def wait(self) -> Optional[pulumi.Input[bool]]:
        """
        Upon application creation or update, wait for application health/sync status to be healthy/Synced, upon application
        deletion, wait for application to be removed, when set to true. Wait timeouts are controlled by Terraform Create, Update
        and Delete resource timeouts (all default to 5 minutes). **Note**: if ArgoCD decides not to sync an application (e.g.
        because the project to which the application belongs has a `sync_window` applied) then you will experience an expected
        timeout event if `wait = true`.
        """
        return pulumi.get(self, "wait")

    @wait.setter
    def wait(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wait", value)


class Application(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cascade: Optional[pulumi.Input[bool]] = None,
                 metadata: Optional[pulumi.Input[pulumi.InputType['ApplicationMetadataArgs']]] = None,
                 spec: Optional[pulumi.Input[pulumi.InputType['ApplicationSpecArgs']]] = None,
                 wait: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Manages [applications](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#applications) within ArgoCD.

        ## Import

        ArgoCD applications can be imported using an id consisting of `{name}:{namespace}`. E.g.

        ```sh
        $ pulumi import argocd:index/application:Application myapp myapp:argocd
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] cascade: Whether to applying cascading deletion when application is removed.
        :param pulumi.Input[pulumi.InputType['ApplicationMetadataArgs']] metadata: Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
        :param pulumi.Input[pulumi.InputType['ApplicationSpecArgs']] spec: The application specification.
        :param pulumi.Input[bool] wait: Upon application creation or update, wait for application health/sync status to be healthy/Synced, upon application
               deletion, wait for application to be removed, when set to true. Wait timeouts are controlled by Terraform Create, Update
               and Delete resource timeouts (all default to 5 minutes). **Note**: if ArgoCD decides not to sync an application (e.g.
               because the project to which the application belongs has a `sync_window` applied) then you will experience an expected
               timeout event if `wait = true`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApplicationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages [applications](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#applications) within ArgoCD.

        ## Import

        ArgoCD applications can be imported using an id consisting of `{name}:{namespace}`. E.g.

        ```sh
        $ pulumi import argocd:index/application:Application myapp myapp:argocd
        ```

        :param str resource_name: The name of the resource.
        :param ApplicationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApplicationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cascade: Optional[pulumi.Input[bool]] = None,
                 metadata: Optional[pulumi.Input[pulumi.InputType['ApplicationMetadataArgs']]] = None,
                 spec: Optional[pulumi.Input[pulumi.InputType['ApplicationSpecArgs']]] = None,
                 wait: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApplicationArgs.__new__(ApplicationArgs)

            __props__.__dict__["cascade"] = cascade
            if metadata is None and not opts.urn:
                raise TypeError("Missing required property 'metadata'")
            __props__.__dict__["metadata"] = metadata
            if spec is None and not opts.urn:
                raise TypeError("Missing required property 'spec'")
            __props__.__dict__["spec"] = spec
            __props__.__dict__["wait"] = wait
            __props__.__dict__["statuses"] = None
        super(Application, __self__).__init__(
            'argocd:index/application:Application',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cascade: Optional[pulumi.Input[bool]] = None,
            metadata: Optional[pulumi.Input[pulumi.InputType['ApplicationMetadataArgs']]] = None,
            spec: Optional[pulumi.Input[pulumi.InputType['ApplicationSpecArgs']]] = None,
            statuses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApplicationStatusArgs']]]]] = None,
            wait: Optional[pulumi.Input[bool]] = None) -> 'Application':
        """
        Get an existing Application resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] cascade: Whether to applying cascading deletion when application is removed.
        :param pulumi.Input[pulumi.InputType['ApplicationMetadataArgs']] metadata: Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
        :param pulumi.Input[pulumi.InputType['ApplicationSpecArgs']] spec: The application specification.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApplicationStatusArgs']]]] statuses: Status information for the application. **Note**: this is not guaranteed to be up to date immediately after
               creating/updating an application unless `wait=true`.
        :param pulumi.Input[bool] wait: Upon application creation or update, wait for application health/sync status to be healthy/Synced, upon application
               deletion, wait for application to be removed, when set to true. Wait timeouts are controlled by Terraform Create, Update
               and Delete resource timeouts (all default to 5 minutes). **Note**: if ArgoCD decides not to sync an application (e.g.
               because the project to which the application belongs has a `sync_window` applied) then you will experience an expected
               timeout event if `wait = true`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApplicationState.__new__(_ApplicationState)

        __props__.__dict__["cascade"] = cascade
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["spec"] = spec
        __props__.__dict__["statuses"] = statuses
        __props__.__dict__["wait"] = wait
        return Application(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def cascade(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to applying cascading deletion when application is removed.
        """
        return pulumi.get(self, "cascade")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output['outputs.ApplicationMetadata']:
        """
        Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Output['outputs.ApplicationSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter
    def statuses(self) -> pulumi.Output[Sequence['outputs.ApplicationStatus']]:
        """
        Status information for the application. **Note**: this is not guaranteed to be up to date immediately after
        creating/updating an application unless `wait=true`.
        """
        return pulumi.get(self, "statuses")

    @property
    @pulumi.getter
    def wait(self) -> pulumi.Output[Optional[bool]]:
        """
        Upon application creation or update, wait for application health/sync status to be healthy/Synced, upon application
        deletion, wait for application to be removed, when set to true. Wait timeouts are controlled by Terraform Create, Update
        and Delete resource timeouts (all default to 5 minutes). **Note**: if ArgoCD decides not to sync an application (e.g.
        because the project to which the application belongs has a `sync_window` applied) then you will experience an expected
        timeout event if `wait = true`.
        """
        return pulumi.get(self, "wait")

