# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'ApplicationMetadata',
    'ApplicationSetMetadata',
    'ApplicationSetSpec',
    'ApplicationSetSpecGenerator',
    'ApplicationSetSpecGeneratorCluster',
    'ApplicationSetSpecGeneratorClusterDecisionResource',
    'ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelector',
    'ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpression',
    'ApplicationSetSpecGeneratorClusterDecisionResourceTemplate',
    'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadata',
    'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec',
    'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestination',
    'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo',
    'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource',
    'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorClusterSelector',
    'ApplicationSetSpecGeneratorClusterSelectorMatchExpression',
    'ApplicationSetSpecGeneratorClusterTemplate',
    'ApplicationSetSpecGeneratorClusterTemplateMetadata',
    'ApplicationSetSpecGeneratorClusterTemplateSpec',
    'ApplicationSetSpecGeneratorClusterTemplateSpecDestination',
    'ApplicationSetSpecGeneratorClusterTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorClusterTemplateSpecInfo',
    'ApplicationSetSpecGeneratorClusterTemplateSpecSource',
    'ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorClusterTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorClusterTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorClusterTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorGit',
    'ApplicationSetSpecGeneratorGitDirectory',
    'ApplicationSetSpecGeneratorGitFile',
    'ApplicationSetSpecGeneratorGitTemplate',
    'ApplicationSetSpecGeneratorGitTemplateMetadata',
    'ApplicationSetSpecGeneratorGitTemplateSpec',
    'ApplicationSetSpecGeneratorGitTemplateSpecDestination',
    'ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorGitTemplateSpecInfo',
    'ApplicationSetSpecGeneratorGitTemplateSpecSource',
    'ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorGitTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorGitTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorList',
    'ApplicationSetSpecGeneratorListTemplate',
    'ApplicationSetSpecGeneratorListTemplateMetadata',
    'ApplicationSetSpecGeneratorListTemplateSpec',
    'ApplicationSetSpecGeneratorListTemplateSpecDestination',
    'ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorListTemplateSpecInfo',
    'ApplicationSetSpecGeneratorListTemplateSpecSource',
    'ApplicationSetSpecGeneratorListTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorListTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorListTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorListTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMatrix',
    'ApplicationSetSpecGeneratorMatrixGenerator',
    'ApplicationSetSpecGeneratorMatrixGeneratorCluster',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResource',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplate',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterSelector',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterSelectorMatchExpression',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplate',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpec',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSource',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMatrixGeneratorGit',
    'ApplicationSetSpecGeneratorMatrixGeneratorGitDirectory',
    'ApplicationSetSpecGeneratorMatrixGeneratorGitFile',
    'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplate',
    'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpec',
    'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSource',
    'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMatrixGeneratorList',
    'ApplicationSetSpecGeneratorMatrixGeneratorListTemplate',
    'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpec',
    'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSource',
    'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrix',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGenerator',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorCluster',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResource',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplate',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterSelector',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterSelectorMatchExpression',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplate',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpec',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSource',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGit',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitDirectory',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitFile',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplate',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpec',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSource',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorList',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplate',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpec',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSource',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequest',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServer',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestFilter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitea',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGiteaTokenRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGithub',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGithubTokenRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitlab',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitlabTokenRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplate',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpec',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSource',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProvider',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderAzureDevops',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketCloud',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServer',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderFilter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitea',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGiteaTokenRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGithub',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGithubTokenRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitlab',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitlabTokenRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplate',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpec',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSource',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorSelector',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorSelectorMatchExpression',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplate',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpec',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSource',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMatrixGeneratorMerge',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGenerator',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorCluster',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResource',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelector',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplate',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterSelector',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterSelectorMatchExpression',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplate',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpec',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSource',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGit',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitDirectory',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitFile',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplate',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpec',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSource',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorList',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplate',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpec',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSource',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequest',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServer',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestFilter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitea',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGiteaTokenRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithub',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubTokenRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitlab',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitlabTokenRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplate',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpec',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSource',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProvider',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderAzureDevops',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketCloud',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServer',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderFilter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitea',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGiteaTokenRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGithub',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGithubTokenRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitlab',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitlabTokenRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplate',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpec',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSource',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorSelector',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorSelectorMatchExpression',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplate',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpec',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSource',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequest',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServer',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestFilter',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitea',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGiteaTokenRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGithub',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGithubTokenRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitlab',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitlabTokenRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplate',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpec',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSource',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProvider',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderAzureDevops',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketCloud',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServer',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderFilter',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitea',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGiteaTokenRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGithub',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGithubTokenRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitlab',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitlabTokenRef',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplate',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpec',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSource',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMatrixGeneratorSelector',
    'ApplicationSetSpecGeneratorMatrixGeneratorSelectorMatchExpression',
    'ApplicationSetSpecGeneratorMatrixTemplate',
    'ApplicationSetSpecGeneratorMatrixTemplateMetadata',
    'ApplicationSetSpecGeneratorMatrixTemplateSpec',
    'ApplicationSetSpecGeneratorMatrixTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMatrixTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMatrixTemplateSpecSource',
    'ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMerge',
    'ApplicationSetSpecGeneratorMergeGenerator',
    'ApplicationSetSpecGeneratorMergeGeneratorCluster',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResource',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceLabelSelector',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplate',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterSelector',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterSelectorMatchExpression',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplate',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpec',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSource',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMergeGeneratorGit',
    'ApplicationSetSpecGeneratorMergeGeneratorGitDirectory',
    'ApplicationSetSpecGeneratorMergeGeneratorGitFile',
    'ApplicationSetSpecGeneratorMergeGeneratorGitTemplate',
    'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpec',
    'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSource',
    'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMergeGeneratorList',
    'ApplicationSetSpecGeneratorMergeGeneratorListTemplate',
    'ApplicationSetSpecGeneratorMergeGeneratorListTemplateMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpec',
    'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSource',
    'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrix',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGenerator',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorCluster',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResource',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplate',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterSelector',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterSelectorMatchExpression',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplate',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpec',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSource',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGit',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitDirectory',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitFile',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplate',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpec',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSource',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorList',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplate',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpec',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSource',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequest',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServer',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestFilter',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitea',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaTokenRef',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGithub',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGithubTokenRef',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitlab',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitlabTokenRef',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplate',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpec',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSource',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProvider',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderAzureDevops',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketCloud',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServer',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderFilter',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitea',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGiteaTokenRef',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGithub',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGithubTokenRef',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlab',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabTokenRef',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplate',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpec',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSource',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorSelector',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorSelectorMatchExpression',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplate',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpec',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSource',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMergeGeneratorMerge',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGenerator',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorCluster',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResource',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceLabelSelector',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplate',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterSelector',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterSelectorMatchExpression',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplate',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpec',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSource',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGit',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitDirectory',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitFile',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplate',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpec',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSource',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorList',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplate',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpec',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSource',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequest',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServer',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestFilter',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitea',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGiteaTokenRef',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGithub',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGithubTokenRef',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitlab',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitlabTokenRef',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplate',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpec',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSource',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProvider',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderAzureDevops',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketCloud',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServer',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderFilter',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitea',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGiteaTokenRef',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGithub',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGithubTokenRef',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitlab',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitlabTokenRef',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplate',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpec',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSource',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorSelector',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorSelectorMatchExpression',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplate',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpec',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSource',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequest',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServer',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestFilter',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitea',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestGiteaTokenRef',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestGithub',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestGithubTokenRef',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitlab',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitlabTokenRef',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplate',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpec',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSource',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProvider',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderAzureDevops',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketCloud',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServer',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderFilter',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitea',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderGiteaTokenRef',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderGithub',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderGithubTokenRef',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitlab',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitlabTokenRef',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplate',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpec',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSource',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorMergeGeneratorSelector',
    'ApplicationSetSpecGeneratorMergeGeneratorSelectorMatchExpression',
    'ApplicationSetSpecGeneratorMergeTemplate',
    'ApplicationSetSpecGeneratorMergeTemplateMetadata',
    'ApplicationSetSpecGeneratorMergeTemplateSpec',
    'ApplicationSetSpecGeneratorMergeTemplateSpecDestination',
    'ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorMergeTemplateSpecInfo',
    'ApplicationSetSpecGeneratorMergeTemplateSpecSource',
    'ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorMergeTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorPullRequest',
    'ApplicationSetSpecGeneratorPullRequestBitbucketServer',
    'ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth',
    'ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef',
    'ApplicationSetSpecGeneratorPullRequestFilter',
    'ApplicationSetSpecGeneratorPullRequestGitea',
    'ApplicationSetSpecGeneratorPullRequestGiteaTokenRef',
    'ApplicationSetSpecGeneratorPullRequestGithub',
    'ApplicationSetSpecGeneratorPullRequestGithubTokenRef',
    'ApplicationSetSpecGeneratorPullRequestGitlab',
    'ApplicationSetSpecGeneratorPullRequestGitlabTokenRef',
    'ApplicationSetSpecGeneratorPullRequestTemplate',
    'ApplicationSetSpecGeneratorPullRequestTemplateMetadata',
    'ApplicationSetSpecGeneratorPullRequestTemplateSpec',
    'ApplicationSetSpecGeneratorPullRequestTemplateSpecDestination',
    'ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo',
    'ApplicationSetSpecGeneratorPullRequestTemplateSpecSource',
    'ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorScmProvider',
    'ApplicationSetSpecGeneratorScmProviderAzureDevops',
    'ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef',
    'ApplicationSetSpecGeneratorScmProviderBitbucketCloud',
    'ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef',
    'ApplicationSetSpecGeneratorScmProviderBitbucketServer',
    'ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth',
    'ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef',
    'ApplicationSetSpecGeneratorScmProviderFilter',
    'ApplicationSetSpecGeneratorScmProviderGitea',
    'ApplicationSetSpecGeneratorScmProviderGiteaTokenRef',
    'ApplicationSetSpecGeneratorScmProviderGithub',
    'ApplicationSetSpecGeneratorScmProviderGithubTokenRef',
    'ApplicationSetSpecGeneratorScmProviderGitlab',
    'ApplicationSetSpecGeneratorScmProviderGitlabTokenRef',
    'ApplicationSetSpecGeneratorScmProviderTemplate',
    'ApplicationSetSpecGeneratorScmProviderTemplateMetadata',
    'ApplicationSetSpecGeneratorScmProviderTemplateSpec',
    'ApplicationSetSpecGeneratorScmProviderTemplateSpecDestination',
    'ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference',
    'ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo',
    'ApplicationSetSpecGeneratorScmProviderTemplateSpecSource',
    'ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectory',
    'ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelm',
    'ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomize',
    'ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePlugin',
    'ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy',
    'ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSetSpecGeneratorSelector',
    'ApplicationSetSpecGeneratorSelectorMatchExpression',
    'ApplicationSetSpecStrategy',
    'ApplicationSetSpecStrategyRollingSync',
    'ApplicationSetSpecStrategyRollingSyncStep',
    'ApplicationSetSpecStrategyRollingSyncStepMatchExpression',
    'ApplicationSetSpecSyncPolicy',
    'ApplicationSetSpecTemplate',
    'ApplicationSetSpecTemplateMetadata',
    'ApplicationSetSpecTemplateSpec',
    'ApplicationSetSpecTemplateSpecDestination',
    'ApplicationSetSpecTemplateSpecIgnoreDifference',
    'ApplicationSetSpecTemplateSpecInfo',
    'ApplicationSetSpecTemplateSpecSource',
    'ApplicationSetSpecTemplateSpecSourceDirectory',
    'ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet',
    'ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla',
    'ApplicationSetSpecTemplateSpecSourceHelm',
    'ApplicationSetSpecTemplateSpecSourceHelmFileParameter',
    'ApplicationSetSpecTemplateSpecSourceHelmParameter',
    'ApplicationSetSpecTemplateSpecSourceKustomize',
    'ApplicationSetSpecTemplateSpecSourcePlugin',
    'ApplicationSetSpecTemplateSpecSourcePluginEnv',
    'ApplicationSetSpecTemplateSpecSyncPolicy',
    'ApplicationSetSpecTemplateSpecSyncPolicyAutomated',
    'ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSetSpecTemplateSpecSyncPolicyRetry',
    'ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff',
    'ApplicationSpec',
    'ApplicationSpecDestination',
    'ApplicationSpecIgnoreDifference',
    'ApplicationSpecInfo',
    'ApplicationSpecSource',
    'ApplicationSpecSourceDirectory',
    'ApplicationSpecSourceDirectoryJsonnet',
    'ApplicationSpecSourceDirectoryJsonnetExtVar',
    'ApplicationSpecSourceDirectoryJsonnetTla',
    'ApplicationSpecSourceHelm',
    'ApplicationSpecSourceHelmFileParameter',
    'ApplicationSpecSourceHelmParameter',
    'ApplicationSpecSourceKustomize',
    'ApplicationSpecSourcePlugin',
    'ApplicationSpecSourcePluginEnv',
    'ApplicationSpecSyncPolicy',
    'ApplicationSpecSyncPolicyAutomated',
    'ApplicationSpecSyncPolicyManagedNamespaceMetadata',
    'ApplicationSpecSyncPolicyRetry',
    'ApplicationSpecSyncPolicyRetryBackoff',
    'ApplicationStatus',
    'ApplicationStatusCondition',
    'ApplicationStatusHealth',
    'ApplicationStatusOperationState',
    'ApplicationStatusResource',
    'ApplicationStatusResourceHealth',
    'ApplicationStatusSummary',
    'ApplicationStatusSync',
    'ClusterConfig',
    'ClusterConfigAwsAuthConfig',
    'ClusterConfigExecProviderConfig',
    'ClusterConfigTlsClientConfig',
    'ClusterInfo',
    'ClusterInfoConnectionState',
    'ClusterMetadata',
    'ProjectMetadata',
    'ProjectSpec',
    'ProjectSpecClusterResourceBlacklist',
    'ProjectSpecClusterResourceWhitelist',
    'ProjectSpecDestination',
    'ProjectSpecNamespaceResourceBlacklist',
    'ProjectSpecNamespaceResourceWhitelist',
    'ProjectSpecOrphanedResources',
    'ProjectSpecOrphanedResourcesIgnore',
    'ProjectSpecRole',
    'ProjectSpecSyncWindow',
    'RepositoryCertificateHttps',
    'RepositoryCertificateSsh',
]

@pulumi.output_type
class ApplicationMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceVersion":
            suggest = "resource_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 generation: Optional[int] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 resource_version: Optional[str] = None,
                 uid: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applications.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param int generation: A sequence number representing a specific generation of the desired state.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applications.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applications.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applications.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str resource_version: An opaque value that represents the internal version of this applications.argoproj.io that can be used by clients to determine when applications.argoproj.io has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        :param str uid: The unique in time and space value for this applications.argoproj.io. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if generation is not None:
            pulumi.set(__self__, "generation", generation)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applications.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def generation(self) -> Optional[int]:
        """
        A sequence number representing a specific generation of the desired state.
        """
        return pulumi.get(self, "generation")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applications.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applications.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applications.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[str]:
        """
        An opaque value that represents the internal version of this applications.argoproj.io that can be used by clients to determine when applications.argoproj.io has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        return pulumi.get(self, "resource_version")

    @property
    @pulumi.getter
    def uid(self) -> Optional[str]:
        """
        The unique in time and space value for this applications.argoproj.io. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
        """
        return pulumi.get(self, "uid")


@pulumi.output_type
class ApplicationSetMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceVersion":
            suggest = "resource_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 generation: Optional[int] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 resource_version: Optional[str] = None,
                 uid: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param int generation: A sequence number representing a specific generation of the desired state.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str resource_version: An opaque value that represents the internal version of this applicationsets.argoproj.io that can be used by clients to determine when applicationsets.argoproj.io has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        :param str uid: The unique in time and space value for this applicationsets.argoproj.io. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if generation is not None:
            pulumi.set(__self__, "generation", generation)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def generation(self) -> Optional[int]:
        """
        A sequence number representing a specific generation of the desired state.
        """
        return pulumi.get(self, "generation")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[str]:
        """
        An opaque value that represents the internal version of this applicationsets.argoproj.io that can be used by clients to determine when applicationsets.argoproj.io has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        return pulumi.get(self, "resource_version")

    @property
    @pulumi.getter
    def uid(self) -> Optional[str]:
        """
        The unique in time and space value for this applicationsets.argoproj.io. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
        """
        return pulumi.get(self, "uid")


@pulumi.output_type
class ApplicationSetSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "goTemplate":
            suggest = "go_template"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 generators: Sequence['outputs.ApplicationSetSpecGenerator'],
                 template: 'outputs.ApplicationSetSpecTemplate',
                 go_template: Optional[bool] = None,
                 strategy: Optional['outputs.ApplicationSetSpecStrategy'] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecSyncPolicy'] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorArgs'] generators: Application set generators. Generators are responsible for generating parameters, which are then rendered into the template: fields of the ApplicationSet resource.
        :param 'ApplicationSetSpecTemplateArgs' template: Application set template. The template fields of the ApplicationSet spec are used to generate Argo CD Application resources.
        :param bool go_template: Enable use of [Go Text Template](https://pkg.go.dev/text/template).
        :param 'ApplicationSetSpecStrategyArgs' strategy: [Progressive Sync](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Progressive-Syncs/) strategy
        :param 'ApplicationSetSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        pulumi.set(__self__, "generators", generators)
        pulumi.set(__self__, "template", template)
        if go_template is not None:
            pulumi.set(__self__, "go_template", go_template)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def generators(self) -> Sequence['outputs.ApplicationSetSpecGenerator']:
        """
        Application set generators. Generators are responsible for generating parameters, which are then rendered into the template: fields of the ApplicationSet resource.
        """
        return pulumi.get(self, "generators")

    @property
    @pulumi.getter
    def template(self) -> 'outputs.ApplicationSetSpecTemplate':
        """
        Application set template. The template fields of the ApplicationSet spec are used to generate Argo CD Application resources.
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="goTemplate")
    def go_template(self) -> Optional[bool]:
        """
        Enable use of [Go Text Template](https://pkg.go.dev/text/template).
        """
        return pulumi.get(self, "go_template")

    @property
    @pulumi.getter
    def strategy(self) -> Optional['outputs.ApplicationSetSpecStrategy']:
        """
        [Progressive Sync](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Progressive-Syncs/) strategy
        """
        return pulumi.get(self, "strategy")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGenerator(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterDecisionResources":
            suggest = "cluster_decision_resources"
        elif key == "pullRequests":
            suggest = "pull_requests"
        elif key == "scmProviders":
            suggest = "scm_providers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGenerator. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGenerator.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGenerator.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_decision_resources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterDecisionResource']] = None,
                 clusters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorCluster']] = None,
                 gits: Optional[Sequence['outputs.ApplicationSetSpecGeneratorGit']] = None,
                 lists: Optional[Sequence['outputs.ApplicationSetSpecGeneratorList']] = None,
                 matrices: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrix']] = None,
                 merges: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMerge']] = None,
                 pull_requests: Optional[Sequence['outputs.ApplicationSetSpecGeneratorPullRequest']] = None,
                 scm_providers: Optional[Sequence['outputs.ApplicationSetSpecGeneratorScmProvider']] = None,
                 selector: Optional['outputs.ApplicationSetSpecGeneratorSelector'] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorClusterDecisionResourceArgs'] cluster_decision_resources: The [cluster decision resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/) generates a list of Argo CD clusters.
        :param Sequence['ApplicationSetSpecGeneratorClusterArgs'] clusters: The [cluster generator](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/) produces parameters based on the list of items found within the cluster secret.
        :param Sequence['ApplicationSetSpecGeneratorGitArgs'] gits: [Git generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/) generates parameters using either the directory structure of a specified Git repository (directory generator), or, using the contents of JSON/YAML files found within a specified repository (file generator).
        :param Sequence['ApplicationSetSpecGeneratorListArgs'] lists: [List generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/) generate parameters based on an arbitrary list of key/value pairs (as long as the values are string values).
        :param Sequence['ApplicationSetSpecGeneratorMatrixArgs'] matrices: [Matrix generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix/) combine the parameters generated by two child generators, iterating through every combination of each generator's generated parameters. Take note of the [restrictions](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix/#restrictions) regarding their usage - particularly regarding nesting matrix generators.
        :param Sequence['ApplicationSetSpecGeneratorMergeArgs'] merges: [Merge generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge/) combine parameters produced by the base (first) generator with matching parameter sets produced by subsequent generators. Take note of the [restrictions](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge/#restrictions) regarding their usage - particularly regarding nesting merge generators.
        :param Sequence['ApplicationSetSpecGeneratorPullRequestArgs'] pull_requests: [Pull Request generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/) uses the API of an SCMaaS provider to automatically discover open pull requests within a repository.
        :param Sequence['ApplicationSetSpecGeneratorScmProviderArgs'] scm_providers: [SCM Provider generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/) uses the API of an SCMaaS provider to automatically discover repositories within an organization.
        :param 'ApplicationSetSpecGeneratorSelectorArgs' selector: Label selector used to narrow the scope of targeted clusters.
        """
        if cluster_decision_resources is not None:
            pulumi.set(__self__, "cluster_decision_resources", cluster_decision_resources)
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if gits is not None:
            pulumi.set(__self__, "gits", gits)
        if lists is not None:
            pulumi.set(__self__, "lists", lists)
        if matrices is not None:
            pulumi.set(__self__, "matrices", matrices)
        if merges is not None:
            pulumi.set(__self__, "merges", merges)
        if pull_requests is not None:
            pulumi.set(__self__, "pull_requests", pull_requests)
        if scm_providers is not None:
            pulumi.set(__self__, "scm_providers", scm_providers)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter(name="clusterDecisionResources")
    def cluster_decision_resources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterDecisionResource']]:
        """
        The [cluster decision resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/) generates a list of Argo CD clusters.
        """
        return pulumi.get(self, "cluster_decision_resources")

    @property
    @pulumi.getter
    def clusters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorCluster']]:
        """
        The [cluster generator](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/) produces parameters based on the list of items found within the cluster secret.
        """
        return pulumi.get(self, "clusters")

    @property
    @pulumi.getter
    def gits(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorGit']]:
        """
        [Git generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/) generates parameters using either the directory structure of a specified Git repository (directory generator), or, using the contents of JSON/YAML files found within a specified repository (file generator).
        """
        return pulumi.get(self, "gits")

    @property
    @pulumi.getter
    def lists(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorList']]:
        """
        [List generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/) generate parameters based on an arbitrary list of key/value pairs (as long as the values are string values).
        """
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter
    def matrices(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrix']]:
        """
        [Matrix generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix/) combine the parameters generated by two child generators, iterating through every combination of each generator's generated parameters. Take note of the [restrictions](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix/#restrictions) regarding their usage - particularly regarding nesting matrix generators.
        """
        return pulumi.get(self, "matrices")

    @property
    @pulumi.getter
    def merges(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMerge']]:
        """
        [Merge generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge/) combine parameters produced by the base (first) generator with matching parameter sets produced by subsequent generators. Take note of the [restrictions](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge/#restrictions) regarding their usage - particularly regarding nesting merge generators.
        """
        return pulumi.get(self, "merges")

    @property
    @pulumi.getter(name="pullRequests")
    def pull_requests(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorPullRequest']]:
        """
        [Pull Request generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/) uses the API of an SCMaaS provider to automatically discover open pull requests within a repository.
        """
        return pulumi.get(self, "pull_requests")

    @property
    @pulumi.getter(name="scmProviders")
    def scm_providers(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorScmProvider']]:
        """
        [SCM Provider generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/) uses the API of an SCMaaS provider to automatically discover repositories within an organization.
        """
        return pulumi.get(self, "scm_providers")

    @property
    @pulumi.getter
    def selector(self) -> Optional['outputs.ApplicationSetSpecGeneratorSelector']:
        """
        Label selector used to narrow the scope of targeted clusters.
        """
        return pulumi.get(self, "selector")


@pulumi.output_type
class ApplicationSetSpecGeneratorCluster(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 selector: Optional['outputs.ApplicationSetSpecGeneratorClusterSelector'] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorClusterTemplate'] = None,
                 values: Optional[Mapping[str, str]] = None):
        """
        :param bool enabled: Boolean value defaulting to `true` to indicate that this block has been added thereby allowing all other attributes to be optional.
        :param 'ApplicationSetSpecGeneratorClusterSelectorArgs' selector: Label selector used to narrow the scope of targeted clusters.
        :param 'ApplicationSetSpecGeneratorClusterTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        :param Mapping[str, str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "enabled", enabled)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Boolean value defaulting to `true` to indicate that this block has been added thereby allowing all other attributes to be optional.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def selector(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterSelector']:
        """
        Label selector used to narrow the scope of targeted clusters.
        """
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter
    def values(self) -> Optional[Mapping[str, str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterDecisionResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configMapRef":
            suggest = "config_map_ref"
        elif key == "labelSelector":
            suggest = "label_selector"
        elif key == "requeueAfterSeconds":
            suggest = "requeue_after_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorClusterDecisionResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorClusterDecisionResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorClusterDecisionResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_map_ref: str,
                 label_selector: Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelector'] = None,
                 name: Optional[str] = None,
                 requeue_after_seconds: Optional[str] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplate'] = None,
                 values: Optional[Mapping[str, str]] = None):
        """
        :param str config_map_ref: ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.
        :param 'ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorArgs' label_selector: Label selector used to find the resource defined in the `config_map_ref`. Alternative to `name`.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str requeue_after_seconds: How often to check for changes (in seconds). Default: 3min.
        :param 'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        :param Mapping[str, str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "config_map_ref", config_map_ref)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if requeue_after_seconds is not None:
            pulumi.set(__self__, "requeue_after_seconds", requeue_after_seconds)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> str:
        """
        ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.
        """
        return pulumi.get(self, "config_map_ref")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelector']:
        """
        Label selector used to find the resource defined in the `config_map_ref`. Alternative to `name`.
        """
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="requeueAfterSeconds")
    def requeue_after_seconds(self) -> Optional[str]:
        """
        How often to check for changes (in seconds). Default: 3min.
        """
        return pulumi.get(self, "requeue_after_seconds")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter
    def values(self) -> Optional[Mapping[str, str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressionArgs'] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, Any] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpression']]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str key: The label key that the selector applies to.
        :param str operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param Sequence[str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorClusterSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorClusterSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorClusterSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorClusterSelectorMatchExpressionArgs'] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, Any] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterSelectorMatchExpression']]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str key: The label key that the selector applies to.
        :param str operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param Sequence[str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorClusterTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorClusterTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorClusterTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorClusterTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorClusterTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorClusterTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorClusterTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorClusterTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorClusterTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorClusterTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorClusterTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorClusterTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorClusterTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorClusterTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorClusterTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorClusterTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorClusterTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorClusterTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorClusterTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorClusterTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorClusterTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorClusterTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorClusterTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorGit(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "pathParamPrefix":
            suggest = "path_param_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorGit. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorGit.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorGit.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repo_url: str,
                 directories: Optional[Sequence['outputs.ApplicationSetSpecGeneratorGitDirectory']] = None,
                 files: Optional[Sequence['outputs.ApplicationSetSpecGeneratorGitFile']] = None,
                 path_param_prefix: Optional[str] = None,
                 revision: Optional[str] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorGitTemplate'] = None):
        """
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param Sequence['ApplicationSetSpecGeneratorGitDirectoryArgs'] directories: Path/directory specific options.
        :param Sequence['ApplicationSetSpecGeneratorGitFileArgs'] files: List of files in the source repository to use when template the Application.
        :param str path_param_prefix: Prefix for all path-related parameter names.
        :param str revision: Revision of the source repository to use.
        :param 'ApplicationSetSpecGeneratorGitTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        pulumi.set(__self__, "repo_url", repo_url)
        if directories is not None:
            pulumi.set(__self__, "directories", directories)
        if files is not None:
            pulumi.set(__self__, "files", files)
        if path_param_prefix is not None:
            pulumi.set(__self__, "path_param_prefix", path_param_prefix)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> str:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter
    def directories(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorGitDirectory']]:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directories")

    @property
    @pulumi.getter
    def files(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorGitFile']]:
        """
        List of files in the source repository to use when template the Application.
        """
        return pulumi.get(self, "files")

    @property
    @pulumi.getter(name="pathParamPrefix")
    def path_param_prefix(self) -> Optional[str]:
        """
        Prefix for all path-related parameter names.
        """
        return pulumi.get(self, "path_param_prefix")

    @property
    @pulumi.getter
    def revision(self) -> Optional[str]:
        """
        Revision of the source repository to use.
        """
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorGitTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorGitDirectory(dict):
    def __init__(__self__, *,
                 path: str,
                 exclude: Optional[bool] = None):
        """
        :param str path: Path to the file containing the values for the Helm parameter.
        :param bool exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        pulumi.set(__self__, "path", path)
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def exclude(self) -> Optional[bool]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")


@pulumi.output_type
class ApplicationSetSpecGeneratorGitFile(dict):
    def __init__(__self__, *,
                 path: str):
        """
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorGitTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorGitTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorGitTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorGitTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorGitTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorGitTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorGitTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorGitTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorGitTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorGitTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorGitTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorGitTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorGitTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorGitTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorGitTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorGitTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorGitTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorGitTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorGitTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorGitTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorGitTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorGitTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorGitTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorGitTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorGitTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorGitTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorGitTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorGitTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorGitTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorGitTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorList(dict):
    def __init__(__self__, *,
                 elements: Sequence[Mapping[str, str]],
                 template: Optional['outputs.ApplicationSetSpecGeneratorListTemplate'] = None):
        """
        :param Sequence[Mapping[str, str]] elements: List of key/value pairs to pass as parameters into the template
        :param 'ApplicationSetSpecGeneratorListTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        pulumi.set(__self__, "elements", elements)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter
    def elements(self) -> Sequence[Mapping[str, str]]:
        """
        List of key/value pairs to pass as parameters into the template
        """
        return pulumi.get(self, "elements")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorListTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorListTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorListTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorListTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorListTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorListTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorListTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorListTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorListTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorListTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorListTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorListTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorListTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorListTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorListTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorListTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorListTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorListTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorListTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorListTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorListTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorListTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorListTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorListTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorListTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorListTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorListTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorListTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorListTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorListTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorListTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorListTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorListTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorListTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorListTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorListTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorListTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorListTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorListTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorListTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorListTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorListTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorListTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorListTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorListTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorListTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorListTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorListTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorListTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrix(dict):
    def __init__(__self__, *,
                 generators: Sequence['outputs.ApplicationSetSpecGeneratorMatrixGenerator'],
                 template: Optional['outputs.ApplicationSetSpecGeneratorMatrixTemplate'] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorArgs'] generators: Application set generators. Generators are responsible for generating parameters, which are then rendered into the template: fields of the ApplicationSet resource.
        :param 'ApplicationSetSpecGeneratorMatrixTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        pulumi.set(__self__, "generators", generators)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter
    def generators(self) -> Sequence['outputs.ApplicationSetSpecGeneratorMatrixGenerator']:
        """
        Application set generators. Generators are responsible for generating parameters, which are then rendered into the template: fields of the ApplicationSet resource.
        """
        return pulumi.get(self, "generators")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGenerator(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterDecisionResources":
            suggest = "cluster_decision_resources"
        elif key == "pullRequests":
            suggest = "pull_requests"
        elif key == "scmProviders":
            suggest = "scm_providers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGenerator. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGenerator.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGenerator.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_decision_resources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResource']] = None,
                 clusters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorCluster']] = None,
                 gits: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGit']] = None,
                 lists: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorList']] = None,
                 matrices: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrix']] = None,
                 merges: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMerge']] = None,
                 pull_requests: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequest']] = None,
                 scm_providers: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProvider']] = None,
                 selector: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorSelector'] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceArgs'] cluster_decision_resources: The [cluster decision resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/) generates a list of Argo CD clusters.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorClusterArgs'] clusters: The [cluster generator](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/) produces parameters based on the list of items found within the cluster secret.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorGitArgs'] gits: [Git generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/) generates parameters using either the directory structure of a specified Git repository (directory generator), or, using the contents of JSON/YAML files found within a specified repository (file generator).
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorListArgs'] lists: [List generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/) generate parameters based on an arbitrary list of key/value pairs (as long as the values are string values).
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixArgs'] matrices: [Matrix generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix/) combine the parameters generated by two child generators, iterating through every combination of each generator's generated parameters. Take note of the [restrictions](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix/#restrictions) regarding their usage - particularly regarding nesting matrix generators.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeArgs'] merges: [Merge generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge/) combine parameters produced by the base (first) generator with matching parameter sets produced by subsequent generators. Take note of the [restrictions](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge/#restrictions) regarding their usage - particularly regarding nesting merge generators.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorPullRequestArgs'] pull_requests: [Pull Request generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/) uses the API of an SCMaaS provider to automatically discover open pull requests within a repository.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorScmProviderArgs'] scm_providers: [SCM Provider generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/) uses the API of an SCMaaS provider to automatically discover repositories within an organization.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorSelectorArgs' selector: Label selector used to narrow the scope of targeted clusters.
        """
        if cluster_decision_resources is not None:
            pulumi.set(__self__, "cluster_decision_resources", cluster_decision_resources)
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if gits is not None:
            pulumi.set(__self__, "gits", gits)
        if lists is not None:
            pulumi.set(__self__, "lists", lists)
        if matrices is not None:
            pulumi.set(__self__, "matrices", matrices)
        if merges is not None:
            pulumi.set(__self__, "merges", merges)
        if pull_requests is not None:
            pulumi.set(__self__, "pull_requests", pull_requests)
        if scm_providers is not None:
            pulumi.set(__self__, "scm_providers", scm_providers)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter(name="clusterDecisionResources")
    def cluster_decision_resources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResource']]:
        """
        The [cluster decision resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/) generates a list of Argo CD clusters.
        """
        return pulumi.get(self, "cluster_decision_resources")

    @property
    @pulumi.getter
    def clusters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorCluster']]:
        """
        The [cluster generator](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/) produces parameters based on the list of items found within the cluster secret.
        """
        return pulumi.get(self, "clusters")

    @property
    @pulumi.getter
    def gits(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGit']]:
        """
        [Git generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/) generates parameters using either the directory structure of a specified Git repository (directory generator), or, using the contents of JSON/YAML files found within a specified repository (file generator).
        """
        return pulumi.get(self, "gits")

    @property
    @pulumi.getter
    def lists(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorList']]:
        """
        [List generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/) generate parameters based on an arbitrary list of key/value pairs (as long as the values are string values).
        """
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter
    def matrices(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrix']]:
        """
        [Matrix generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix/) combine the parameters generated by two child generators, iterating through every combination of each generator's generated parameters. Take note of the [restrictions](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix/#restrictions) regarding their usage - particularly regarding nesting matrix generators.
        """
        return pulumi.get(self, "matrices")

    @property
    @pulumi.getter
    def merges(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMerge']]:
        """
        [Merge generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge/) combine parameters produced by the base (first) generator with matching parameter sets produced by subsequent generators. Take note of the [restrictions](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge/#restrictions) regarding their usage - particularly regarding nesting merge generators.
        """
        return pulumi.get(self, "merges")

    @property
    @pulumi.getter(name="pullRequests")
    def pull_requests(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequest']]:
        """
        [Pull Request generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/) uses the API of an SCMaaS provider to automatically discover open pull requests within a repository.
        """
        return pulumi.get(self, "pull_requests")

    @property
    @pulumi.getter(name="scmProviders")
    def scm_providers(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProvider']]:
        """
        [SCM Provider generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/) uses the API of an SCMaaS provider to automatically discover repositories within an organization.
        """
        return pulumi.get(self, "scm_providers")

    @property
    @pulumi.getter
    def selector(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorSelector']:
        """
        Label selector used to narrow the scope of targeted clusters.
        """
        return pulumi.get(self, "selector")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorCluster(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 selector: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterSelector'] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplate'] = None,
                 values: Optional[Mapping[str, str]] = None):
        """
        :param bool enabled: Boolean value defaulting to `true` to indicate that this block has been added thereby allowing all other attributes to be optional.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterSelectorArgs' selector: Label selector used to narrow the scope of targeted clusters.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        :param Mapping[str, str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "enabled", enabled)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Boolean value defaulting to `true` to indicate that this block has been added thereby allowing all other attributes to be optional.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def selector(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterSelector']:
        """
        Label selector used to narrow the scope of targeted clusters.
        """
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter
    def values(self) -> Optional[Mapping[str, str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configMapRef":
            suggest = "config_map_ref"
        elif key == "labelSelector":
            suggest = "label_selector"
        elif key == "requeueAfterSeconds":
            suggest = "requeue_after_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_map_ref: str,
                 label_selector: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector'] = None,
                 name: Optional[str] = None,
                 requeue_after_seconds: Optional[str] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplate'] = None,
                 values: Optional[Mapping[str, str]] = None):
        """
        :param str config_map_ref: ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorArgs' label_selector: Label selector used to find the resource defined in the `config_map_ref`. Alternative to `name`.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str requeue_after_seconds: How often to check for changes (in seconds). Default: 3min.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        :param Mapping[str, str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "config_map_ref", config_map_ref)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if requeue_after_seconds is not None:
            pulumi.set(__self__, "requeue_after_seconds", requeue_after_seconds)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> str:
        """
        ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.
        """
        return pulumi.get(self, "config_map_ref")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector']:
        """
        Label selector used to find the resource defined in the `config_map_ref`. Alternative to `name`.
        """
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="requeueAfterSeconds")
    def requeue_after_seconds(self) -> Optional[str]:
        """
        How often to check for changes (in seconds). Default: 3min.
        """
        return pulumi.get(self, "requeue_after_seconds")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter
    def values(self) -> Optional[Mapping[str, str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpressionArgs'] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, Any] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression']]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str key: The label key that the selector applies to.
        :param str operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param Sequence[str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorClusterSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorClusterSelectorMatchExpressionArgs'] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, Any] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterSelectorMatchExpression']]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str key: The label key that the selector applies to.
        :param str operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param Sequence[str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorGit(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "pathParamPrefix":
            suggest = "path_param_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorGit. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorGit.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorGit.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repo_url: str,
                 directories: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitDirectory']] = None,
                 files: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitFile']] = None,
                 path_param_prefix: Optional[str] = None,
                 revision: Optional[str] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplate'] = None):
        """
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorGitDirectoryArgs'] directories: Path/directory specific options.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorGitFileArgs'] files: List of files in the source repository to use when template the Application.
        :param str path_param_prefix: Prefix for all path-related parameter names.
        :param str revision: Revision of the source repository to use.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        pulumi.set(__self__, "repo_url", repo_url)
        if directories is not None:
            pulumi.set(__self__, "directories", directories)
        if files is not None:
            pulumi.set(__self__, "files", files)
        if path_param_prefix is not None:
            pulumi.set(__self__, "path_param_prefix", path_param_prefix)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> str:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter
    def directories(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitDirectory']]:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directories")

    @property
    @pulumi.getter
    def files(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitFile']]:
        """
        List of files in the source repository to use when template the Application.
        """
        return pulumi.get(self, "files")

    @property
    @pulumi.getter(name="pathParamPrefix")
    def path_param_prefix(self) -> Optional[str]:
        """
        Prefix for all path-related parameter names.
        """
        return pulumi.get(self, "path_param_prefix")

    @property
    @pulumi.getter
    def revision(self) -> Optional[str]:
        """
        Revision of the source repository to use.
        """
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorGitDirectory(dict):
    def __init__(__self__, *,
                 path: str,
                 exclude: Optional[bool] = None):
        """
        :param str path: Path to the file containing the values for the Helm parameter.
        :param bool exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        pulumi.set(__self__, "path", path)
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def exclude(self) -> Optional[bool]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorGitFile(dict):
    def __init__(__self__, *,
                 path: str):
        """
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorGitTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorList(dict):
    def __init__(__self__, *,
                 elements: Sequence[Mapping[str, str]],
                 template: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplate'] = None):
        """
        :param Sequence[Mapping[str, str]] elements: List of key/value pairs to pass as parameters into the template
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        pulumi.set(__self__, "elements", elements)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter
    def elements(self) -> Sequence[Mapping[str, str]]:
        """
        List of key/value pairs to pass as parameters into the template
        """
        return pulumi.get(self, "elements")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorListTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorListTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrix(dict):
    def __init__(__self__, *,
                 generators: Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGenerator'],
                 template: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplate'] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorArgs'] generators: Application set generators. Generators are responsible for generating parameters, which are then rendered into the template: fields of the ApplicationSet resource.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        pulumi.set(__self__, "generators", generators)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter
    def generators(self) -> Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGenerator']:
        """
        Application set generators. Generators are responsible for generating parameters, which are then rendered into the template: fields of the ApplicationSet resource.
        """
        return pulumi.get(self, "generators")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGenerator(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterDecisionResources":
            suggest = "cluster_decision_resources"
        elif key == "pullRequests":
            suggest = "pull_requests"
        elif key == "scmProviders":
            suggest = "scm_providers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGenerator. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGenerator.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGenerator.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_decision_resources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResource']] = None,
                 clusters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorCluster']] = None,
                 gits: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGit']] = None,
                 lists: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorList']] = None,
                 pull_requests: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequest']] = None,
                 scm_providers: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProvider']] = None,
                 selector: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorSelector'] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceArgs'] cluster_decision_resources: The [cluster decision resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/) generates a list of Argo CD clusters.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterArgs'] clusters: The [cluster generator](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/) produces parameters based on the list of items found within the cluster secret.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitArgs'] gits: [Git generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/) generates parameters using either the directory structure of a specified Git repository (directory generator), or, using the contents of JSON/YAML files found within a specified repository (file generator).
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListArgs'] lists: [List generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/) generate parameters based on an arbitrary list of key/value pairs (as long as the values are string values).
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestArgs'] pull_requests: [Pull Request generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/) uses the API of an SCMaaS provider to automatically discover open pull requests within a repository.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderArgs'] scm_providers: [SCM Provider generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/) uses the API of an SCMaaS provider to automatically discover repositories within an organization.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorSelectorArgs' selector: Label selector used to narrow the scope of targeted clusters.
        """
        if cluster_decision_resources is not None:
            pulumi.set(__self__, "cluster_decision_resources", cluster_decision_resources)
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if gits is not None:
            pulumi.set(__self__, "gits", gits)
        if lists is not None:
            pulumi.set(__self__, "lists", lists)
        if pull_requests is not None:
            pulumi.set(__self__, "pull_requests", pull_requests)
        if scm_providers is not None:
            pulumi.set(__self__, "scm_providers", scm_providers)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter(name="clusterDecisionResources")
    def cluster_decision_resources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResource']]:
        """
        The [cluster decision resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/) generates a list of Argo CD clusters.
        """
        return pulumi.get(self, "cluster_decision_resources")

    @property
    @pulumi.getter
    def clusters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorCluster']]:
        """
        The [cluster generator](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/) produces parameters based on the list of items found within the cluster secret.
        """
        return pulumi.get(self, "clusters")

    @property
    @pulumi.getter
    def gits(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGit']]:
        """
        [Git generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/) generates parameters using either the directory structure of a specified Git repository (directory generator), or, using the contents of JSON/YAML files found within a specified repository (file generator).
        """
        return pulumi.get(self, "gits")

    @property
    @pulumi.getter
    def lists(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorList']]:
        """
        [List generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/) generate parameters based on an arbitrary list of key/value pairs (as long as the values are string values).
        """
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter(name="pullRequests")
    def pull_requests(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequest']]:
        """
        [Pull Request generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/) uses the API of an SCMaaS provider to automatically discover open pull requests within a repository.
        """
        return pulumi.get(self, "pull_requests")

    @property
    @pulumi.getter(name="scmProviders")
    def scm_providers(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProvider']]:
        """
        [SCM Provider generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/) uses the API of an SCMaaS provider to automatically discover repositories within an organization.
        """
        return pulumi.get(self, "scm_providers")

    @property
    @pulumi.getter
    def selector(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorSelector']:
        """
        Label selector used to narrow the scope of targeted clusters.
        """
        return pulumi.get(self, "selector")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorCluster(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 selector: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterSelector'] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplate'] = None,
                 values: Optional[Mapping[str, str]] = None):
        """
        :param bool enabled: Boolean value defaulting to `true` to indicate that this block has been added thereby allowing all other attributes to be optional.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterSelectorArgs' selector: Label selector used to narrow the scope of targeted clusters.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        :param Mapping[str, str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "enabled", enabled)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Boolean value defaulting to `true` to indicate that this block has been added thereby allowing all other attributes to be optional.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def selector(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterSelector']:
        """
        Label selector used to narrow the scope of targeted clusters.
        """
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter
    def values(self) -> Optional[Mapping[str, str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configMapRef":
            suggest = "config_map_ref"
        elif key == "labelSelector":
            suggest = "label_selector"
        elif key == "requeueAfterSeconds":
            suggest = "requeue_after_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_map_ref: str,
                 label_selector: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector'] = None,
                 name: Optional[str] = None,
                 requeue_after_seconds: Optional[str] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplate'] = None,
                 values: Optional[Mapping[str, str]] = None):
        """
        :param str config_map_ref: ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorArgs' label_selector: Label selector used to find the resource defined in the `config_map_ref`. Alternative to `name`.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str requeue_after_seconds: How often to check for changes (in seconds). Default: 3min.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        :param Mapping[str, str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "config_map_ref", config_map_ref)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if requeue_after_seconds is not None:
            pulumi.set(__self__, "requeue_after_seconds", requeue_after_seconds)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> str:
        """
        ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.
        """
        return pulumi.get(self, "config_map_ref")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector']:
        """
        Label selector used to find the resource defined in the `config_map_ref`. Alternative to `name`.
        """
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="requeueAfterSeconds")
    def requeue_after_seconds(self) -> Optional[str]:
        """
        How often to check for changes (in seconds). Default: 3min.
        """
        return pulumi.get(self, "requeue_after_seconds")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter
    def values(self) -> Optional[Mapping[str, str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpressionArgs'] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, Any] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression']]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str key: The label key that the selector applies to.
        :param str operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param Sequence[str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterSelectorMatchExpressionArgs'] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, Any] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterSelectorMatchExpression']]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str key: The label key that the selector applies to.
        :param str operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param Sequence[str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGit(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "pathParamPrefix":
            suggest = "path_param_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGit. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGit.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGit.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repo_url: str,
                 directories: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitDirectory']] = None,
                 files: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitFile']] = None,
                 path_param_prefix: Optional[str] = None,
                 revision: Optional[str] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplate'] = None):
        """
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitDirectoryArgs'] directories: Path/directory specific options.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitFileArgs'] files: List of files in the source repository to use when template the Application.
        :param str path_param_prefix: Prefix for all path-related parameter names.
        :param str revision: Revision of the source repository to use.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        pulumi.set(__self__, "repo_url", repo_url)
        if directories is not None:
            pulumi.set(__self__, "directories", directories)
        if files is not None:
            pulumi.set(__self__, "files", files)
        if path_param_prefix is not None:
            pulumi.set(__self__, "path_param_prefix", path_param_prefix)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> str:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter
    def directories(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitDirectory']]:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directories")

    @property
    @pulumi.getter
    def files(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitFile']]:
        """
        List of files in the source repository to use when template the Application.
        """
        return pulumi.get(self, "files")

    @property
    @pulumi.getter(name="pathParamPrefix")
    def path_param_prefix(self) -> Optional[str]:
        """
        Prefix for all path-related parameter names.
        """
        return pulumi.get(self, "path_param_prefix")

    @property
    @pulumi.getter
    def revision(self) -> Optional[str]:
        """
        Revision of the source repository to use.
        """
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitDirectory(dict):
    def __init__(__self__, *,
                 path: str,
                 exclude: Optional[bool] = None):
        """
        :param str path: Path to the file containing the values for the Helm parameter.
        :param bool exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        pulumi.set(__self__, "path", path)
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def exclude(self) -> Optional[bool]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitFile(dict):
    def __init__(__self__, *,
                 path: str):
        """
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorList(dict):
    def __init__(__self__, *,
                 elements: Sequence[Mapping[str, str]],
                 template: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplate'] = None):
        """
        :param Sequence[Mapping[str, str]] elements: List of key/value pairs to pass as parameters into the template
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        pulumi.set(__self__, "elements", elements)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter
    def elements(self) -> Sequence[Mapping[str, str]]:
        """
        List of key/value pairs to pass as parameters into the template
        """
        return pulumi.get(self, "elements")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bitbucketServer":
            suggest = "bitbucket_server"
        elif key == "requeueAfterSeconds":
            suggest = "requeue_after_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitbucket_server: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServer'] = None,
                 filters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestFilter']] = None,
                 gitea: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitea'] = None,
                 github: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGithub'] = None,
                 gitlab: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitlab'] = None,
                 requeue_after_seconds: Optional[str] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplate'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServerArgs' bitbucket_server: Fetch pull requests from a repo hosted on a Bitbucket Server.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestFilterArgs'] filters: Filters allow selecting which pull requests to generate for.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGiteaArgs' gitea: Specify the repository from which to fetch the Gitea Pull requests.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGithubArgs' github: Specify the repository from which to fetch the GitHub Pull requests.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitlabArgs' gitlab: Specify the project from which to fetch the GitLab merge requests.
        :param str requeue_after_seconds: How often to check for changes (in seconds). Default: 3min.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        if bitbucket_server is not None:
            pulumi.set(__self__, "bitbucket_server", bitbucket_server)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if gitea is not None:
            pulumi.set(__self__, "gitea", gitea)
        if github is not None:
            pulumi.set(__self__, "github", github)
        if gitlab is not None:
            pulumi.set(__self__, "gitlab", gitlab)
        if requeue_after_seconds is not None:
            pulumi.set(__self__, "requeue_after_seconds", requeue_after_seconds)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="bitbucketServer")
    def bitbucket_server(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServer']:
        """
        Fetch pull requests from a repo hosted on a Bitbucket Server.
        """
        return pulumi.get(self, "bitbucket_server")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestFilter']]:
        """
        Filters allow selecting which pull requests to generate for.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def gitea(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitea']:
        """
        Specify the repository from which to fetch the Gitea Pull requests.
        """
        return pulumi.get(self, "gitea")

    @property
    @pulumi.getter
    def github(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGithub']:
        """
        Specify the repository from which to fetch the GitHub Pull requests.
        """
        return pulumi.get(self, "github")

    @property
    @pulumi.getter
    def gitlab(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitlab']:
        """
        Specify the project from which to fetch the GitLab merge requests.
        """
        return pulumi.get(self, "gitlab")

    @property
    @pulumi.getter(name="requeueAfterSeconds")
    def requeue_after_seconds(self) -> Optional[str]:
        """
        How often to check for changes (in seconds). Default: 3min.
        """
        return pulumi.get(self, "requeue_after_seconds")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basicAuth":
            suggest = "basic_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api: str,
                 project: str,
                 repo: str,
                 basic_auth: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth'] = None):
        """
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param str repo: Repo name to scan.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthArgs' basic_auth: Credentials for Basic auth.
        """
        pulumi.set(__self__, "api", api)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "repo", repo)
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)

    @property
    @pulumi.getter
    def api(self) -> str:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def repo(self) -> str:
        """
        Repo name to scan.
        """
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth']:
        """
        Credentials for Basic auth.
        """
        return pulumi.get(self, "basic_auth")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passwordRef":
            suggest = "password_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef'] = None,
                 username: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRefArgs' password_ref: Password (or personal access token) reference.
        :param str username: Username for Basic auth.
        """
        if password_ref is not None:
            pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef']:
        """
        Password (or personal access token) reference.
        """
        return pulumi.get(self, "password_ref")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        Username for Basic auth.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "branchMatch":
            suggest = "branch_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 branch_match: Optional[str] = None):
        """
        :param str branch_match: A regex which must match the branch name.
        """
        if branch_match is not None:
            pulumi.set(__self__, "branch_match", branch_match)

    @property
    @pulumi.getter(name="branchMatch")
    def branch_match(self) -> Optional[str]:
        """
        A regex which must match the branch name.
        """
        return pulumi.get(self, "branch_match")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api: str,
                 owner: str,
                 repo: str,
                 insecure: Optional[bool] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGiteaTokenRef'] = None):
        """
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str owner: Gitea org or user to scan.
        :param str repo: Repo name to scan.
        :param bool insecure: Allow insecure tls, for self-signed certificates; default: false.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGiteaTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "api", api)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "repo", repo)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def api(self) -> str:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Gitea org or user to scan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def repo(self) -> str:
        """
        Repo name to scan.
        """
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter
    def insecure(self) -> Optional[bool]:
        """
        Allow insecure tls, for self-signed certificates; default: false.
        """
        return pulumi.get(self, "insecure")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGiteaTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGiteaTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGiteaTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGiteaTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGiteaTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGithub(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appSecretName":
            suggest = "app_secret_name"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGithub. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGithub.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGithub.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owner: str,
                 repo: str,
                 api: Optional[str] = None,
                 app_secret_name: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGithubTokenRef'] = None):
        """
        :param str owner: Gitea org or user to scan.
        :param str repo: Repo name to scan.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str app_secret_name: Reference to a GitHub App repo-creds secret with permission to access pull requests.
        :param Sequence[str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGithubTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "repo", repo)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if app_secret_name is not None:
            pulumi.set(__self__, "app_secret_name", app_secret_name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Gitea org or user to scan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def repo(self) -> str:
        """
        Repo name to scan.
        """
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter(name="appSecretName")
    def app_secret_name(self) -> Optional[str]:
        """
        Reference to a GitHub App repo-creds secret with permission to access pull requests.
        """
        return pulumi.get(self, "app_secret_name")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGithubTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGithubTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGithubTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGithubTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGithubTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitlab(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pullRequestState":
            suggest = "pull_request_state"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitlab. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitlab.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitlab.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 project: str,
                 api: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 pull_request_state: Optional[str] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitlabTokenRef'] = None):
        """
        :param str project: The project the application belongs to. Defaults to `default`.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param Sequence[str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str pull_request_state: additional MRs filter to get only those with a certain state. Default:  "" (all states).
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitlabTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "project", project)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if pull_request_state is not None:
            pulumi.set(__self__, "pull_request_state", pull_request_state)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="pullRequestState")
    def pull_request_state(self) -> Optional[str]:
        """
        additional MRs filter to get only those with a certain state. Default:  "" (all states).
        """
        return pulumi.get(self, "pull_request_state")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitlabTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitlabTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitlabTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitlabTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitlabTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureDevops":
            suggest = "azure_devops"
        elif key == "bitbucketCloud":
            suggest = "bitbucket_cloud"
        elif key == "bitbucketServer":
            suggest = "bitbucket_server"
        elif key == "cloneProtocol":
            suggest = "clone_protocol"
        elif key == "requeueAfterSeconds":
            suggest = "requeue_after_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_devops: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderAzureDevops'] = None,
                 bitbucket_cloud: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketCloud'] = None,
                 bitbucket_server: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServer'] = None,
                 clone_protocol: Optional[str] = None,
                 filters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderFilter']] = None,
                 gitea: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitea'] = None,
                 github: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGithub'] = None,
                 gitlab: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitlab'] = None,
                 requeue_after_seconds: Optional[str] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplate'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderAzureDevopsArgs' azure_devops: Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketCloudArgs' bitbucket_cloud: Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServerArgs' bitbucket_server: Fetch pull requests from a repo hosted on a Bitbucket Server.
        :param str clone_protocol: Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderFilterArgs'] filters: Filters allow selecting which pull requests to generate for.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGiteaArgs' gitea: Specify the repository from which to fetch the Gitea Pull requests.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGithubArgs' github: Specify the repository from which to fetch the GitHub Pull requests.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitlabArgs' gitlab: Specify the project from which to fetch the GitLab merge requests.
        :param str requeue_after_seconds: How often to check for changes (in seconds). Default: 3min.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        if azure_devops is not None:
            pulumi.set(__self__, "azure_devops", azure_devops)
        if bitbucket_cloud is not None:
            pulumi.set(__self__, "bitbucket_cloud", bitbucket_cloud)
        if bitbucket_server is not None:
            pulumi.set(__self__, "bitbucket_server", bitbucket_server)
        if clone_protocol is not None:
            pulumi.set(__self__, "clone_protocol", clone_protocol)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if gitea is not None:
            pulumi.set(__self__, "gitea", gitea)
        if github is not None:
            pulumi.set(__self__, "github", github)
        if gitlab is not None:
            pulumi.set(__self__, "gitlab", gitlab)
        if requeue_after_seconds is not None:
            pulumi.set(__self__, "requeue_after_seconds", requeue_after_seconds)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="azureDevops")
    def azure_devops(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderAzureDevops']:
        """
        Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.
        """
        return pulumi.get(self, "azure_devops")

    @property
    @pulumi.getter(name="bitbucketCloud")
    def bitbucket_cloud(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketCloud']:
        """
        Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.
        """
        return pulumi.get(self, "bitbucket_cloud")

    @property
    @pulumi.getter(name="bitbucketServer")
    def bitbucket_server(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServer']:
        """
        Fetch pull requests from a repo hosted on a Bitbucket Server.
        """
        return pulumi.get(self, "bitbucket_server")

    @property
    @pulumi.getter(name="cloneProtocol")
    def clone_protocol(self) -> Optional[str]:
        """
        Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.
        """
        return pulumi.get(self, "clone_protocol")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderFilter']]:
        """
        Filters allow selecting which pull requests to generate for.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def gitea(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitea']:
        """
        Specify the repository from which to fetch the Gitea Pull requests.
        """
        return pulumi.get(self, "gitea")

    @property
    @pulumi.getter
    def github(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGithub']:
        """
        Specify the repository from which to fetch the GitHub Pull requests.
        """
        return pulumi.get(self, "github")

    @property
    @pulumi.getter
    def gitlab(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitlab']:
        """
        Specify the project from which to fetch the GitLab merge requests.
        """
        return pulumi.get(self, "gitlab")

    @property
    @pulumi.getter(name="requeueAfterSeconds")
    def requeue_after_seconds(self) -> Optional[str]:
        """
        How often to check for changes (in seconds). Default: 3min.
        """
        return pulumi.get(self, "requeue_after_seconds")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderAzureDevops(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "teamProject":
            suggest = "team_project"
        elif key == "accessTokenRef":
            suggest = "access_token_ref"
        elif key == "allBranches":
            suggest = "all_branches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderAzureDevops. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderAzureDevops.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderAzureDevops.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 organization: str,
                 team_project: str,
                 access_token_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef'] = None,
                 all_branches: Optional[bool] = None,
                 api: Optional[str] = None):
        """
        :param str organization: Azure Devops organization. E.g. "my-organization".
        :param str team_project: Azure Devops team project. E.g. "my-team".
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRefArgs' access_token_ref: The Personal Access Token (PAT) to use when connecting.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "team_project", team_project)
        if access_token_ref is not None:
            pulumi.set(__self__, "access_token_ref", access_token_ref)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if api is not None:
            pulumi.set(__self__, "api", api)

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        Azure Devops organization. E.g. "my-organization".
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="teamProject")
    def team_project(self) -> str:
        """
        Azure Devops team project. E.g. "my-team".
        """
        return pulumi.get(self, "team_project")

    @property
    @pulumi.getter(name="accessTokenRef")
    def access_token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef']:
        """
        The Personal Access Token (PAT) to use when connecting.
        """
        return pulumi.get(self, "access_token_ref")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketCloud(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "appPasswordRef":
            suggest = "app_password_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketCloud. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketCloud.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketCloud.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owner: str,
                 user: str,
                 all_branches: Optional[bool] = None,
                 app_password_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef'] = None):
        """
        :param str owner: Gitea org or user to scan.
        :param str user: Bitbucket user to use when authenticating. Should have a "member" role to be able to read all repositories and branches.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRefArgs' app_password_ref: The app password to use for the user. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/.
        """
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "user", user)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if app_password_ref is not None:
            pulumi.set(__self__, "app_password_ref", app_password_ref)

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Gitea org or user to scan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def user(self) -> str:
        """
        Bitbucket user to use when authenticating. Should have a "member" role to be able to read all repositories and branches.
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter(name="appPasswordRef")
    def app_password_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef']:
        """
        The app password to use for the user. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/.
        """
        return pulumi.get(self, "app_password_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "basicAuth":
            suggest = "basic_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api: str,
                 project: str,
                 all_branches: Optional[bool] = None,
                 basic_auth: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth'] = None):
        """
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthArgs' basic_auth: Credentials for Basic auth.
        """
        pulumi.set(__self__, "api", api)
        pulumi.set(__self__, "project", project)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)

    @property
    @pulumi.getter
    def api(self) -> str:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth']:
        """
        Credentials for Basic auth.
        """
        return pulumi.get(self, "basic_auth")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passwordRef":
            suggest = "password_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef'] = None,
                 username: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRefArgs' password_ref: Password (or personal access token) reference.
        :param str username: Username for Basic auth.
        """
        if password_ref is not None:
            pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef']:
        """
        Password (or personal access token) reference.
        """
        return pulumi.get(self, "password_ref")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        Username for Basic auth.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "branchMatch":
            suggest = "branch_match"
        elif key == "labelMatch":
            suggest = "label_match"
        elif key == "pathsDoNotExists":
            suggest = "paths_do_not_exists"
        elif key == "pathsExists":
            suggest = "paths_exists"
        elif key == "repositoryMatch":
            suggest = "repository_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 branch_match: Optional[str] = None,
                 label_match: Optional[str] = None,
                 paths_do_not_exists: Optional[Sequence[str]] = None,
                 paths_exists: Optional[Sequence[str]] = None,
                 repository_match: Optional[str] = None):
        """
        :param str branch_match: A regex which must match the branch name.
        :param str label_match: A regex which must match at least one label.
        :param Sequence[str] paths_do_not_exists: An array of paths, all of which must not exist.
        :param Sequence[str] paths_exists: An array of paths, all of which must exist.
        :param str repository_match: A regex for repo names.
        """
        if branch_match is not None:
            pulumi.set(__self__, "branch_match", branch_match)
        if label_match is not None:
            pulumi.set(__self__, "label_match", label_match)
        if paths_do_not_exists is not None:
            pulumi.set(__self__, "paths_do_not_exists", paths_do_not_exists)
        if paths_exists is not None:
            pulumi.set(__self__, "paths_exists", paths_exists)
        if repository_match is not None:
            pulumi.set(__self__, "repository_match", repository_match)

    @property
    @pulumi.getter(name="branchMatch")
    def branch_match(self) -> Optional[str]:
        """
        A regex which must match the branch name.
        """
        return pulumi.get(self, "branch_match")

    @property
    @pulumi.getter(name="labelMatch")
    def label_match(self) -> Optional[str]:
        """
        A regex which must match at least one label.
        """
        return pulumi.get(self, "label_match")

    @property
    @pulumi.getter(name="pathsDoNotExists")
    def paths_do_not_exists(self) -> Optional[Sequence[str]]:
        """
        An array of paths, all of which must not exist.
        """
        return pulumi.get(self, "paths_do_not_exists")

    @property
    @pulumi.getter(name="pathsExists")
    def paths_exists(self) -> Optional[Sequence[str]]:
        """
        An array of paths, all of which must exist.
        """
        return pulumi.get(self, "paths_exists")

    @property
    @pulumi.getter(name="repositoryMatch")
    def repository_match(self) -> Optional[str]:
        """
        A regex for repo names.
        """
        return pulumi.get(self, "repository_match")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owner: str,
                 all_branches: Optional[bool] = None,
                 api: Optional[str] = None,
                 insecure: Optional[bool] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGiteaTokenRef'] = None):
        """
        :param str owner: Gitea org or user to scan.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param bool insecure: Allow insecure tls, for self-signed certificates; default: false.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGiteaTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "owner", owner)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Gitea org or user to scan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def insecure(self) -> Optional[bool]:
        """
        Allow insecure tls, for self-signed certificates; default: false.
        """
        return pulumi.get(self, "insecure")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGiteaTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGiteaTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGiteaTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGiteaTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGiteaTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGithub(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "appSecretName":
            suggest = "app_secret_name"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGithub. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGithub.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGithub.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 organization: str,
                 all_branches: Optional[bool] = None,
                 api: Optional[str] = None,
                 app_secret_name: Optional[str] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGithubTokenRef'] = None):
        """
        :param str organization: Azure Devops organization. E.g. "my-organization".
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str app_secret_name: Reference to a GitHub App repo-creds secret with permission to access pull requests.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGithubTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "organization", organization)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if app_secret_name is not None:
            pulumi.set(__self__, "app_secret_name", app_secret_name)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        Azure Devops organization. E.g. "my-organization".
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter(name="appSecretName")
    def app_secret_name(self) -> Optional[str]:
        """
        Reference to a GitHub App repo-creds secret with permission to access pull requests.
        """
        return pulumi.get(self, "app_secret_name")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGithubTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGithubTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGithubTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGithubTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGithubTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitlab(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "includeSubgroups":
            suggest = "include_subgroups"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitlab. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitlab.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitlab.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: str,
                 all_branches: Optional[bool] = None,
                 api: Optional[str] = None,
                 include_subgroups: Optional[bool] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitlabTokenRef'] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param bool include_subgroups: Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitlabTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "group", group)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if include_subgroups is not None:
            pulumi.set(__self__, "include_subgroups", include_subgroups)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter(name="includeSubgroups")
    def include_subgroups(self) -> Optional[bool]:
        """
        Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.
        """
        return pulumi.get(self, "include_subgroups")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitlabTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitlabTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitlabTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitlabTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitlabTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorSelectorMatchExpressionArgs'] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, Any] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorSelectorMatchExpression']]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str key: The label key that the selector applies to.
        :param str operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param Sequence[str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMerge(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mergeKeys":
            suggest = "merge_keys"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMerge. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMerge.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMerge.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 generators: Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGenerator'],
                 merge_keys: Sequence[str],
                 template: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplate'] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorArgs'] generators: Application set generators. Generators are responsible for generating parameters, which are then rendered into the template: fields of the ApplicationSet resource.
        :param Sequence[str] merge_keys: Keys to merge into resulting parameter set.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        pulumi.set(__self__, "generators", generators)
        pulumi.set(__self__, "merge_keys", merge_keys)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter
    def generators(self) -> Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGenerator']:
        """
        Application set generators. Generators are responsible for generating parameters, which are then rendered into the template: fields of the ApplicationSet resource.
        """
        return pulumi.get(self, "generators")

    @property
    @pulumi.getter(name="mergeKeys")
    def merge_keys(self) -> Sequence[str]:
        """
        Keys to merge into resulting parameter set.
        """
        return pulumi.get(self, "merge_keys")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGenerator(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterDecisionResources":
            suggest = "cluster_decision_resources"
        elif key == "pullRequests":
            suggest = "pull_requests"
        elif key == "scmProviders":
            suggest = "scm_providers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGenerator. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGenerator.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGenerator.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_decision_resources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResource']] = None,
                 clusters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorCluster']] = None,
                 gits: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGit']] = None,
                 lists: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorList']] = None,
                 pull_requests: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequest']] = None,
                 scm_providers: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProvider']] = None,
                 selector: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorSelector'] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceArgs'] cluster_decision_resources: The [cluster decision resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/) generates a list of Argo CD clusters.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterArgs'] clusters: The [cluster generator](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/) produces parameters based on the list of items found within the cluster secret.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitArgs'] gits: [Git generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/) generates parameters using either the directory structure of a specified Git repository (directory generator), or, using the contents of JSON/YAML files found within a specified repository (file generator).
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListArgs'] lists: [List generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/) generate parameters based on an arbitrary list of key/value pairs (as long as the values are string values).
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestArgs'] pull_requests: [Pull Request generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/) uses the API of an SCMaaS provider to automatically discover open pull requests within a repository.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderArgs'] scm_providers: [SCM Provider generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/) uses the API of an SCMaaS provider to automatically discover repositories within an organization.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorSelectorArgs' selector: Label selector used to narrow the scope of targeted clusters.
        """
        if cluster_decision_resources is not None:
            pulumi.set(__self__, "cluster_decision_resources", cluster_decision_resources)
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if gits is not None:
            pulumi.set(__self__, "gits", gits)
        if lists is not None:
            pulumi.set(__self__, "lists", lists)
        if pull_requests is not None:
            pulumi.set(__self__, "pull_requests", pull_requests)
        if scm_providers is not None:
            pulumi.set(__self__, "scm_providers", scm_providers)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter(name="clusterDecisionResources")
    def cluster_decision_resources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResource']]:
        """
        The [cluster decision resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/) generates a list of Argo CD clusters.
        """
        return pulumi.get(self, "cluster_decision_resources")

    @property
    @pulumi.getter
    def clusters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorCluster']]:
        """
        The [cluster generator](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/) produces parameters based on the list of items found within the cluster secret.
        """
        return pulumi.get(self, "clusters")

    @property
    @pulumi.getter
    def gits(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGit']]:
        """
        [Git generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/) generates parameters using either the directory structure of a specified Git repository (directory generator), or, using the contents of JSON/YAML files found within a specified repository (file generator).
        """
        return pulumi.get(self, "gits")

    @property
    @pulumi.getter
    def lists(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorList']]:
        """
        [List generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/) generate parameters based on an arbitrary list of key/value pairs (as long as the values are string values).
        """
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter(name="pullRequests")
    def pull_requests(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequest']]:
        """
        [Pull Request generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/) uses the API of an SCMaaS provider to automatically discover open pull requests within a repository.
        """
        return pulumi.get(self, "pull_requests")

    @property
    @pulumi.getter(name="scmProviders")
    def scm_providers(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProvider']]:
        """
        [SCM Provider generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/) uses the API of an SCMaaS provider to automatically discover repositories within an organization.
        """
        return pulumi.get(self, "scm_providers")

    @property
    @pulumi.getter
    def selector(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorSelector']:
        """
        Label selector used to narrow the scope of targeted clusters.
        """
        return pulumi.get(self, "selector")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorCluster(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 selector: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterSelector'] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplate'] = None,
                 values: Optional[Mapping[str, str]] = None):
        """
        :param bool enabled: Boolean value defaulting to `true` to indicate that this block has been added thereby allowing all other attributes to be optional.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterSelectorArgs' selector: Label selector used to narrow the scope of targeted clusters.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        :param Mapping[str, str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "enabled", enabled)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Boolean value defaulting to `true` to indicate that this block has been added thereby allowing all other attributes to be optional.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def selector(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterSelector']:
        """
        Label selector used to narrow the scope of targeted clusters.
        """
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter
    def values(self) -> Optional[Mapping[str, str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configMapRef":
            suggest = "config_map_ref"
        elif key == "labelSelector":
            suggest = "label_selector"
        elif key == "requeueAfterSeconds":
            suggest = "requeue_after_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_map_ref: str,
                 label_selector: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelector'] = None,
                 name: Optional[str] = None,
                 requeue_after_seconds: Optional[str] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplate'] = None,
                 values: Optional[Mapping[str, str]] = None):
        """
        :param str config_map_ref: ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorArgs' label_selector: Label selector used to find the resource defined in the `config_map_ref`. Alternative to `name`.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str requeue_after_seconds: How often to check for changes (in seconds). Default: 3min.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        :param Mapping[str, str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "config_map_ref", config_map_ref)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if requeue_after_seconds is not None:
            pulumi.set(__self__, "requeue_after_seconds", requeue_after_seconds)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> str:
        """
        ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.
        """
        return pulumi.get(self, "config_map_ref")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelector']:
        """
        Label selector used to find the resource defined in the `config_map_ref`. Alternative to `name`.
        """
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="requeueAfterSeconds")
    def requeue_after_seconds(self) -> Optional[str]:
        """
        How often to check for changes (in seconds). Default: 3min.
        """
        return pulumi.get(self, "requeue_after_seconds")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter
    def values(self) -> Optional[Mapping[str, str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpressionArgs'] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, Any] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression']]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str key: The label key that the selector applies to.
        :param str operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param Sequence[str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterSelectorMatchExpressionArgs'] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, Any] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterSelectorMatchExpression']]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str key: The label key that the selector applies to.
        :param str operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param Sequence[str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGit(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "pathParamPrefix":
            suggest = "path_param_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGit. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGit.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGit.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repo_url: str,
                 directories: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitDirectory']] = None,
                 files: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitFile']] = None,
                 path_param_prefix: Optional[str] = None,
                 revision: Optional[str] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplate'] = None):
        """
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitDirectoryArgs'] directories: Path/directory specific options.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitFileArgs'] files: List of files in the source repository to use when template the Application.
        :param str path_param_prefix: Prefix for all path-related parameter names.
        :param str revision: Revision of the source repository to use.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        pulumi.set(__self__, "repo_url", repo_url)
        if directories is not None:
            pulumi.set(__self__, "directories", directories)
        if files is not None:
            pulumi.set(__self__, "files", files)
        if path_param_prefix is not None:
            pulumi.set(__self__, "path_param_prefix", path_param_prefix)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> str:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter
    def directories(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitDirectory']]:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directories")

    @property
    @pulumi.getter
    def files(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitFile']]:
        """
        List of files in the source repository to use when template the Application.
        """
        return pulumi.get(self, "files")

    @property
    @pulumi.getter(name="pathParamPrefix")
    def path_param_prefix(self) -> Optional[str]:
        """
        Prefix for all path-related parameter names.
        """
        return pulumi.get(self, "path_param_prefix")

    @property
    @pulumi.getter
    def revision(self) -> Optional[str]:
        """
        Revision of the source repository to use.
        """
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitDirectory(dict):
    def __init__(__self__, *,
                 path: str,
                 exclude: Optional[bool] = None):
        """
        :param str path: Path to the file containing the values for the Helm parameter.
        :param bool exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        pulumi.set(__self__, "path", path)
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def exclude(self) -> Optional[bool]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitFile(dict):
    def __init__(__self__, *,
                 path: str):
        """
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorList(dict):
    def __init__(__self__, *,
                 elements: Sequence[Mapping[str, str]],
                 template: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplate'] = None):
        """
        :param Sequence[Mapping[str, str]] elements: List of key/value pairs to pass as parameters into the template
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        pulumi.set(__self__, "elements", elements)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter
    def elements(self) -> Sequence[Mapping[str, str]]:
        """
        List of key/value pairs to pass as parameters into the template
        """
        return pulumi.get(self, "elements")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bitbucketServer":
            suggest = "bitbucket_server"
        elif key == "requeueAfterSeconds":
            suggest = "requeue_after_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitbucket_server: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServer'] = None,
                 filters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestFilter']] = None,
                 gitea: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitea'] = None,
                 github: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithub'] = None,
                 gitlab: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitlab'] = None,
                 requeue_after_seconds: Optional[str] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplate'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServerArgs' bitbucket_server: Fetch pull requests from a repo hosted on a Bitbucket Server.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestFilterArgs'] filters: Filters allow selecting which pull requests to generate for.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGiteaArgs' gitea: Specify the repository from which to fetch the Gitea Pull requests.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubArgs' github: Specify the repository from which to fetch the GitHub Pull requests.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitlabArgs' gitlab: Specify the project from which to fetch the GitLab merge requests.
        :param str requeue_after_seconds: How often to check for changes (in seconds). Default: 3min.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        if bitbucket_server is not None:
            pulumi.set(__self__, "bitbucket_server", bitbucket_server)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if gitea is not None:
            pulumi.set(__self__, "gitea", gitea)
        if github is not None:
            pulumi.set(__self__, "github", github)
        if gitlab is not None:
            pulumi.set(__self__, "gitlab", gitlab)
        if requeue_after_seconds is not None:
            pulumi.set(__self__, "requeue_after_seconds", requeue_after_seconds)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="bitbucketServer")
    def bitbucket_server(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServer']:
        """
        Fetch pull requests from a repo hosted on a Bitbucket Server.
        """
        return pulumi.get(self, "bitbucket_server")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestFilter']]:
        """
        Filters allow selecting which pull requests to generate for.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def gitea(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitea']:
        """
        Specify the repository from which to fetch the Gitea Pull requests.
        """
        return pulumi.get(self, "gitea")

    @property
    @pulumi.getter
    def github(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithub']:
        """
        Specify the repository from which to fetch the GitHub Pull requests.
        """
        return pulumi.get(self, "github")

    @property
    @pulumi.getter
    def gitlab(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitlab']:
        """
        Specify the project from which to fetch the GitLab merge requests.
        """
        return pulumi.get(self, "gitlab")

    @property
    @pulumi.getter(name="requeueAfterSeconds")
    def requeue_after_seconds(self) -> Optional[str]:
        """
        How often to check for changes (in seconds). Default: 3min.
        """
        return pulumi.get(self, "requeue_after_seconds")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basicAuth":
            suggest = "basic_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api: str,
                 project: str,
                 repo: str,
                 basic_auth: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth'] = None):
        """
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param str repo: Repo name to scan.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthArgs' basic_auth: Credentials for Basic auth.
        """
        pulumi.set(__self__, "api", api)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "repo", repo)
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)

    @property
    @pulumi.getter
    def api(self) -> str:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def repo(self) -> str:
        """
        Repo name to scan.
        """
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth']:
        """
        Credentials for Basic auth.
        """
        return pulumi.get(self, "basic_auth")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passwordRef":
            suggest = "password_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef'] = None,
                 username: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRefArgs' password_ref: Password (or personal access token) reference.
        :param str username: Username for Basic auth.
        """
        if password_ref is not None:
            pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef']:
        """
        Password (or personal access token) reference.
        """
        return pulumi.get(self, "password_ref")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        Username for Basic auth.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "branchMatch":
            suggest = "branch_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 branch_match: Optional[str] = None):
        """
        :param str branch_match: A regex which must match the branch name.
        """
        if branch_match is not None:
            pulumi.set(__self__, "branch_match", branch_match)

    @property
    @pulumi.getter(name="branchMatch")
    def branch_match(self) -> Optional[str]:
        """
        A regex which must match the branch name.
        """
        return pulumi.get(self, "branch_match")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api: str,
                 owner: str,
                 repo: str,
                 insecure: Optional[bool] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGiteaTokenRef'] = None):
        """
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str owner: Gitea org or user to scan.
        :param str repo: Repo name to scan.
        :param bool insecure: Allow insecure tls, for self-signed certificates; default: false.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGiteaTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "api", api)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "repo", repo)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def api(self) -> str:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Gitea org or user to scan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def repo(self) -> str:
        """
        Repo name to scan.
        """
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter
    def insecure(self) -> Optional[bool]:
        """
        Allow insecure tls, for self-signed certificates; default: false.
        """
        return pulumi.get(self, "insecure")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGiteaTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGiteaTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGiteaTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGiteaTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGiteaTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithub(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appSecretName":
            suggest = "app_secret_name"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithub. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithub.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithub.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owner: str,
                 repo: str,
                 api: Optional[str] = None,
                 app_secret_name: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubTokenRef'] = None):
        """
        :param str owner: Gitea org or user to scan.
        :param str repo: Repo name to scan.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str app_secret_name: Reference to a GitHub App repo-creds secret with permission to access pull requests.
        :param Sequence[str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "repo", repo)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if app_secret_name is not None:
            pulumi.set(__self__, "app_secret_name", app_secret_name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Gitea org or user to scan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def repo(self) -> str:
        """
        Repo name to scan.
        """
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter(name="appSecretName")
    def app_secret_name(self) -> Optional[str]:
        """
        Reference to a GitHub App repo-creds secret with permission to access pull requests.
        """
        return pulumi.get(self, "app_secret_name")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitlab(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pullRequestState":
            suggest = "pull_request_state"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitlab. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitlab.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitlab.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 project: str,
                 api: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 pull_request_state: Optional[str] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitlabTokenRef'] = None):
        """
        :param str project: The project the application belongs to. Defaults to `default`.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param Sequence[str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str pull_request_state: additional MRs filter to get only those with a certain state. Default:  "" (all states).
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitlabTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "project", project)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if pull_request_state is not None:
            pulumi.set(__self__, "pull_request_state", pull_request_state)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="pullRequestState")
    def pull_request_state(self) -> Optional[str]:
        """
        additional MRs filter to get only those with a certain state. Default:  "" (all states).
        """
        return pulumi.get(self, "pull_request_state")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitlabTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitlabTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitlabTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitlabTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitlabTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureDevops":
            suggest = "azure_devops"
        elif key == "bitbucketCloud":
            suggest = "bitbucket_cloud"
        elif key == "bitbucketServer":
            suggest = "bitbucket_server"
        elif key == "cloneProtocol":
            suggest = "clone_protocol"
        elif key == "requeueAfterSeconds":
            suggest = "requeue_after_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_devops: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderAzureDevops'] = None,
                 bitbucket_cloud: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketCloud'] = None,
                 bitbucket_server: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServer'] = None,
                 clone_protocol: Optional[str] = None,
                 filters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderFilter']] = None,
                 gitea: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitea'] = None,
                 github: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGithub'] = None,
                 gitlab: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitlab'] = None,
                 requeue_after_seconds: Optional[str] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplate'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderAzureDevopsArgs' azure_devops: Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketCloudArgs' bitbucket_cloud: Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServerArgs' bitbucket_server: Fetch pull requests from a repo hosted on a Bitbucket Server.
        :param str clone_protocol: Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderFilterArgs'] filters: Filters allow selecting which pull requests to generate for.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGiteaArgs' gitea: Specify the repository from which to fetch the Gitea Pull requests.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGithubArgs' github: Specify the repository from which to fetch the GitHub Pull requests.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitlabArgs' gitlab: Specify the project from which to fetch the GitLab merge requests.
        :param str requeue_after_seconds: How often to check for changes (in seconds). Default: 3min.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        if azure_devops is not None:
            pulumi.set(__self__, "azure_devops", azure_devops)
        if bitbucket_cloud is not None:
            pulumi.set(__self__, "bitbucket_cloud", bitbucket_cloud)
        if bitbucket_server is not None:
            pulumi.set(__self__, "bitbucket_server", bitbucket_server)
        if clone_protocol is not None:
            pulumi.set(__self__, "clone_protocol", clone_protocol)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if gitea is not None:
            pulumi.set(__self__, "gitea", gitea)
        if github is not None:
            pulumi.set(__self__, "github", github)
        if gitlab is not None:
            pulumi.set(__self__, "gitlab", gitlab)
        if requeue_after_seconds is not None:
            pulumi.set(__self__, "requeue_after_seconds", requeue_after_seconds)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="azureDevops")
    def azure_devops(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderAzureDevops']:
        """
        Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.
        """
        return pulumi.get(self, "azure_devops")

    @property
    @pulumi.getter(name="bitbucketCloud")
    def bitbucket_cloud(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketCloud']:
        """
        Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.
        """
        return pulumi.get(self, "bitbucket_cloud")

    @property
    @pulumi.getter(name="bitbucketServer")
    def bitbucket_server(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServer']:
        """
        Fetch pull requests from a repo hosted on a Bitbucket Server.
        """
        return pulumi.get(self, "bitbucket_server")

    @property
    @pulumi.getter(name="cloneProtocol")
    def clone_protocol(self) -> Optional[str]:
        """
        Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.
        """
        return pulumi.get(self, "clone_protocol")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderFilter']]:
        """
        Filters allow selecting which pull requests to generate for.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def gitea(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitea']:
        """
        Specify the repository from which to fetch the Gitea Pull requests.
        """
        return pulumi.get(self, "gitea")

    @property
    @pulumi.getter
    def github(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGithub']:
        """
        Specify the repository from which to fetch the GitHub Pull requests.
        """
        return pulumi.get(self, "github")

    @property
    @pulumi.getter
    def gitlab(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitlab']:
        """
        Specify the project from which to fetch the GitLab merge requests.
        """
        return pulumi.get(self, "gitlab")

    @property
    @pulumi.getter(name="requeueAfterSeconds")
    def requeue_after_seconds(self) -> Optional[str]:
        """
        How often to check for changes (in seconds). Default: 3min.
        """
        return pulumi.get(self, "requeue_after_seconds")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderAzureDevops(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "teamProject":
            suggest = "team_project"
        elif key == "accessTokenRef":
            suggest = "access_token_ref"
        elif key == "allBranches":
            suggest = "all_branches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderAzureDevops. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderAzureDevops.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderAzureDevops.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 organization: str,
                 team_project: str,
                 access_token_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef'] = None,
                 all_branches: Optional[bool] = None,
                 api: Optional[str] = None):
        """
        :param str organization: Azure Devops organization. E.g. "my-organization".
        :param str team_project: Azure Devops team project. E.g. "my-team".
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRefArgs' access_token_ref: The Personal Access Token (PAT) to use when connecting.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "team_project", team_project)
        if access_token_ref is not None:
            pulumi.set(__self__, "access_token_ref", access_token_ref)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if api is not None:
            pulumi.set(__self__, "api", api)

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        Azure Devops organization. E.g. "my-organization".
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="teamProject")
    def team_project(self) -> str:
        """
        Azure Devops team project. E.g. "my-team".
        """
        return pulumi.get(self, "team_project")

    @property
    @pulumi.getter(name="accessTokenRef")
    def access_token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef']:
        """
        The Personal Access Token (PAT) to use when connecting.
        """
        return pulumi.get(self, "access_token_ref")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketCloud(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "appPasswordRef":
            suggest = "app_password_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketCloud. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketCloud.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketCloud.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owner: str,
                 user: str,
                 all_branches: Optional[bool] = None,
                 app_password_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef'] = None):
        """
        :param str owner: Gitea org or user to scan.
        :param str user: Bitbucket user to use when authenticating. Should have a "member" role to be able to read all repositories and branches.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRefArgs' app_password_ref: The app password to use for the user. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/.
        """
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "user", user)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if app_password_ref is not None:
            pulumi.set(__self__, "app_password_ref", app_password_ref)

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Gitea org or user to scan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def user(self) -> str:
        """
        Bitbucket user to use when authenticating. Should have a "member" role to be able to read all repositories and branches.
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter(name="appPasswordRef")
    def app_password_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef']:
        """
        The app password to use for the user. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/.
        """
        return pulumi.get(self, "app_password_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "basicAuth":
            suggest = "basic_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api: str,
                 project: str,
                 all_branches: Optional[bool] = None,
                 basic_auth: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth'] = None):
        """
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthArgs' basic_auth: Credentials for Basic auth.
        """
        pulumi.set(__self__, "api", api)
        pulumi.set(__self__, "project", project)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)

    @property
    @pulumi.getter
    def api(self) -> str:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth']:
        """
        Credentials for Basic auth.
        """
        return pulumi.get(self, "basic_auth")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passwordRef":
            suggest = "password_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef'] = None,
                 username: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRefArgs' password_ref: Password (or personal access token) reference.
        :param str username: Username for Basic auth.
        """
        if password_ref is not None:
            pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef']:
        """
        Password (or personal access token) reference.
        """
        return pulumi.get(self, "password_ref")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        Username for Basic auth.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "branchMatch":
            suggest = "branch_match"
        elif key == "labelMatch":
            suggest = "label_match"
        elif key == "pathsDoNotExists":
            suggest = "paths_do_not_exists"
        elif key == "pathsExists":
            suggest = "paths_exists"
        elif key == "repositoryMatch":
            suggest = "repository_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 branch_match: Optional[str] = None,
                 label_match: Optional[str] = None,
                 paths_do_not_exists: Optional[Sequence[str]] = None,
                 paths_exists: Optional[Sequence[str]] = None,
                 repository_match: Optional[str] = None):
        """
        :param str branch_match: A regex which must match the branch name.
        :param str label_match: A regex which must match at least one label.
        :param Sequence[str] paths_do_not_exists: An array of paths, all of which must not exist.
        :param Sequence[str] paths_exists: An array of paths, all of which must exist.
        :param str repository_match: A regex for repo names.
        """
        if branch_match is not None:
            pulumi.set(__self__, "branch_match", branch_match)
        if label_match is not None:
            pulumi.set(__self__, "label_match", label_match)
        if paths_do_not_exists is not None:
            pulumi.set(__self__, "paths_do_not_exists", paths_do_not_exists)
        if paths_exists is not None:
            pulumi.set(__self__, "paths_exists", paths_exists)
        if repository_match is not None:
            pulumi.set(__self__, "repository_match", repository_match)

    @property
    @pulumi.getter(name="branchMatch")
    def branch_match(self) -> Optional[str]:
        """
        A regex which must match the branch name.
        """
        return pulumi.get(self, "branch_match")

    @property
    @pulumi.getter(name="labelMatch")
    def label_match(self) -> Optional[str]:
        """
        A regex which must match at least one label.
        """
        return pulumi.get(self, "label_match")

    @property
    @pulumi.getter(name="pathsDoNotExists")
    def paths_do_not_exists(self) -> Optional[Sequence[str]]:
        """
        An array of paths, all of which must not exist.
        """
        return pulumi.get(self, "paths_do_not_exists")

    @property
    @pulumi.getter(name="pathsExists")
    def paths_exists(self) -> Optional[Sequence[str]]:
        """
        An array of paths, all of which must exist.
        """
        return pulumi.get(self, "paths_exists")

    @property
    @pulumi.getter(name="repositoryMatch")
    def repository_match(self) -> Optional[str]:
        """
        A regex for repo names.
        """
        return pulumi.get(self, "repository_match")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owner: str,
                 all_branches: Optional[bool] = None,
                 api: Optional[str] = None,
                 insecure: Optional[bool] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGiteaTokenRef'] = None):
        """
        :param str owner: Gitea org or user to scan.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param bool insecure: Allow insecure tls, for self-signed certificates; default: false.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGiteaTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "owner", owner)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Gitea org or user to scan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def insecure(self) -> Optional[bool]:
        """
        Allow insecure tls, for self-signed certificates; default: false.
        """
        return pulumi.get(self, "insecure")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGiteaTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGiteaTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGiteaTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGiteaTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGiteaTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGithub(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "appSecretName":
            suggest = "app_secret_name"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGithub. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGithub.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGithub.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 organization: str,
                 all_branches: Optional[bool] = None,
                 api: Optional[str] = None,
                 app_secret_name: Optional[str] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGithubTokenRef'] = None):
        """
        :param str organization: Azure Devops organization. E.g. "my-organization".
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str app_secret_name: Reference to a GitHub App repo-creds secret with permission to access pull requests.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGithubTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "organization", organization)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if app_secret_name is not None:
            pulumi.set(__self__, "app_secret_name", app_secret_name)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        Azure Devops organization. E.g. "my-organization".
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter(name="appSecretName")
    def app_secret_name(self) -> Optional[str]:
        """
        Reference to a GitHub App repo-creds secret with permission to access pull requests.
        """
        return pulumi.get(self, "app_secret_name")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGithubTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGithubTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGithubTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGithubTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGithubTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitlab(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "includeSubgroups":
            suggest = "include_subgroups"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitlab. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitlab.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitlab.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: str,
                 all_branches: Optional[bool] = None,
                 api: Optional[str] = None,
                 include_subgroups: Optional[bool] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitlabTokenRef'] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param bool include_subgroups: Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitlabTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "group", group)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if include_subgroups is not None:
            pulumi.set(__self__, "include_subgroups", include_subgroups)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter(name="includeSubgroups")
    def include_subgroups(self) -> Optional[bool]:
        """
        Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.
        """
        return pulumi.get(self, "include_subgroups")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitlabTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitlabTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitlabTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitlabTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitlabTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorSelectorMatchExpressionArgs'] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, Any] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorSelectorMatchExpression']]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str key: The label key that the selector applies to.
        :param str operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param Sequence[str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bitbucketServer":
            suggest = "bitbucket_server"
        elif key == "requeueAfterSeconds":
            suggest = "requeue_after_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorPullRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitbucket_server: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServer'] = None,
                 filters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestFilter']] = None,
                 gitea: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitea'] = None,
                 github: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGithub'] = None,
                 gitlab: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitlab'] = None,
                 requeue_after_seconds: Optional[str] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplate'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServerArgs' bitbucket_server: Fetch pull requests from a repo hosted on a Bitbucket Server.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorPullRequestFilterArgs'] filters: Filters allow selecting which pull requests to generate for.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGiteaArgs' gitea: Specify the repository from which to fetch the Gitea Pull requests.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGithubArgs' github: Specify the repository from which to fetch the GitHub Pull requests.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitlabArgs' gitlab: Specify the project from which to fetch the GitLab merge requests.
        :param str requeue_after_seconds: How often to check for changes (in seconds). Default: 3min.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        if bitbucket_server is not None:
            pulumi.set(__self__, "bitbucket_server", bitbucket_server)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if gitea is not None:
            pulumi.set(__self__, "gitea", gitea)
        if github is not None:
            pulumi.set(__self__, "github", github)
        if gitlab is not None:
            pulumi.set(__self__, "gitlab", gitlab)
        if requeue_after_seconds is not None:
            pulumi.set(__self__, "requeue_after_seconds", requeue_after_seconds)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="bitbucketServer")
    def bitbucket_server(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServer']:
        """
        Fetch pull requests from a repo hosted on a Bitbucket Server.
        """
        return pulumi.get(self, "bitbucket_server")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestFilter']]:
        """
        Filters allow selecting which pull requests to generate for.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def gitea(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitea']:
        """
        Specify the repository from which to fetch the Gitea Pull requests.
        """
        return pulumi.get(self, "gitea")

    @property
    @pulumi.getter
    def github(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGithub']:
        """
        Specify the repository from which to fetch the GitHub Pull requests.
        """
        return pulumi.get(self, "github")

    @property
    @pulumi.getter
    def gitlab(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitlab']:
        """
        Specify the project from which to fetch the GitLab merge requests.
        """
        return pulumi.get(self, "gitlab")

    @property
    @pulumi.getter(name="requeueAfterSeconds")
    def requeue_after_seconds(self) -> Optional[str]:
        """
        How often to check for changes (in seconds). Default: 3min.
        """
        return pulumi.get(self, "requeue_after_seconds")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basicAuth":
            suggest = "basic_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api: str,
                 project: str,
                 repo: str,
                 basic_auth: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth'] = None):
        """
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param str repo: Repo name to scan.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthArgs' basic_auth: Credentials for Basic auth.
        """
        pulumi.set(__self__, "api", api)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "repo", repo)
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)

    @property
    @pulumi.getter
    def api(self) -> str:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def repo(self) -> str:
        """
        Repo name to scan.
        """
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth']:
        """
        Credentials for Basic auth.
        """
        return pulumi.get(self, "basic_auth")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passwordRef":
            suggest = "password_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef'] = None,
                 username: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRefArgs' password_ref: Password (or personal access token) reference.
        :param str username: Username for Basic auth.
        """
        if password_ref is not None:
            pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef']:
        """
        Password (or personal access token) reference.
        """
        return pulumi.get(self, "password_ref")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        Username for Basic auth.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "branchMatch":
            suggest = "branch_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorPullRequestFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 branch_match: Optional[str] = None):
        """
        :param str branch_match: A regex which must match the branch name.
        """
        if branch_match is not None:
            pulumi.set(__self__, "branch_match", branch_match)

    @property
    @pulumi.getter(name="branchMatch")
    def branch_match(self) -> Optional[str]:
        """
        A regex which must match the branch name.
        """
        return pulumi.get(self, "branch_match")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api: str,
                 owner: str,
                 repo: str,
                 insecure: Optional[bool] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGiteaTokenRef'] = None):
        """
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str owner: Gitea org or user to scan.
        :param str repo: Repo name to scan.
        :param bool insecure: Allow insecure tls, for self-signed certificates; default: false.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGiteaTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "api", api)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "repo", repo)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def api(self) -> str:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Gitea org or user to scan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def repo(self) -> str:
        """
        Repo name to scan.
        """
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter
    def insecure(self) -> Optional[bool]:
        """
        Allow insecure tls, for self-signed certificates; default: false.
        """
        return pulumi.get(self, "insecure")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGiteaTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGiteaTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGiteaTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGiteaTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGiteaTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGithub(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appSecretName":
            suggest = "app_secret_name"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGithub. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGithub.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGithub.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owner: str,
                 repo: str,
                 api: Optional[str] = None,
                 app_secret_name: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGithubTokenRef'] = None):
        """
        :param str owner: Gitea org or user to scan.
        :param str repo: Repo name to scan.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str app_secret_name: Reference to a GitHub App repo-creds secret with permission to access pull requests.
        :param Sequence[str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGithubTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "repo", repo)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if app_secret_name is not None:
            pulumi.set(__self__, "app_secret_name", app_secret_name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Gitea org or user to scan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def repo(self) -> str:
        """
        Repo name to scan.
        """
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter(name="appSecretName")
    def app_secret_name(self) -> Optional[str]:
        """
        Reference to a GitHub App repo-creds secret with permission to access pull requests.
        """
        return pulumi.get(self, "app_secret_name")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGithubTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGithubTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGithubTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGithubTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGithubTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitlab(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pullRequestState":
            suggest = "pull_request_state"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitlab. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitlab.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitlab.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 project: str,
                 api: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 pull_request_state: Optional[str] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitlabTokenRef'] = None):
        """
        :param str project: The project the application belongs to. Defaults to `default`.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param Sequence[str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str pull_request_state: additional MRs filter to get only those with a certain state. Default:  "" (all states).
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitlabTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "project", project)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if pull_request_state is not None:
            pulumi.set(__self__, "pull_request_state", pull_request_state)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="pullRequestState")
    def pull_request_state(self) -> Optional[str]:
        """
        additional MRs filter to get only those with a certain state. Default:  "" (all states).
        """
        return pulumi.get(self, "pull_request_state")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitlabTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitlabTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitlabTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitlabTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitlabTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureDevops":
            suggest = "azure_devops"
        elif key == "bitbucketCloud":
            suggest = "bitbucket_cloud"
        elif key == "bitbucketServer":
            suggest = "bitbucket_server"
        elif key == "cloneProtocol":
            suggest = "clone_protocol"
        elif key == "requeueAfterSeconds":
            suggest = "requeue_after_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorScmProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_devops: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderAzureDevops'] = None,
                 bitbucket_cloud: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketCloud'] = None,
                 bitbucket_server: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServer'] = None,
                 clone_protocol: Optional[str] = None,
                 filters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderFilter']] = None,
                 gitea: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitea'] = None,
                 github: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGithub'] = None,
                 gitlab: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitlab'] = None,
                 requeue_after_seconds: Optional[str] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplate'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderAzureDevopsArgs' azure_devops: Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketCloudArgs' bitbucket_cloud: Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServerArgs' bitbucket_server: Fetch pull requests from a repo hosted on a Bitbucket Server.
        :param str clone_protocol: Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorScmProviderFilterArgs'] filters: Filters allow selecting which pull requests to generate for.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGiteaArgs' gitea: Specify the repository from which to fetch the Gitea Pull requests.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGithubArgs' github: Specify the repository from which to fetch the GitHub Pull requests.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitlabArgs' gitlab: Specify the project from which to fetch the GitLab merge requests.
        :param str requeue_after_seconds: How often to check for changes (in seconds). Default: 3min.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        if azure_devops is not None:
            pulumi.set(__self__, "azure_devops", azure_devops)
        if bitbucket_cloud is not None:
            pulumi.set(__self__, "bitbucket_cloud", bitbucket_cloud)
        if bitbucket_server is not None:
            pulumi.set(__self__, "bitbucket_server", bitbucket_server)
        if clone_protocol is not None:
            pulumi.set(__self__, "clone_protocol", clone_protocol)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if gitea is not None:
            pulumi.set(__self__, "gitea", gitea)
        if github is not None:
            pulumi.set(__self__, "github", github)
        if gitlab is not None:
            pulumi.set(__self__, "gitlab", gitlab)
        if requeue_after_seconds is not None:
            pulumi.set(__self__, "requeue_after_seconds", requeue_after_seconds)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="azureDevops")
    def azure_devops(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderAzureDevops']:
        """
        Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.
        """
        return pulumi.get(self, "azure_devops")

    @property
    @pulumi.getter(name="bitbucketCloud")
    def bitbucket_cloud(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketCloud']:
        """
        Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.
        """
        return pulumi.get(self, "bitbucket_cloud")

    @property
    @pulumi.getter(name="bitbucketServer")
    def bitbucket_server(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServer']:
        """
        Fetch pull requests from a repo hosted on a Bitbucket Server.
        """
        return pulumi.get(self, "bitbucket_server")

    @property
    @pulumi.getter(name="cloneProtocol")
    def clone_protocol(self) -> Optional[str]:
        """
        Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.
        """
        return pulumi.get(self, "clone_protocol")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderFilter']]:
        """
        Filters allow selecting which pull requests to generate for.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def gitea(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitea']:
        """
        Specify the repository from which to fetch the Gitea Pull requests.
        """
        return pulumi.get(self, "gitea")

    @property
    @pulumi.getter
    def github(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGithub']:
        """
        Specify the repository from which to fetch the GitHub Pull requests.
        """
        return pulumi.get(self, "github")

    @property
    @pulumi.getter
    def gitlab(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitlab']:
        """
        Specify the project from which to fetch the GitLab merge requests.
        """
        return pulumi.get(self, "gitlab")

    @property
    @pulumi.getter(name="requeueAfterSeconds")
    def requeue_after_seconds(self) -> Optional[str]:
        """
        How often to check for changes (in seconds). Default: 3min.
        """
        return pulumi.get(self, "requeue_after_seconds")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderAzureDevops(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "teamProject":
            suggest = "team_project"
        elif key == "accessTokenRef":
            suggest = "access_token_ref"
        elif key == "allBranches":
            suggest = "all_branches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorScmProviderAzureDevops. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderAzureDevops.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderAzureDevops.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 organization: str,
                 team_project: str,
                 access_token_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef'] = None,
                 all_branches: Optional[bool] = None,
                 api: Optional[str] = None):
        """
        :param str organization: Azure Devops organization. E.g. "my-organization".
        :param str team_project: Azure Devops team project. E.g. "my-team".
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRefArgs' access_token_ref: The Personal Access Token (PAT) to use when connecting.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "team_project", team_project)
        if access_token_ref is not None:
            pulumi.set(__self__, "access_token_ref", access_token_ref)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if api is not None:
            pulumi.set(__self__, "api", api)

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        Azure Devops organization. E.g. "my-organization".
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="teamProject")
    def team_project(self) -> str:
        """
        Azure Devops team project. E.g. "my-team".
        """
        return pulumi.get(self, "team_project")

    @property
    @pulumi.getter(name="accessTokenRef")
    def access_token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef']:
        """
        The Personal Access Token (PAT) to use when connecting.
        """
        return pulumi.get(self, "access_token_ref")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketCloud(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "appPasswordRef":
            suggest = "app_password_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketCloud. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketCloud.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketCloud.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owner: str,
                 user: str,
                 all_branches: Optional[bool] = None,
                 app_password_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef'] = None):
        """
        :param str owner: Gitea org or user to scan.
        :param str user: Bitbucket user to use when authenticating. Should have a "member" role to be able to read all repositories and branches.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRefArgs' app_password_ref: The app password to use for the user. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/.
        """
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "user", user)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if app_password_ref is not None:
            pulumi.set(__self__, "app_password_ref", app_password_ref)

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Gitea org or user to scan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def user(self) -> str:
        """
        Bitbucket user to use when authenticating. Should have a "member" role to be able to read all repositories and branches.
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter(name="appPasswordRef")
    def app_password_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef']:
        """
        The app password to use for the user. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/.
        """
        return pulumi.get(self, "app_password_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "basicAuth":
            suggest = "basic_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api: str,
                 project: str,
                 all_branches: Optional[bool] = None,
                 basic_auth: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth'] = None):
        """
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthArgs' basic_auth: Credentials for Basic auth.
        """
        pulumi.set(__self__, "api", api)
        pulumi.set(__self__, "project", project)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)

    @property
    @pulumi.getter
    def api(self) -> str:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth']:
        """
        Credentials for Basic auth.
        """
        return pulumi.get(self, "basic_auth")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passwordRef":
            suggest = "password_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef'] = None,
                 username: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRefArgs' password_ref: Password (or personal access token) reference.
        :param str username: Username for Basic auth.
        """
        if password_ref is not None:
            pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef']:
        """
        Password (or personal access token) reference.
        """
        return pulumi.get(self, "password_ref")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        Username for Basic auth.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "branchMatch":
            suggest = "branch_match"
        elif key == "labelMatch":
            suggest = "label_match"
        elif key == "pathsDoNotExists":
            suggest = "paths_do_not_exists"
        elif key == "pathsExists":
            suggest = "paths_exists"
        elif key == "repositoryMatch":
            suggest = "repository_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorScmProviderFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 branch_match: Optional[str] = None,
                 label_match: Optional[str] = None,
                 paths_do_not_exists: Optional[Sequence[str]] = None,
                 paths_exists: Optional[Sequence[str]] = None,
                 repository_match: Optional[str] = None):
        """
        :param str branch_match: A regex which must match the branch name.
        :param str label_match: A regex which must match at least one label.
        :param Sequence[str] paths_do_not_exists: An array of paths, all of which must not exist.
        :param Sequence[str] paths_exists: An array of paths, all of which must exist.
        :param str repository_match: A regex for repo names.
        """
        if branch_match is not None:
            pulumi.set(__self__, "branch_match", branch_match)
        if label_match is not None:
            pulumi.set(__self__, "label_match", label_match)
        if paths_do_not_exists is not None:
            pulumi.set(__self__, "paths_do_not_exists", paths_do_not_exists)
        if paths_exists is not None:
            pulumi.set(__self__, "paths_exists", paths_exists)
        if repository_match is not None:
            pulumi.set(__self__, "repository_match", repository_match)

    @property
    @pulumi.getter(name="branchMatch")
    def branch_match(self) -> Optional[str]:
        """
        A regex which must match the branch name.
        """
        return pulumi.get(self, "branch_match")

    @property
    @pulumi.getter(name="labelMatch")
    def label_match(self) -> Optional[str]:
        """
        A regex which must match at least one label.
        """
        return pulumi.get(self, "label_match")

    @property
    @pulumi.getter(name="pathsDoNotExists")
    def paths_do_not_exists(self) -> Optional[Sequence[str]]:
        """
        An array of paths, all of which must not exist.
        """
        return pulumi.get(self, "paths_do_not_exists")

    @property
    @pulumi.getter(name="pathsExists")
    def paths_exists(self) -> Optional[Sequence[str]]:
        """
        An array of paths, all of which must exist.
        """
        return pulumi.get(self, "paths_exists")

    @property
    @pulumi.getter(name="repositoryMatch")
    def repository_match(self) -> Optional[str]:
        """
        A regex for repo names.
        """
        return pulumi.get(self, "repository_match")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owner: str,
                 all_branches: Optional[bool] = None,
                 api: Optional[str] = None,
                 insecure: Optional[bool] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGiteaTokenRef'] = None):
        """
        :param str owner: Gitea org or user to scan.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param bool insecure: Allow insecure tls, for self-signed certificates; default: false.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGiteaTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "owner", owner)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Gitea org or user to scan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def insecure(self) -> Optional[bool]:
        """
        Allow insecure tls, for self-signed certificates; default: false.
        """
        return pulumi.get(self, "insecure")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGiteaTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGiteaTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGiteaTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGiteaTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGiteaTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGithub(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "appSecretName":
            suggest = "app_secret_name"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGithub. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGithub.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGithub.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 organization: str,
                 all_branches: Optional[bool] = None,
                 api: Optional[str] = None,
                 app_secret_name: Optional[str] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGithubTokenRef'] = None):
        """
        :param str organization: Azure Devops organization. E.g. "my-organization".
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str app_secret_name: Reference to a GitHub App repo-creds secret with permission to access pull requests.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGithubTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "organization", organization)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if app_secret_name is not None:
            pulumi.set(__self__, "app_secret_name", app_secret_name)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        Azure Devops organization. E.g. "my-organization".
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter(name="appSecretName")
    def app_secret_name(self) -> Optional[str]:
        """
        Reference to a GitHub App repo-creds secret with permission to access pull requests.
        """
        return pulumi.get(self, "app_secret_name")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGithubTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGithubTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGithubTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGithubTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGithubTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitlab(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "includeSubgroups":
            suggest = "include_subgroups"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitlab. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitlab.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitlab.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: str,
                 all_branches: Optional[bool] = None,
                 api: Optional[str] = None,
                 include_subgroups: Optional[bool] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitlabTokenRef'] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param bool include_subgroups: Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitlabTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "group", group)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if include_subgroups is not None:
            pulumi.set(__self__, "include_subgroups", include_subgroups)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter(name="includeSubgroups")
    def include_subgroups(self) -> Optional[bool]:
        """
        Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.
        """
        return pulumi.get(self, "include_subgroups")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitlabTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitlabTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitlabTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitlabTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitlabTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixGeneratorSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixGeneratorSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixGeneratorSelectorMatchExpressionArgs'] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, Any] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixGeneratorSelectorMatchExpression']]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixGeneratorSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str key: The label key that the selector applies to.
        :param str operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param Sequence[str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMatrixTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMatrixTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMatrixTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMerge(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mergeKeys":
            suggest = "merge_keys"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMerge. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMerge.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMerge.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 generators: Sequence['outputs.ApplicationSetSpecGeneratorMergeGenerator'],
                 merge_keys: Sequence[str],
                 template: Optional['outputs.ApplicationSetSpecGeneratorMergeTemplate'] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorArgs'] generators: Application set generators. Generators are responsible for generating parameters, which are then rendered into the template: fields of the ApplicationSet resource.
        :param Sequence[str] merge_keys: Keys to merge into resulting parameter set.
        :param 'ApplicationSetSpecGeneratorMergeTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        pulumi.set(__self__, "generators", generators)
        pulumi.set(__self__, "merge_keys", merge_keys)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter
    def generators(self) -> Sequence['outputs.ApplicationSetSpecGeneratorMergeGenerator']:
        """
        Application set generators. Generators are responsible for generating parameters, which are then rendered into the template: fields of the ApplicationSet resource.
        """
        return pulumi.get(self, "generators")

    @property
    @pulumi.getter(name="mergeKeys")
    def merge_keys(self) -> Sequence[str]:
        """
        Keys to merge into resulting parameter set.
        """
        return pulumi.get(self, "merge_keys")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGenerator(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterDecisionResources":
            suggest = "cluster_decision_resources"
        elif key == "pullRequests":
            suggest = "pull_requests"
        elif key == "scmProviders":
            suggest = "scm_providers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGenerator. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGenerator.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGenerator.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_decision_resources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResource']] = None,
                 clusters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorCluster']] = None,
                 gits: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorGit']] = None,
                 lists: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorList']] = None,
                 matrices: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrix']] = None,
                 merges: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMerge']] = None,
                 pull_requests: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequest']] = None,
                 scm_providers: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProvider']] = None,
                 selector: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorSelector'] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceArgs'] cluster_decision_resources: The [cluster decision resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/) generates a list of Argo CD clusters.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorClusterArgs'] clusters: The [cluster generator](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/) produces parameters based on the list of items found within the cluster secret.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorGitArgs'] gits: [Git generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/) generates parameters using either the directory structure of a specified Git repository (directory generator), or, using the contents of JSON/YAML files found within a specified repository (file generator).
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorListArgs'] lists: [List generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/) generate parameters based on an arbitrary list of key/value pairs (as long as the values are string values).
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixArgs'] matrices: [Matrix generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix/) combine the parameters generated by two child generators, iterating through every combination of each generator's generated parameters. Take note of the [restrictions](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix/#restrictions) regarding their usage - particularly regarding nesting matrix generators.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeArgs'] merges: [Merge generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge/) combine parameters produced by the base (first) generator with matching parameter sets produced by subsequent generators. Take note of the [restrictions](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge/#restrictions) regarding their usage - particularly regarding nesting merge generators.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorPullRequestArgs'] pull_requests: [Pull Request generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/) uses the API of an SCMaaS provider to automatically discover open pull requests within a repository.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorScmProviderArgs'] scm_providers: [SCM Provider generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/) uses the API of an SCMaaS provider to automatically discover repositories within an organization.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorSelectorArgs' selector: Label selector used to narrow the scope of targeted clusters.
        """
        if cluster_decision_resources is not None:
            pulumi.set(__self__, "cluster_decision_resources", cluster_decision_resources)
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if gits is not None:
            pulumi.set(__self__, "gits", gits)
        if lists is not None:
            pulumi.set(__self__, "lists", lists)
        if matrices is not None:
            pulumi.set(__self__, "matrices", matrices)
        if merges is not None:
            pulumi.set(__self__, "merges", merges)
        if pull_requests is not None:
            pulumi.set(__self__, "pull_requests", pull_requests)
        if scm_providers is not None:
            pulumi.set(__self__, "scm_providers", scm_providers)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter(name="clusterDecisionResources")
    def cluster_decision_resources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResource']]:
        """
        The [cluster decision resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/) generates a list of Argo CD clusters.
        """
        return pulumi.get(self, "cluster_decision_resources")

    @property
    @pulumi.getter
    def clusters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorCluster']]:
        """
        The [cluster generator](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/) produces parameters based on the list of items found within the cluster secret.
        """
        return pulumi.get(self, "clusters")

    @property
    @pulumi.getter
    def gits(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorGit']]:
        """
        [Git generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/) generates parameters using either the directory structure of a specified Git repository (directory generator), or, using the contents of JSON/YAML files found within a specified repository (file generator).
        """
        return pulumi.get(self, "gits")

    @property
    @pulumi.getter
    def lists(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorList']]:
        """
        [List generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/) generate parameters based on an arbitrary list of key/value pairs (as long as the values are string values).
        """
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter
    def matrices(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrix']]:
        """
        [Matrix generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix/) combine the parameters generated by two child generators, iterating through every combination of each generator's generated parameters. Take note of the [restrictions](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix/#restrictions) regarding their usage - particularly regarding nesting matrix generators.
        """
        return pulumi.get(self, "matrices")

    @property
    @pulumi.getter
    def merges(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMerge']]:
        """
        [Merge generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge/) combine parameters produced by the base (first) generator with matching parameter sets produced by subsequent generators. Take note of the [restrictions](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge/#restrictions) regarding their usage - particularly regarding nesting merge generators.
        """
        return pulumi.get(self, "merges")

    @property
    @pulumi.getter(name="pullRequests")
    def pull_requests(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequest']]:
        """
        [Pull Request generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/) uses the API of an SCMaaS provider to automatically discover open pull requests within a repository.
        """
        return pulumi.get(self, "pull_requests")

    @property
    @pulumi.getter(name="scmProviders")
    def scm_providers(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProvider']]:
        """
        [SCM Provider generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/) uses the API of an SCMaaS provider to automatically discover repositories within an organization.
        """
        return pulumi.get(self, "scm_providers")

    @property
    @pulumi.getter
    def selector(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorSelector']:
        """
        Label selector used to narrow the scope of targeted clusters.
        """
        return pulumi.get(self, "selector")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorCluster(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 selector: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterSelector'] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplate'] = None,
                 values: Optional[Mapping[str, str]] = None):
        """
        :param bool enabled: Boolean value defaulting to `true` to indicate that this block has been added thereby allowing all other attributes to be optional.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterSelectorArgs' selector: Label selector used to narrow the scope of targeted clusters.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        :param Mapping[str, str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "enabled", enabled)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Boolean value defaulting to `true` to indicate that this block has been added thereby allowing all other attributes to be optional.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def selector(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterSelector']:
        """
        Label selector used to narrow the scope of targeted clusters.
        """
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter
    def values(self) -> Optional[Mapping[str, str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configMapRef":
            suggest = "config_map_ref"
        elif key == "labelSelector":
            suggest = "label_selector"
        elif key == "requeueAfterSeconds":
            suggest = "requeue_after_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_map_ref: str,
                 label_selector: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceLabelSelector'] = None,
                 name: Optional[str] = None,
                 requeue_after_seconds: Optional[str] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplate'] = None,
                 values: Optional[Mapping[str, str]] = None):
        """
        :param str config_map_ref: ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorArgs' label_selector: Label selector used to find the resource defined in the `config_map_ref`. Alternative to `name`.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str requeue_after_seconds: How often to check for changes (in seconds). Default: 3min.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        :param Mapping[str, str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "config_map_ref", config_map_ref)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if requeue_after_seconds is not None:
            pulumi.set(__self__, "requeue_after_seconds", requeue_after_seconds)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> str:
        """
        ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.
        """
        return pulumi.get(self, "config_map_ref")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceLabelSelector']:
        """
        Label selector used to find the resource defined in the `config_map_ref`. Alternative to `name`.
        """
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="requeueAfterSeconds")
    def requeue_after_seconds(self) -> Optional[str]:
        """
        How often to check for changes (in seconds). Default: 3min.
        """
        return pulumi.get(self, "requeue_after_seconds")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter
    def values(self) -> Optional[Mapping[str, str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceLabelSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceLabelSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceLabelSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceLabelSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpressionArgs'] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, Any] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression']]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str key: The label key that the selector applies to.
        :param str operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param Sequence[str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorClusterSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorClusterSelectorMatchExpressionArgs'] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, Any] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterSelectorMatchExpression']]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str key: The label key that the selector applies to.
        :param str operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param Sequence[str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorGit(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "pathParamPrefix":
            suggest = "path_param_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorGit. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorGit.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorGit.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repo_url: str,
                 directories: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitDirectory']] = None,
                 files: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitFile']] = None,
                 path_param_prefix: Optional[str] = None,
                 revision: Optional[str] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplate'] = None):
        """
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorGitDirectoryArgs'] directories: Path/directory specific options.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorGitFileArgs'] files: List of files in the source repository to use when template the Application.
        :param str path_param_prefix: Prefix for all path-related parameter names.
        :param str revision: Revision of the source repository to use.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        pulumi.set(__self__, "repo_url", repo_url)
        if directories is not None:
            pulumi.set(__self__, "directories", directories)
        if files is not None:
            pulumi.set(__self__, "files", files)
        if path_param_prefix is not None:
            pulumi.set(__self__, "path_param_prefix", path_param_prefix)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> str:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter
    def directories(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitDirectory']]:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directories")

    @property
    @pulumi.getter
    def files(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitFile']]:
        """
        List of files in the source repository to use when template the Application.
        """
        return pulumi.get(self, "files")

    @property
    @pulumi.getter(name="pathParamPrefix")
    def path_param_prefix(self) -> Optional[str]:
        """
        Prefix for all path-related parameter names.
        """
        return pulumi.get(self, "path_param_prefix")

    @property
    @pulumi.getter
    def revision(self) -> Optional[str]:
        """
        Revision of the source repository to use.
        """
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorGitDirectory(dict):
    def __init__(__self__, *,
                 path: str,
                 exclude: Optional[bool] = None):
        """
        :param str path: Path to the file containing the values for the Helm parameter.
        :param bool exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        pulumi.set(__self__, "path", path)
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def exclude(self) -> Optional[bool]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorGitFile(dict):
    def __init__(__self__, *,
                 path: str):
        """
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorGitTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorGitTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorList(dict):
    def __init__(__self__, *,
                 elements: Sequence[Mapping[str, str]],
                 template: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplate'] = None):
        """
        :param Sequence[Mapping[str, str]] elements: List of key/value pairs to pass as parameters into the template
        :param 'ApplicationSetSpecGeneratorMergeGeneratorListTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        pulumi.set(__self__, "elements", elements)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter
    def elements(self) -> Sequence[Mapping[str, str]]:
        """
        List of key/value pairs to pass as parameters into the template
        """
        return pulumi.get(self, "elements")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorListTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorListTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorListTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrix(dict):
    def __init__(__self__, *,
                 generators: Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGenerator'],
                 template: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplate'] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorArgs'] generators: Application set generators. Generators are responsible for generating parameters, which are then rendered into the template: fields of the ApplicationSet resource.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        pulumi.set(__self__, "generators", generators)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter
    def generators(self) -> Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGenerator']:
        """
        Application set generators. Generators are responsible for generating parameters, which are then rendered into the template: fields of the ApplicationSet resource.
        """
        return pulumi.get(self, "generators")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGenerator(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterDecisionResources":
            suggest = "cluster_decision_resources"
        elif key == "pullRequests":
            suggest = "pull_requests"
        elif key == "scmProviders":
            suggest = "scm_providers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGenerator. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGenerator.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGenerator.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_decision_resources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResource']] = None,
                 clusters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorCluster']] = None,
                 gits: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGit']] = None,
                 lists: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorList']] = None,
                 pull_requests: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequest']] = None,
                 scm_providers: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProvider']] = None,
                 selector: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorSelector'] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceArgs'] cluster_decision_resources: The [cluster decision resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/) generates a list of Argo CD clusters.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterArgs'] clusters: The [cluster generator](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/) produces parameters based on the list of items found within the cluster secret.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitArgs'] gits: [Git generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/) generates parameters using either the directory structure of a specified Git repository (directory generator), or, using the contents of JSON/YAML files found within a specified repository (file generator).
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListArgs'] lists: [List generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/) generate parameters based on an arbitrary list of key/value pairs (as long as the values are string values).
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestArgs'] pull_requests: [Pull Request generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/) uses the API of an SCMaaS provider to automatically discover open pull requests within a repository.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderArgs'] scm_providers: [SCM Provider generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/) uses the API of an SCMaaS provider to automatically discover repositories within an organization.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorSelectorArgs' selector: Label selector used to narrow the scope of targeted clusters.
        """
        if cluster_decision_resources is not None:
            pulumi.set(__self__, "cluster_decision_resources", cluster_decision_resources)
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if gits is not None:
            pulumi.set(__self__, "gits", gits)
        if lists is not None:
            pulumi.set(__self__, "lists", lists)
        if pull_requests is not None:
            pulumi.set(__self__, "pull_requests", pull_requests)
        if scm_providers is not None:
            pulumi.set(__self__, "scm_providers", scm_providers)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter(name="clusterDecisionResources")
    def cluster_decision_resources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResource']]:
        """
        The [cluster decision resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/) generates a list of Argo CD clusters.
        """
        return pulumi.get(self, "cluster_decision_resources")

    @property
    @pulumi.getter
    def clusters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorCluster']]:
        """
        The [cluster generator](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/) produces parameters based on the list of items found within the cluster secret.
        """
        return pulumi.get(self, "clusters")

    @property
    @pulumi.getter
    def gits(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGit']]:
        """
        [Git generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/) generates parameters using either the directory structure of a specified Git repository (directory generator), or, using the contents of JSON/YAML files found within a specified repository (file generator).
        """
        return pulumi.get(self, "gits")

    @property
    @pulumi.getter
    def lists(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorList']]:
        """
        [List generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/) generate parameters based on an arbitrary list of key/value pairs (as long as the values are string values).
        """
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter(name="pullRequests")
    def pull_requests(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequest']]:
        """
        [Pull Request generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/) uses the API of an SCMaaS provider to automatically discover open pull requests within a repository.
        """
        return pulumi.get(self, "pull_requests")

    @property
    @pulumi.getter(name="scmProviders")
    def scm_providers(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProvider']]:
        """
        [SCM Provider generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/) uses the API of an SCMaaS provider to automatically discover repositories within an organization.
        """
        return pulumi.get(self, "scm_providers")

    @property
    @pulumi.getter
    def selector(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorSelector']:
        """
        Label selector used to narrow the scope of targeted clusters.
        """
        return pulumi.get(self, "selector")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorCluster(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 selector: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterSelector'] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplate'] = None,
                 values: Optional[Mapping[str, str]] = None):
        """
        :param bool enabled: Boolean value defaulting to `true` to indicate that this block has been added thereby allowing all other attributes to be optional.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterSelectorArgs' selector: Label selector used to narrow the scope of targeted clusters.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        :param Mapping[str, str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "enabled", enabled)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Boolean value defaulting to `true` to indicate that this block has been added thereby allowing all other attributes to be optional.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def selector(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterSelector']:
        """
        Label selector used to narrow the scope of targeted clusters.
        """
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter
    def values(self) -> Optional[Mapping[str, str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configMapRef":
            suggest = "config_map_ref"
        elif key == "labelSelector":
            suggest = "label_selector"
        elif key == "requeueAfterSeconds":
            suggest = "requeue_after_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_map_ref: str,
                 label_selector: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector'] = None,
                 name: Optional[str] = None,
                 requeue_after_seconds: Optional[str] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplate'] = None,
                 values: Optional[Mapping[str, str]] = None):
        """
        :param str config_map_ref: ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorArgs' label_selector: Label selector used to find the resource defined in the `config_map_ref`. Alternative to `name`.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str requeue_after_seconds: How often to check for changes (in seconds). Default: 3min.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        :param Mapping[str, str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "config_map_ref", config_map_ref)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if requeue_after_seconds is not None:
            pulumi.set(__self__, "requeue_after_seconds", requeue_after_seconds)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> str:
        """
        ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.
        """
        return pulumi.get(self, "config_map_ref")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector']:
        """
        Label selector used to find the resource defined in the `config_map_ref`. Alternative to `name`.
        """
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="requeueAfterSeconds")
    def requeue_after_seconds(self) -> Optional[str]:
        """
        How often to check for changes (in seconds). Default: 3min.
        """
        return pulumi.get(self, "requeue_after_seconds")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter
    def values(self) -> Optional[Mapping[str, str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpressionArgs'] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, Any] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression']]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str key: The label key that the selector applies to.
        :param str operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param Sequence[str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterSelectorMatchExpressionArgs'] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, Any] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterSelectorMatchExpression']]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str key: The label key that the selector applies to.
        :param str operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param Sequence[str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGit(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "pathParamPrefix":
            suggest = "path_param_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGit. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGit.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGit.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repo_url: str,
                 directories: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitDirectory']] = None,
                 files: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitFile']] = None,
                 path_param_prefix: Optional[str] = None,
                 revision: Optional[str] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplate'] = None):
        """
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitDirectoryArgs'] directories: Path/directory specific options.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitFileArgs'] files: List of files in the source repository to use when template the Application.
        :param str path_param_prefix: Prefix for all path-related parameter names.
        :param str revision: Revision of the source repository to use.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        pulumi.set(__self__, "repo_url", repo_url)
        if directories is not None:
            pulumi.set(__self__, "directories", directories)
        if files is not None:
            pulumi.set(__self__, "files", files)
        if path_param_prefix is not None:
            pulumi.set(__self__, "path_param_prefix", path_param_prefix)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> str:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter
    def directories(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitDirectory']]:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directories")

    @property
    @pulumi.getter
    def files(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitFile']]:
        """
        List of files in the source repository to use when template the Application.
        """
        return pulumi.get(self, "files")

    @property
    @pulumi.getter(name="pathParamPrefix")
    def path_param_prefix(self) -> Optional[str]:
        """
        Prefix for all path-related parameter names.
        """
        return pulumi.get(self, "path_param_prefix")

    @property
    @pulumi.getter
    def revision(self) -> Optional[str]:
        """
        Revision of the source repository to use.
        """
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitDirectory(dict):
    def __init__(__self__, *,
                 path: str,
                 exclude: Optional[bool] = None):
        """
        :param str path: Path to the file containing the values for the Helm parameter.
        :param bool exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        pulumi.set(__self__, "path", path)
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def exclude(self) -> Optional[bool]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitFile(dict):
    def __init__(__self__, *,
                 path: str):
        """
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorList(dict):
    def __init__(__self__, *,
                 elements: Sequence[Mapping[str, str]],
                 template: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplate'] = None):
        """
        :param Sequence[Mapping[str, str]] elements: List of key/value pairs to pass as parameters into the template
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        pulumi.set(__self__, "elements", elements)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter
    def elements(self) -> Sequence[Mapping[str, str]]:
        """
        List of key/value pairs to pass as parameters into the template
        """
        return pulumi.get(self, "elements")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bitbucketServer":
            suggest = "bitbucket_server"
        elif key == "requeueAfterSeconds":
            suggest = "requeue_after_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitbucket_server: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServer'] = None,
                 filters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestFilter']] = None,
                 gitea: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitea'] = None,
                 github: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGithub'] = None,
                 gitlab: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitlab'] = None,
                 requeue_after_seconds: Optional[str] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplate'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServerArgs' bitbucket_server: Fetch pull requests from a repo hosted on a Bitbucket Server.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestFilterArgs'] filters: Filters allow selecting which pull requests to generate for.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaArgs' gitea: Specify the repository from which to fetch the Gitea Pull requests.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGithubArgs' github: Specify the repository from which to fetch the GitHub Pull requests.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitlabArgs' gitlab: Specify the project from which to fetch the GitLab merge requests.
        :param str requeue_after_seconds: How often to check for changes (in seconds). Default: 3min.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        if bitbucket_server is not None:
            pulumi.set(__self__, "bitbucket_server", bitbucket_server)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if gitea is not None:
            pulumi.set(__self__, "gitea", gitea)
        if github is not None:
            pulumi.set(__self__, "github", github)
        if gitlab is not None:
            pulumi.set(__self__, "gitlab", gitlab)
        if requeue_after_seconds is not None:
            pulumi.set(__self__, "requeue_after_seconds", requeue_after_seconds)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="bitbucketServer")
    def bitbucket_server(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServer']:
        """
        Fetch pull requests from a repo hosted on a Bitbucket Server.
        """
        return pulumi.get(self, "bitbucket_server")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestFilter']]:
        """
        Filters allow selecting which pull requests to generate for.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def gitea(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitea']:
        """
        Specify the repository from which to fetch the Gitea Pull requests.
        """
        return pulumi.get(self, "gitea")

    @property
    @pulumi.getter
    def github(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGithub']:
        """
        Specify the repository from which to fetch the GitHub Pull requests.
        """
        return pulumi.get(self, "github")

    @property
    @pulumi.getter
    def gitlab(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitlab']:
        """
        Specify the project from which to fetch the GitLab merge requests.
        """
        return pulumi.get(self, "gitlab")

    @property
    @pulumi.getter(name="requeueAfterSeconds")
    def requeue_after_seconds(self) -> Optional[str]:
        """
        How often to check for changes (in seconds). Default: 3min.
        """
        return pulumi.get(self, "requeue_after_seconds")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basicAuth":
            suggest = "basic_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api: str,
                 project: str,
                 repo: str,
                 basic_auth: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth'] = None):
        """
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param str repo: Repo name to scan.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthArgs' basic_auth: Credentials for Basic auth.
        """
        pulumi.set(__self__, "api", api)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "repo", repo)
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)

    @property
    @pulumi.getter
    def api(self) -> str:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def repo(self) -> str:
        """
        Repo name to scan.
        """
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth']:
        """
        Credentials for Basic auth.
        """
        return pulumi.get(self, "basic_auth")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passwordRef":
            suggest = "password_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef'] = None,
                 username: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRefArgs' password_ref: Password (or personal access token) reference.
        :param str username: Username for Basic auth.
        """
        if password_ref is not None:
            pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef']:
        """
        Password (or personal access token) reference.
        """
        return pulumi.get(self, "password_ref")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        Username for Basic auth.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "branchMatch":
            suggest = "branch_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 branch_match: Optional[str] = None):
        """
        :param str branch_match: A regex which must match the branch name.
        """
        if branch_match is not None:
            pulumi.set(__self__, "branch_match", branch_match)

    @property
    @pulumi.getter(name="branchMatch")
    def branch_match(self) -> Optional[str]:
        """
        A regex which must match the branch name.
        """
        return pulumi.get(self, "branch_match")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api: str,
                 owner: str,
                 repo: str,
                 insecure: Optional[bool] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaTokenRef'] = None):
        """
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str owner: Gitea org or user to scan.
        :param str repo: Repo name to scan.
        :param bool insecure: Allow insecure tls, for self-signed certificates; default: false.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "api", api)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "repo", repo)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def api(self) -> str:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Gitea org or user to scan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def repo(self) -> str:
        """
        Repo name to scan.
        """
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter
    def insecure(self) -> Optional[bool]:
        """
        Allow insecure tls, for self-signed certificates; default: false.
        """
        return pulumi.get(self, "insecure")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGithub(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appSecretName":
            suggest = "app_secret_name"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGithub. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGithub.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGithub.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owner: str,
                 repo: str,
                 api: Optional[str] = None,
                 app_secret_name: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGithubTokenRef'] = None):
        """
        :param str owner: Gitea org or user to scan.
        :param str repo: Repo name to scan.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str app_secret_name: Reference to a GitHub App repo-creds secret with permission to access pull requests.
        :param Sequence[str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGithubTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "repo", repo)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if app_secret_name is not None:
            pulumi.set(__self__, "app_secret_name", app_secret_name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Gitea org or user to scan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def repo(self) -> str:
        """
        Repo name to scan.
        """
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter(name="appSecretName")
    def app_secret_name(self) -> Optional[str]:
        """
        Reference to a GitHub App repo-creds secret with permission to access pull requests.
        """
        return pulumi.get(self, "app_secret_name")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGithubTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGithubTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGithubTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGithubTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGithubTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitlab(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pullRequestState":
            suggest = "pull_request_state"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitlab. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitlab.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitlab.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 project: str,
                 api: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 pull_request_state: Optional[str] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitlabTokenRef'] = None):
        """
        :param str project: The project the application belongs to. Defaults to `default`.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param Sequence[str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str pull_request_state: additional MRs filter to get only those with a certain state. Default:  "" (all states).
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitlabTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "project", project)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if pull_request_state is not None:
            pulumi.set(__self__, "pull_request_state", pull_request_state)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="pullRequestState")
    def pull_request_state(self) -> Optional[str]:
        """
        additional MRs filter to get only those with a certain state. Default:  "" (all states).
        """
        return pulumi.get(self, "pull_request_state")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitlabTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitlabTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitlabTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitlabTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitlabTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureDevops":
            suggest = "azure_devops"
        elif key == "bitbucketCloud":
            suggest = "bitbucket_cloud"
        elif key == "bitbucketServer":
            suggest = "bitbucket_server"
        elif key == "cloneProtocol":
            suggest = "clone_protocol"
        elif key == "requeueAfterSeconds":
            suggest = "requeue_after_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_devops: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderAzureDevops'] = None,
                 bitbucket_cloud: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketCloud'] = None,
                 bitbucket_server: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServer'] = None,
                 clone_protocol: Optional[str] = None,
                 filters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderFilter']] = None,
                 gitea: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitea'] = None,
                 github: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGithub'] = None,
                 gitlab: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlab'] = None,
                 requeue_after_seconds: Optional[str] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplate'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderAzureDevopsArgs' azure_devops: Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketCloudArgs' bitbucket_cloud: Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServerArgs' bitbucket_server: Fetch pull requests from a repo hosted on a Bitbucket Server.
        :param str clone_protocol: Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderFilterArgs'] filters: Filters allow selecting which pull requests to generate for.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGiteaArgs' gitea: Specify the repository from which to fetch the Gitea Pull requests.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGithubArgs' github: Specify the repository from which to fetch the GitHub Pull requests.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabArgs' gitlab: Specify the project from which to fetch the GitLab merge requests.
        :param str requeue_after_seconds: How often to check for changes (in seconds). Default: 3min.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        if azure_devops is not None:
            pulumi.set(__self__, "azure_devops", azure_devops)
        if bitbucket_cloud is not None:
            pulumi.set(__self__, "bitbucket_cloud", bitbucket_cloud)
        if bitbucket_server is not None:
            pulumi.set(__self__, "bitbucket_server", bitbucket_server)
        if clone_protocol is not None:
            pulumi.set(__self__, "clone_protocol", clone_protocol)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if gitea is not None:
            pulumi.set(__self__, "gitea", gitea)
        if github is not None:
            pulumi.set(__self__, "github", github)
        if gitlab is not None:
            pulumi.set(__self__, "gitlab", gitlab)
        if requeue_after_seconds is not None:
            pulumi.set(__self__, "requeue_after_seconds", requeue_after_seconds)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="azureDevops")
    def azure_devops(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderAzureDevops']:
        """
        Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.
        """
        return pulumi.get(self, "azure_devops")

    @property
    @pulumi.getter(name="bitbucketCloud")
    def bitbucket_cloud(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketCloud']:
        """
        Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.
        """
        return pulumi.get(self, "bitbucket_cloud")

    @property
    @pulumi.getter(name="bitbucketServer")
    def bitbucket_server(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServer']:
        """
        Fetch pull requests from a repo hosted on a Bitbucket Server.
        """
        return pulumi.get(self, "bitbucket_server")

    @property
    @pulumi.getter(name="cloneProtocol")
    def clone_protocol(self) -> Optional[str]:
        """
        Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.
        """
        return pulumi.get(self, "clone_protocol")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderFilter']]:
        """
        Filters allow selecting which pull requests to generate for.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def gitea(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitea']:
        """
        Specify the repository from which to fetch the Gitea Pull requests.
        """
        return pulumi.get(self, "gitea")

    @property
    @pulumi.getter
    def github(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGithub']:
        """
        Specify the repository from which to fetch the GitHub Pull requests.
        """
        return pulumi.get(self, "github")

    @property
    @pulumi.getter
    def gitlab(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlab']:
        """
        Specify the project from which to fetch the GitLab merge requests.
        """
        return pulumi.get(self, "gitlab")

    @property
    @pulumi.getter(name="requeueAfterSeconds")
    def requeue_after_seconds(self) -> Optional[str]:
        """
        How often to check for changes (in seconds). Default: 3min.
        """
        return pulumi.get(self, "requeue_after_seconds")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderAzureDevops(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "teamProject":
            suggest = "team_project"
        elif key == "accessTokenRef":
            suggest = "access_token_ref"
        elif key == "allBranches":
            suggest = "all_branches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderAzureDevops. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderAzureDevops.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderAzureDevops.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 organization: str,
                 team_project: str,
                 access_token_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef'] = None,
                 all_branches: Optional[bool] = None,
                 api: Optional[str] = None):
        """
        :param str organization: Azure Devops organization. E.g. "my-organization".
        :param str team_project: Azure Devops team project. E.g. "my-team".
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRefArgs' access_token_ref: The Personal Access Token (PAT) to use when connecting.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "team_project", team_project)
        if access_token_ref is not None:
            pulumi.set(__self__, "access_token_ref", access_token_ref)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if api is not None:
            pulumi.set(__self__, "api", api)

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        Azure Devops organization. E.g. "my-organization".
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="teamProject")
    def team_project(self) -> str:
        """
        Azure Devops team project. E.g. "my-team".
        """
        return pulumi.get(self, "team_project")

    @property
    @pulumi.getter(name="accessTokenRef")
    def access_token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef']:
        """
        The Personal Access Token (PAT) to use when connecting.
        """
        return pulumi.get(self, "access_token_ref")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketCloud(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "appPasswordRef":
            suggest = "app_password_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketCloud. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketCloud.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketCloud.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owner: str,
                 user: str,
                 all_branches: Optional[bool] = None,
                 app_password_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef'] = None):
        """
        :param str owner: Gitea org or user to scan.
        :param str user: Bitbucket user to use when authenticating. Should have a "member" role to be able to read all repositories and branches.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRefArgs' app_password_ref: The app password to use for the user. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/.
        """
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "user", user)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if app_password_ref is not None:
            pulumi.set(__self__, "app_password_ref", app_password_ref)

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Gitea org or user to scan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def user(self) -> str:
        """
        Bitbucket user to use when authenticating. Should have a "member" role to be able to read all repositories and branches.
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter(name="appPasswordRef")
    def app_password_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef']:
        """
        The app password to use for the user. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/.
        """
        return pulumi.get(self, "app_password_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "basicAuth":
            suggest = "basic_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api: str,
                 project: str,
                 all_branches: Optional[bool] = None,
                 basic_auth: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth'] = None):
        """
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthArgs' basic_auth: Credentials for Basic auth.
        """
        pulumi.set(__self__, "api", api)
        pulumi.set(__self__, "project", project)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)

    @property
    @pulumi.getter
    def api(self) -> str:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth']:
        """
        Credentials for Basic auth.
        """
        return pulumi.get(self, "basic_auth")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passwordRef":
            suggest = "password_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef'] = None,
                 username: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRefArgs' password_ref: Password (or personal access token) reference.
        :param str username: Username for Basic auth.
        """
        if password_ref is not None:
            pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef']:
        """
        Password (or personal access token) reference.
        """
        return pulumi.get(self, "password_ref")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        Username for Basic auth.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "branchMatch":
            suggest = "branch_match"
        elif key == "labelMatch":
            suggest = "label_match"
        elif key == "pathsDoNotExists":
            suggest = "paths_do_not_exists"
        elif key == "pathsExists":
            suggest = "paths_exists"
        elif key == "repositoryMatch":
            suggest = "repository_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 branch_match: Optional[str] = None,
                 label_match: Optional[str] = None,
                 paths_do_not_exists: Optional[Sequence[str]] = None,
                 paths_exists: Optional[Sequence[str]] = None,
                 repository_match: Optional[str] = None):
        """
        :param str branch_match: A regex which must match the branch name.
        :param str label_match: A regex which must match at least one label.
        :param Sequence[str] paths_do_not_exists: An array of paths, all of which must not exist.
        :param Sequence[str] paths_exists: An array of paths, all of which must exist.
        :param str repository_match: A regex for repo names.
        """
        if branch_match is not None:
            pulumi.set(__self__, "branch_match", branch_match)
        if label_match is not None:
            pulumi.set(__self__, "label_match", label_match)
        if paths_do_not_exists is not None:
            pulumi.set(__self__, "paths_do_not_exists", paths_do_not_exists)
        if paths_exists is not None:
            pulumi.set(__self__, "paths_exists", paths_exists)
        if repository_match is not None:
            pulumi.set(__self__, "repository_match", repository_match)

    @property
    @pulumi.getter(name="branchMatch")
    def branch_match(self) -> Optional[str]:
        """
        A regex which must match the branch name.
        """
        return pulumi.get(self, "branch_match")

    @property
    @pulumi.getter(name="labelMatch")
    def label_match(self) -> Optional[str]:
        """
        A regex which must match at least one label.
        """
        return pulumi.get(self, "label_match")

    @property
    @pulumi.getter(name="pathsDoNotExists")
    def paths_do_not_exists(self) -> Optional[Sequence[str]]:
        """
        An array of paths, all of which must not exist.
        """
        return pulumi.get(self, "paths_do_not_exists")

    @property
    @pulumi.getter(name="pathsExists")
    def paths_exists(self) -> Optional[Sequence[str]]:
        """
        An array of paths, all of which must exist.
        """
        return pulumi.get(self, "paths_exists")

    @property
    @pulumi.getter(name="repositoryMatch")
    def repository_match(self) -> Optional[str]:
        """
        A regex for repo names.
        """
        return pulumi.get(self, "repository_match")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owner: str,
                 all_branches: Optional[bool] = None,
                 api: Optional[str] = None,
                 insecure: Optional[bool] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGiteaTokenRef'] = None):
        """
        :param str owner: Gitea org or user to scan.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param bool insecure: Allow insecure tls, for self-signed certificates; default: false.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGiteaTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "owner", owner)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Gitea org or user to scan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def insecure(self) -> Optional[bool]:
        """
        Allow insecure tls, for self-signed certificates; default: false.
        """
        return pulumi.get(self, "insecure")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGiteaTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGiteaTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGiteaTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGiteaTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGiteaTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGithub(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "appSecretName":
            suggest = "app_secret_name"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGithub. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGithub.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGithub.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 organization: str,
                 all_branches: Optional[bool] = None,
                 api: Optional[str] = None,
                 app_secret_name: Optional[str] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGithubTokenRef'] = None):
        """
        :param str organization: Azure Devops organization. E.g. "my-organization".
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str app_secret_name: Reference to a GitHub App repo-creds secret with permission to access pull requests.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGithubTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "organization", organization)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if app_secret_name is not None:
            pulumi.set(__self__, "app_secret_name", app_secret_name)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        Azure Devops organization. E.g. "my-organization".
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter(name="appSecretName")
    def app_secret_name(self) -> Optional[str]:
        """
        Reference to a GitHub App repo-creds secret with permission to access pull requests.
        """
        return pulumi.get(self, "app_secret_name")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGithubTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGithubTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGithubTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGithubTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGithubTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlab(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "includeSubgroups":
            suggest = "include_subgroups"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlab. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlab.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlab.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: str,
                 all_branches: Optional[bool] = None,
                 api: Optional[str] = None,
                 include_subgroups: Optional[bool] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabTokenRef'] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param bool include_subgroups: Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "group", group)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if include_subgroups is not None:
            pulumi.set(__self__, "include_subgroups", include_subgroups)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter(name="includeSubgroups")
    def include_subgroups(self) -> Optional[bool]:
        """
        Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.
        """
        return pulumi.get(self, "include_subgroups")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorSelectorMatchExpressionArgs'] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, Any] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorSelectorMatchExpression']]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str key: The label key that the selector applies to.
        :param str operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param Sequence[str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMerge(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mergeKeys":
            suggest = "merge_keys"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMerge. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMerge.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMerge.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 generators: Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGenerator'],
                 merge_keys: Sequence[str],
                 template: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplate'] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorArgs'] generators: Application set generators. Generators are responsible for generating parameters, which are then rendered into the template: fields of the ApplicationSet resource.
        :param Sequence[str] merge_keys: Keys to merge into resulting parameter set.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        pulumi.set(__self__, "generators", generators)
        pulumi.set(__self__, "merge_keys", merge_keys)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter
    def generators(self) -> Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGenerator']:
        """
        Application set generators. Generators are responsible for generating parameters, which are then rendered into the template: fields of the ApplicationSet resource.
        """
        return pulumi.get(self, "generators")

    @property
    @pulumi.getter(name="mergeKeys")
    def merge_keys(self) -> Sequence[str]:
        """
        Keys to merge into resulting parameter set.
        """
        return pulumi.get(self, "merge_keys")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGenerator(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterDecisionResources":
            suggest = "cluster_decision_resources"
        elif key == "pullRequests":
            suggest = "pull_requests"
        elif key == "scmProviders":
            suggest = "scm_providers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGenerator. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGenerator.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGenerator.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_decision_resources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResource']] = None,
                 clusters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorCluster']] = None,
                 gits: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGit']] = None,
                 lists: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorList']] = None,
                 pull_requests: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequest']] = None,
                 scm_providers: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProvider']] = None,
                 selector: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorSelector'] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceArgs'] cluster_decision_resources: The [cluster decision resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/) generates a list of Argo CD clusters.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterArgs'] clusters: The [cluster generator](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/) produces parameters based on the list of items found within the cluster secret.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitArgs'] gits: [Git generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/) generates parameters using either the directory structure of a specified Git repository (directory generator), or, using the contents of JSON/YAML files found within a specified repository (file generator).
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListArgs'] lists: [List generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/) generate parameters based on an arbitrary list of key/value pairs (as long as the values are string values).
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestArgs'] pull_requests: [Pull Request generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/) uses the API of an SCMaaS provider to automatically discover open pull requests within a repository.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderArgs'] scm_providers: [SCM Provider generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/) uses the API of an SCMaaS provider to automatically discover repositories within an organization.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorSelectorArgs' selector: Label selector used to narrow the scope of targeted clusters.
        """
        if cluster_decision_resources is not None:
            pulumi.set(__self__, "cluster_decision_resources", cluster_decision_resources)
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if gits is not None:
            pulumi.set(__self__, "gits", gits)
        if lists is not None:
            pulumi.set(__self__, "lists", lists)
        if pull_requests is not None:
            pulumi.set(__self__, "pull_requests", pull_requests)
        if scm_providers is not None:
            pulumi.set(__self__, "scm_providers", scm_providers)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter(name="clusterDecisionResources")
    def cluster_decision_resources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResource']]:
        """
        The [cluster decision resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/) generates a list of Argo CD clusters.
        """
        return pulumi.get(self, "cluster_decision_resources")

    @property
    @pulumi.getter
    def clusters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorCluster']]:
        """
        The [cluster generator](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/) produces parameters based on the list of items found within the cluster secret.
        """
        return pulumi.get(self, "clusters")

    @property
    @pulumi.getter
    def gits(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGit']]:
        """
        [Git generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/) generates parameters using either the directory structure of a specified Git repository (directory generator), or, using the contents of JSON/YAML files found within a specified repository (file generator).
        """
        return pulumi.get(self, "gits")

    @property
    @pulumi.getter
    def lists(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorList']]:
        """
        [List generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/) generate parameters based on an arbitrary list of key/value pairs (as long as the values are string values).
        """
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter(name="pullRequests")
    def pull_requests(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequest']]:
        """
        [Pull Request generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/) uses the API of an SCMaaS provider to automatically discover open pull requests within a repository.
        """
        return pulumi.get(self, "pull_requests")

    @property
    @pulumi.getter(name="scmProviders")
    def scm_providers(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProvider']]:
        """
        [SCM Provider generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/) uses the API of an SCMaaS provider to automatically discover repositories within an organization.
        """
        return pulumi.get(self, "scm_providers")

    @property
    @pulumi.getter
    def selector(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorSelector']:
        """
        Label selector used to narrow the scope of targeted clusters.
        """
        return pulumi.get(self, "selector")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorCluster(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 selector: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterSelector'] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplate'] = None,
                 values: Optional[Mapping[str, str]] = None):
        """
        :param bool enabled: Boolean value defaulting to `true` to indicate that this block has been added thereby allowing all other attributes to be optional.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterSelectorArgs' selector: Label selector used to narrow the scope of targeted clusters.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        :param Mapping[str, str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "enabled", enabled)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Boolean value defaulting to `true` to indicate that this block has been added thereby allowing all other attributes to be optional.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def selector(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterSelector']:
        """
        Label selector used to narrow the scope of targeted clusters.
        """
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter
    def values(self) -> Optional[Mapping[str, str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configMapRef":
            suggest = "config_map_ref"
        elif key == "labelSelector":
            suggest = "label_selector"
        elif key == "requeueAfterSeconds":
            suggest = "requeue_after_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_map_ref: str,
                 label_selector: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceLabelSelector'] = None,
                 name: Optional[str] = None,
                 requeue_after_seconds: Optional[str] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplate'] = None,
                 values: Optional[Mapping[str, str]] = None):
        """
        :param str config_map_ref: ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorArgs' label_selector: Label selector used to find the resource defined in the `config_map_ref`. Alternative to `name`.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str requeue_after_seconds: How often to check for changes (in seconds). Default: 3min.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        :param Mapping[str, str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "config_map_ref", config_map_ref)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if requeue_after_seconds is not None:
            pulumi.set(__self__, "requeue_after_seconds", requeue_after_seconds)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> str:
        """
        ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.
        """
        return pulumi.get(self, "config_map_ref")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceLabelSelector']:
        """
        Label selector used to find the resource defined in the `config_map_ref`. Alternative to `name`.
        """
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="requeueAfterSeconds")
    def requeue_after_seconds(self) -> Optional[str]:
        """
        How often to check for changes (in seconds). Default: 3min.
        """
        return pulumi.get(self, "requeue_after_seconds")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter
    def values(self) -> Optional[Mapping[str, str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceLabelSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceLabelSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceLabelSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceLabelSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpressionArgs'] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, Any] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression']]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str key: The label key that the selector applies to.
        :param str operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param Sequence[str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterSelectorMatchExpressionArgs'] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, Any] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterSelectorMatchExpression']]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str key: The label key that the selector applies to.
        :param str operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param Sequence[str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGit(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "pathParamPrefix":
            suggest = "path_param_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGit. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGit.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGit.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repo_url: str,
                 directories: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitDirectory']] = None,
                 files: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitFile']] = None,
                 path_param_prefix: Optional[str] = None,
                 revision: Optional[str] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplate'] = None):
        """
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitDirectoryArgs'] directories: Path/directory specific options.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitFileArgs'] files: List of files in the source repository to use when template the Application.
        :param str path_param_prefix: Prefix for all path-related parameter names.
        :param str revision: Revision of the source repository to use.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        pulumi.set(__self__, "repo_url", repo_url)
        if directories is not None:
            pulumi.set(__self__, "directories", directories)
        if files is not None:
            pulumi.set(__self__, "files", files)
        if path_param_prefix is not None:
            pulumi.set(__self__, "path_param_prefix", path_param_prefix)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> str:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter
    def directories(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitDirectory']]:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directories")

    @property
    @pulumi.getter
    def files(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitFile']]:
        """
        List of files in the source repository to use when template the Application.
        """
        return pulumi.get(self, "files")

    @property
    @pulumi.getter(name="pathParamPrefix")
    def path_param_prefix(self) -> Optional[str]:
        """
        Prefix for all path-related parameter names.
        """
        return pulumi.get(self, "path_param_prefix")

    @property
    @pulumi.getter
    def revision(self) -> Optional[str]:
        """
        Revision of the source repository to use.
        """
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitDirectory(dict):
    def __init__(__self__, *,
                 path: str,
                 exclude: Optional[bool] = None):
        """
        :param str path: Path to the file containing the values for the Helm parameter.
        :param bool exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        pulumi.set(__self__, "path", path)
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def exclude(self) -> Optional[bool]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitFile(dict):
    def __init__(__self__, *,
                 path: str):
        """
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorList(dict):
    def __init__(__self__, *,
                 elements: Sequence[Mapping[str, str]],
                 template: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplate'] = None):
        """
        :param Sequence[Mapping[str, str]] elements: List of key/value pairs to pass as parameters into the template
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        pulumi.set(__self__, "elements", elements)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter
    def elements(self) -> Sequence[Mapping[str, str]]:
        """
        List of key/value pairs to pass as parameters into the template
        """
        return pulumi.get(self, "elements")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bitbucketServer":
            suggest = "bitbucket_server"
        elif key == "requeueAfterSeconds":
            suggest = "requeue_after_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitbucket_server: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServer'] = None,
                 filters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestFilter']] = None,
                 gitea: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitea'] = None,
                 github: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGithub'] = None,
                 gitlab: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitlab'] = None,
                 requeue_after_seconds: Optional[str] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplate'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServerArgs' bitbucket_server: Fetch pull requests from a repo hosted on a Bitbucket Server.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestFilterArgs'] filters: Filters allow selecting which pull requests to generate for.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGiteaArgs' gitea: Specify the repository from which to fetch the Gitea Pull requests.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGithubArgs' github: Specify the repository from which to fetch the GitHub Pull requests.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitlabArgs' gitlab: Specify the project from which to fetch the GitLab merge requests.
        :param str requeue_after_seconds: How often to check for changes (in seconds). Default: 3min.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        if bitbucket_server is not None:
            pulumi.set(__self__, "bitbucket_server", bitbucket_server)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if gitea is not None:
            pulumi.set(__self__, "gitea", gitea)
        if github is not None:
            pulumi.set(__self__, "github", github)
        if gitlab is not None:
            pulumi.set(__self__, "gitlab", gitlab)
        if requeue_after_seconds is not None:
            pulumi.set(__self__, "requeue_after_seconds", requeue_after_seconds)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="bitbucketServer")
    def bitbucket_server(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServer']:
        """
        Fetch pull requests from a repo hosted on a Bitbucket Server.
        """
        return pulumi.get(self, "bitbucket_server")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestFilter']]:
        """
        Filters allow selecting which pull requests to generate for.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def gitea(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitea']:
        """
        Specify the repository from which to fetch the Gitea Pull requests.
        """
        return pulumi.get(self, "gitea")

    @property
    @pulumi.getter
    def github(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGithub']:
        """
        Specify the repository from which to fetch the GitHub Pull requests.
        """
        return pulumi.get(self, "github")

    @property
    @pulumi.getter
    def gitlab(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitlab']:
        """
        Specify the project from which to fetch the GitLab merge requests.
        """
        return pulumi.get(self, "gitlab")

    @property
    @pulumi.getter(name="requeueAfterSeconds")
    def requeue_after_seconds(self) -> Optional[str]:
        """
        How often to check for changes (in seconds). Default: 3min.
        """
        return pulumi.get(self, "requeue_after_seconds")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basicAuth":
            suggest = "basic_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api: str,
                 project: str,
                 repo: str,
                 basic_auth: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth'] = None):
        """
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param str repo: Repo name to scan.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthArgs' basic_auth: Credentials for Basic auth.
        """
        pulumi.set(__self__, "api", api)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "repo", repo)
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)

    @property
    @pulumi.getter
    def api(self) -> str:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def repo(self) -> str:
        """
        Repo name to scan.
        """
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth']:
        """
        Credentials for Basic auth.
        """
        return pulumi.get(self, "basic_auth")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passwordRef":
            suggest = "password_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef'] = None,
                 username: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRefArgs' password_ref: Password (or personal access token) reference.
        :param str username: Username for Basic auth.
        """
        if password_ref is not None:
            pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef']:
        """
        Password (or personal access token) reference.
        """
        return pulumi.get(self, "password_ref")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        Username for Basic auth.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "branchMatch":
            suggest = "branch_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 branch_match: Optional[str] = None):
        """
        :param str branch_match: A regex which must match the branch name.
        """
        if branch_match is not None:
            pulumi.set(__self__, "branch_match", branch_match)

    @property
    @pulumi.getter(name="branchMatch")
    def branch_match(self) -> Optional[str]:
        """
        A regex which must match the branch name.
        """
        return pulumi.get(self, "branch_match")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api: str,
                 owner: str,
                 repo: str,
                 insecure: Optional[bool] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGiteaTokenRef'] = None):
        """
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str owner: Gitea org or user to scan.
        :param str repo: Repo name to scan.
        :param bool insecure: Allow insecure tls, for self-signed certificates; default: false.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGiteaTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "api", api)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "repo", repo)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def api(self) -> str:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Gitea org or user to scan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def repo(self) -> str:
        """
        Repo name to scan.
        """
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter
    def insecure(self) -> Optional[bool]:
        """
        Allow insecure tls, for self-signed certificates; default: false.
        """
        return pulumi.get(self, "insecure")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGiteaTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGiteaTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGiteaTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGiteaTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGiteaTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGithub(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appSecretName":
            suggest = "app_secret_name"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGithub. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGithub.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGithub.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owner: str,
                 repo: str,
                 api: Optional[str] = None,
                 app_secret_name: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGithubTokenRef'] = None):
        """
        :param str owner: Gitea org or user to scan.
        :param str repo: Repo name to scan.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str app_secret_name: Reference to a GitHub App repo-creds secret with permission to access pull requests.
        :param Sequence[str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGithubTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "repo", repo)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if app_secret_name is not None:
            pulumi.set(__self__, "app_secret_name", app_secret_name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Gitea org or user to scan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def repo(self) -> str:
        """
        Repo name to scan.
        """
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter(name="appSecretName")
    def app_secret_name(self) -> Optional[str]:
        """
        Reference to a GitHub App repo-creds secret with permission to access pull requests.
        """
        return pulumi.get(self, "app_secret_name")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGithubTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGithubTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGithubTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGithubTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGithubTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitlab(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pullRequestState":
            suggest = "pull_request_state"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitlab. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitlab.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitlab.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 project: str,
                 api: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 pull_request_state: Optional[str] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitlabTokenRef'] = None):
        """
        :param str project: The project the application belongs to. Defaults to `default`.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param Sequence[str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str pull_request_state: additional MRs filter to get only those with a certain state. Default:  "" (all states).
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitlabTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "project", project)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if pull_request_state is not None:
            pulumi.set(__self__, "pull_request_state", pull_request_state)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="pullRequestState")
    def pull_request_state(self) -> Optional[str]:
        """
        additional MRs filter to get only those with a certain state. Default:  "" (all states).
        """
        return pulumi.get(self, "pull_request_state")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitlabTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitlabTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitlabTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitlabTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitlabTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureDevops":
            suggest = "azure_devops"
        elif key == "bitbucketCloud":
            suggest = "bitbucket_cloud"
        elif key == "bitbucketServer":
            suggest = "bitbucket_server"
        elif key == "cloneProtocol":
            suggest = "clone_protocol"
        elif key == "requeueAfterSeconds":
            suggest = "requeue_after_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_devops: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderAzureDevops'] = None,
                 bitbucket_cloud: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketCloud'] = None,
                 bitbucket_server: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServer'] = None,
                 clone_protocol: Optional[str] = None,
                 filters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderFilter']] = None,
                 gitea: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitea'] = None,
                 github: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGithub'] = None,
                 gitlab: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitlab'] = None,
                 requeue_after_seconds: Optional[str] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplate'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderAzureDevopsArgs' azure_devops: Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketCloudArgs' bitbucket_cloud: Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServerArgs' bitbucket_server: Fetch pull requests from a repo hosted on a Bitbucket Server.
        :param str clone_protocol: Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderFilterArgs'] filters: Filters allow selecting which pull requests to generate for.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGiteaArgs' gitea: Specify the repository from which to fetch the Gitea Pull requests.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGithubArgs' github: Specify the repository from which to fetch the GitHub Pull requests.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitlabArgs' gitlab: Specify the project from which to fetch the GitLab merge requests.
        :param str requeue_after_seconds: How often to check for changes (in seconds). Default: 3min.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        if azure_devops is not None:
            pulumi.set(__self__, "azure_devops", azure_devops)
        if bitbucket_cloud is not None:
            pulumi.set(__self__, "bitbucket_cloud", bitbucket_cloud)
        if bitbucket_server is not None:
            pulumi.set(__self__, "bitbucket_server", bitbucket_server)
        if clone_protocol is not None:
            pulumi.set(__self__, "clone_protocol", clone_protocol)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if gitea is not None:
            pulumi.set(__self__, "gitea", gitea)
        if github is not None:
            pulumi.set(__self__, "github", github)
        if gitlab is not None:
            pulumi.set(__self__, "gitlab", gitlab)
        if requeue_after_seconds is not None:
            pulumi.set(__self__, "requeue_after_seconds", requeue_after_seconds)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="azureDevops")
    def azure_devops(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderAzureDevops']:
        """
        Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.
        """
        return pulumi.get(self, "azure_devops")

    @property
    @pulumi.getter(name="bitbucketCloud")
    def bitbucket_cloud(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketCloud']:
        """
        Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.
        """
        return pulumi.get(self, "bitbucket_cloud")

    @property
    @pulumi.getter(name="bitbucketServer")
    def bitbucket_server(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServer']:
        """
        Fetch pull requests from a repo hosted on a Bitbucket Server.
        """
        return pulumi.get(self, "bitbucket_server")

    @property
    @pulumi.getter(name="cloneProtocol")
    def clone_protocol(self) -> Optional[str]:
        """
        Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.
        """
        return pulumi.get(self, "clone_protocol")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderFilter']]:
        """
        Filters allow selecting which pull requests to generate for.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def gitea(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitea']:
        """
        Specify the repository from which to fetch the Gitea Pull requests.
        """
        return pulumi.get(self, "gitea")

    @property
    @pulumi.getter
    def github(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGithub']:
        """
        Specify the repository from which to fetch the GitHub Pull requests.
        """
        return pulumi.get(self, "github")

    @property
    @pulumi.getter
    def gitlab(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitlab']:
        """
        Specify the project from which to fetch the GitLab merge requests.
        """
        return pulumi.get(self, "gitlab")

    @property
    @pulumi.getter(name="requeueAfterSeconds")
    def requeue_after_seconds(self) -> Optional[str]:
        """
        How often to check for changes (in seconds). Default: 3min.
        """
        return pulumi.get(self, "requeue_after_seconds")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderAzureDevops(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "teamProject":
            suggest = "team_project"
        elif key == "accessTokenRef":
            suggest = "access_token_ref"
        elif key == "allBranches":
            suggest = "all_branches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderAzureDevops. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderAzureDevops.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderAzureDevops.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 organization: str,
                 team_project: str,
                 access_token_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef'] = None,
                 all_branches: Optional[bool] = None,
                 api: Optional[str] = None):
        """
        :param str organization: Azure Devops organization. E.g. "my-organization".
        :param str team_project: Azure Devops team project. E.g. "my-team".
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRefArgs' access_token_ref: The Personal Access Token (PAT) to use when connecting.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "team_project", team_project)
        if access_token_ref is not None:
            pulumi.set(__self__, "access_token_ref", access_token_ref)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if api is not None:
            pulumi.set(__self__, "api", api)

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        Azure Devops organization. E.g. "my-organization".
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="teamProject")
    def team_project(self) -> str:
        """
        Azure Devops team project. E.g. "my-team".
        """
        return pulumi.get(self, "team_project")

    @property
    @pulumi.getter(name="accessTokenRef")
    def access_token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef']:
        """
        The Personal Access Token (PAT) to use when connecting.
        """
        return pulumi.get(self, "access_token_ref")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketCloud(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "appPasswordRef":
            suggest = "app_password_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketCloud. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketCloud.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketCloud.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owner: str,
                 user: str,
                 all_branches: Optional[bool] = None,
                 app_password_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef'] = None):
        """
        :param str owner: Gitea org or user to scan.
        :param str user: Bitbucket user to use when authenticating. Should have a "member" role to be able to read all repositories and branches.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRefArgs' app_password_ref: The app password to use for the user. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/.
        """
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "user", user)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if app_password_ref is not None:
            pulumi.set(__self__, "app_password_ref", app_password_ref)

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Gitea org or user to scan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def user(self) -> str:
        """
        Bitbucket user to use when authenticating. Should have a "member" role to be able to read all repositories and branches.
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter(name="appPasswordRef")
    def app_password_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef']:
        """
        The app password to use for the user. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/.
        """
        return pulumi.get(self, "app_password_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "basicAuth":
            suggest = "basic_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api: str,
                 project: str,
                 all_branches: Optional[bool] = None,
                 basic_auth: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth'] = None):
        """
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthArgs' basic_auth: Credentials for Basic auth.
        """
        pulumi.set(__self__, "api", api)
        pulumi.set(__self__, "project", project)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)

    @property
    @pulumi.getter
    def api(self) -> str:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth']:
        """
        Credentials for Basic auth.
        """
        return pulumi.get(self, "basic_auth")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passwordRef":
            suggest = "password_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef'] = None,
                 username: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRefArgs' password_ref: Password (or personal access token) reference.
        :param str username: Username for Basic auth.
        """
        if password_ref is not None:
            pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef']:
        """
        Password (or personal access token) reference.
        """
        return pulumi.get(self, "password_ref")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        Username for Basic auth.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "branchMatch":
            suggest = "branch_match"
        elif key == "labelMatch":
            suggest = "label_match"
        elif key == "pathsDoNotExists":
            suggest = "paths_do_not_exists"
        elif key == "pathsExists":
            suggest = "paths_exists"
        elif key == "repositoryMatch":
            suggest = "repository_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 branch_match: Optional[str] = None,
                 label_match: Optional[str] = None,
                 paths_do_not_exists: Optional[Sequence[str]] = None,
                 paths_exists: Optional[Sequence[str]] = None,
                 repository_match: Optional[str] = None):
        """
        :param str branch_match: A regex which must match the branch name.
        :param str label_match: A regex which must match at least one label.
        :param Sequence[str] paths_do_not_exists: An array of paths, all of which must not exist.
        :param Sequence[str] paths_exists: An array of paths, all of which must exist.
        :param str repository_match: A regex for repo names.
        """
        if branch_match is not None:
            pulumi.set(__self__, "branch_match", branch_match)
        if label_match is not None:
            pulumi.set(__self__, "label_match", label_match)
        if paths_do_not_exists is not None:
            pulumi.set(__self__, "paths_do_not_exists", paths_do_not_exists)
        if paths_exists is not None:
            pulumi.set(__self__, "paths_exists", paths_exists)
        if repository_match is not None:
            pulumi.set(__self__, "repository_match", repository_match)

    @property
    @pulumi.getter(name="branchMatch")
    def branch_match(self) -> Optional[str]:
        """
        A regex which must match the branch name.
        """
        return pulumi.get(self, "branch_match")

    @property
    @pulumi.getter(name="labelMatch")
    def label_match(self) -> Optional[str]:
        """
        A regex which must match at least one label.
        """
        return pulumi.get(self, "label_match")

    @property
    @pulumi.getter(name="pathsDoNotExists")
    def paths_do_not_exists(self) -> Optional[Sequence[str]]:
        """
        An array of paths, all of which must not exist.
        """
        return pulumi.get(self, "paths_do_not_exists")

    @property
    @pulumi.getter(name="pathsExists")
    def paths_exists(self) -> Optional[Sequence[str]]:
        """
        An array of paths, all of which must exist.
        """
        return pulumi.get(self, "paths_exists")

    @property
    @pulumi.getter(name="repositoryMatch")
    def repository_match(self) -> Optional[str]:
        """
        A regex for repo names.
        """
        return pulumi.get(self, "repository_match")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owner: str,
                 all_branches: Optional[bool] = None,
                 api: Optional[str] = None,
                 insecure: Optional[bool] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGiteaTokenRef'] = None):
        """
        :param str owner: Gitea org or user to scan.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param bool insecure: Allow insecure tls, for self-signed certificates; default: false.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGiteaTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "owner", owner)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Gitea org or user to scan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def insecure(self) -> Optional[bool]:
        """
        Allow insecure tls, for self-signed certificates; default: false.
        """
        return pulumi.get(self, "insecure")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGiteaTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGiteaTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGiteaTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGiteaTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGiteaTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGithub(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "appSecretName":
            suggest = "app_secret_name"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGithub. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGithub.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGithub.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 organization: str,
                 all_branches: Optional[bool] = None,
                 api: Optional[str] = None,
                 app_secret_name: Optional[str] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGithubTokenRef'] = None):
        """
        :param str organization: Azure Devops organization. E.g. "my-organization".
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str app_secret_name: Reference to a GitHub App repo-creds secret with permission to access pull requests.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGithubTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "organization", organization)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if app_secret_name is not None:
            pulumi.set(__self__, "app_secret_name", app_secret_name)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        Azure Devops organization. E.g. "my-organization".
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter(name="appSecretName")
    def app_secret_name(self) -> Optional[str]:
        """
        Reference to a GitHub App repo-creds secret with permission to access pull requests.
        """
        return pulumi.get(self, "app_secret_name")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGithubTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGithubTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGithubTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGithubTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGithubTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitlab(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "includeSubgroups":
            suggest = "include_subgroups"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitlab. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitlab.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitlab.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: str,
                 all_branches: Optional[bool] = None,
                 api: Optional[str] = None,
                 include_subgroups: Optional[bool] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitlabTokenRef'] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param bool include_subgroups: Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitlabTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "group", group)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if include_subgroups is not None:
            pulumi.set(__self__, "include_subgroups", include_subgroups)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter(name="includeSubgroups")
    def include_subgroups(self) -> Optional[bool]:
        """
        Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.
        """
        return pulumi.get(self, "include_subgroups")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitlabTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitlabTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitlabTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitlabTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitlabTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorSelectorMatchExpressionArgs'] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, Any] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorSelectorMatchExpression']]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str key: The label key that the selector applies to.
        :param str operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param Sequence[str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bitbucketServer":
            suggest = "bitbucket_server"
        elif key == "requeueAfterSeconds":
            suggest = "requeue_after_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorPullRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitbucket_server: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServer'] = None,
                 filters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestFilter']] = None,
                 gitea: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitea'] = None,
                 github: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestGithub'] = None,
                 gitlab: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitlab'] = None,
                 requeue_after_seconds: Optional[str] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplate'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServerArgs' bitbucket_server: Fetch pull requests from a repo hosted on a Bitbucket Server.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorPullRequestFilterArgs'] filters: Filters allow selecting which pull requests to generate for.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorPullRequestGiteaArgs' gitea: Specify the repository from which to fetch the Gitea Pull requests.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorPullRequestGithubArgs' github: Specify the repository from which to fetch the GitHub Pull requests.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitlabArgs' gitlab: Specify the project from which to fetch the GitLab merge requests.
        :param str requeue_after_seconds: How often to check for changes (in seconds). Default: 3min.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        if bitbucket_server is not None:
            pulumi.set(__self__, "bitbucket_server", bitbucket_server)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if gitea is not None:
            pulumi.set(__self__, "gitea", gitea)
        if github is not None:
            pulumi.set(__self__, "github", github)
        if gitlab is not None:
            pulumi.set(__self__, "gitlab", gitlab)
        if requeue_after_seconds is not None:
            pulumi.set(__self__, "requeue_after_seconds", requeue_after_seconds)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="bitbucketServer")
    def bitbucket_server(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServer']:
        """
        Fetch pull requests from a repo hosted on a Bitbucket Server.
        """
        return pulumi.get(self, "bitbucket_server")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestFilter']]:
        """
        Filters allow selecting which pull requests to generate for.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def gitea(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitea']:
        """
        Specify the repository from which to fetch the Gitea Pull requests.
        """
        return pulumi.get(self, "gitea")

    @property
    @pulumi.getter
    def github(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestGithub']:
        """
        Specify the repository from which to fetch the GitHub Pull requests.
        """
        return pulumi.get(self, "github")

    @property
    @pulumi.getter
    def gitlab(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitlab']:
        """
        Specify the project from which to fetch the GitLab merge requests.
        """
        return pulumi.get(self, "gitlab")

    @property
    @pulumi.getter(name="requeueAfterSeconds")
    def requeue_after_seconds(self) -> Optional[str]:
        """
        How often to check for changes (in seconds). Default: 3min.
        """
        return pulumi.get(self, "requeue_after_seconds")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basicAuth":
            suggest = "basic_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api: str,
                 project: str,
                 repo: str,
                 basic_auth: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth'] = None):
        """
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param str repo: Repo name to scan.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthArgs' basic_auth: Credentials for Basic auth.
        """
        pulumi.set(__self__, "api", api)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "repo", repo)
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)

    @property
    @pulumi.getter
    def api(self) -> str:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def repo(self) -> str:
        """
        Repo name to scan.
        """
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth']:
        """
        Credentials for Basic auth.
        """
        return pulumi.get(self, "basic_auth")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passwordRef":
            suggest = "password_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef'] = None,
                 username: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRefArgs' password_ref: Password (or personal access token) reference.
        :param str username: Username for Basic auth.
        """
        if password_ref is not None:
            pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef']:
        """
        Password (or personal access token) reference.
        """
        return pulumi.get(self, "password_ref")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        Username for Basic auth.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "branchMatch":
            suggest = "branch_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorPullRequestFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 branch_match: Optional[str] = None):
        """
        :param str branch_match: A regex which must match the branch name.
        """
        if branch_match is not None:
            pulumi.set(__self__, "branch_match", branch_match)

    @property
    @pulumi.getter(name="branchMatch")
    def branch_match(self) -> Optional[str]:
        """
        A regex which must match the branch name.
        """
        return pulumi.get(self, "branch_match")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api: str,
                 owner: str,
                 repo: str,
                 insecure: Optional[bool] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestGiteaTokenRef'] = None):
        """
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str owner: Gitea org or user to scan.
        :param str repo: Repo name to scan.
        :param bool insecure: Allow insecure tls, for self-signed certificates; default: false.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorPullRequestGiteaTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "api", api)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "repo", repo)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def api(self) -> str:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Gitea org or user to scan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def repo(self) -> str:
        """
        Repo name to scan.
        """
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter
    def insecure(self) -> Optional[bool]:
        """
        Allow insecure tls, for self-signed certificates; default: false.
        """
        return pulumi.get(self, "insecure")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestGiteaTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestGiteaTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorPullRequestGiteaTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestGiteaTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestGiteaTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestGithub(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appSecretName":
            suggest = "app_secret_name"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorPullRequestGithub. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestGithub.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestGithub.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owner: str,
                 repo: str,
                 api: Optional[str] = None,
                 app_secret_name: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestGithubTokenRef'] = None):
        """
        :param str owner: Gitea org or user to scan.
        :param str repo: Repo name to scan.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str app_secret_name: Reference to a GitHub App repo-creds secret with permission to access pull requests.
        :param Sequence[str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param 'ApplicationSetSpecGeneratorMergeGeneratorPullRequestGithubTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "repo", repo)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if app_secret_name is not None:
            pulumi.set(__self__, "app_secret_name", app_secret_name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Gitea org or user to scan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def repo(self) -> str:
        """
        Repo name to scan.
        """
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter(name="appSecretName")
    def app_secret_name(self) -> Optional[str]:
        """
        Reference to a GitHub App repo-creds secret with permission to access pull requests.
        """
        return pulumi.get(self, "app_secret_name")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestGithubTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestGithubTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorPullRequestGithubTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestGithubTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestGithubTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitlab(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pullRequestState":
            suggest = "pull_request_state"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitlab. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitlab.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitlab.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 project: str,
                 api: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 pull_request_state: Optional[str] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitlabTokenRef'] = None):
        """
        :param str project: The project the application belongs to. Defaults to `default`.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param Sequence[str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str pull_request_state: additional MRs filter to get only those with a certain state. Default:  "" (all states).
        :param 'ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitlabTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "project", project)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if pull_request_state is not None:
            pulumi.set(__self__, "pull_request_state", pull_request_state)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="pullRequestState")
    def pull_request_state(self) -> Optional[str]:
        """
        additional MRs filter to get only those with a certain state. Default:  "" (all states).
        """
        return pulumi.get(self, "pull_request_state")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitlabTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitlabTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitlabTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitlabTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitlabTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureDevops":
            suggest = "azure_devops"
        elif key == "bitbucketCloud":
            suggest = "bitbucket_cloud"
        elif key == "bitbucketServer":
            suggest = "bitbucket_server"
        elif key == "cloneProtocol":
            suggest = "clone_protocol"
        elif key == "requeueAfterSeconds":
            suggest = "requeue_after_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorScmProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_devops: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderAzureDevops'] = None,
                 bitbucket_cloud: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketCloud'] = None,
                 bitbucket_server: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServer'] = None,
                 clone_protocol: Optional[str] = None,
                 filters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderFilter']] = None,
                 gitea: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitea'] = None,
                 github: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderGithub'] = None,
                 gitlab: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitlab'] = None,
                 requeue_after_seconds: Optional[str] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplate'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorScmProviderAzureDevopsArgs' azure_devops: Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketCloudArgs' bitbucket_cloud: Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServerArgs' bitbucket_server: Fetch pull requests from a repo hosted on a Bitbucket Server.
        :param str clone_protocol: Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorScmProviderFilterArgs'] filters: Filters allow selecting which pull requests to generate for.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorScmProviderGiteaArgs' gitea: Specify the repository from which to fetch the Gitea Pull requests.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorScmProviderGithubArgs' github: Specify the repository from which to fetch the GitHub Pull requests.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitlabArgs' gitlab: Specify the project from which to fetch the GitLab merge requests.
        :param str requeue_after_seconds: How often to check for changes (in seconds). Default: 3min.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        if azure_devops is not None:
            pulumi.set(__self__, "azure_devops", azure_devops)
        if bitbucket_cloud is not None:
            pulumi.set(__self__, "bitbucket_cloud", bitbucket_cloud)
        if bitbucket_server is not None:
            pulumi.set(__self__, "bitbucket_server", bitbucket_server)
        if clone_protocol is not None:
            pulumi.set(__self__, "clone_protocol", clone_protocol)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if gitea is not None:
            pulumi.set(__self__, "gitea", gitea)
        if github is not None:
            pulumi.set(__self__, "github", github)
        if gitlab is not None:
            pulumi.set(__self__, "gitlab", gitlab)
        if requeue_after_seconds is not None:
            pulumi.set(__self__, "requeue_after_seconds", requeue_after_seconds)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="azureDevops")
    def azure_devops(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderAzureDevops']:
        """
        Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.
        """
        return pulumi.get(self, "azure_devops")

    @property
    @pulumi.getter(name="bitbucketCloud")
    def bitbucket_cloud(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketCloud']:
        """
        Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.
        """
        return pulumi.get(self, "bitbucket_cloud")

    @property
    @pulumi.getter(name="bitbucketServer")
    def bitbucket_server(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServer']:
        """
        Fetch pull requests from a repo hosted on a Bitbucket Server.
        """
        return pulumi.get(self, "bitbucket_server")

    @property
    @pulumi.getter(name="cloneProtocol")
    def clone_protocol(self) -> Optional[str]:
        """
        Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.
        """
        return pulumi.get(self, "clone_protocol")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderFilter']]:
        """
        Filters allow selecting which pull requests to generate for.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def gitea(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitea']:
        """
        Specify the repository from which to fetch the Gitea Pull requests.
        """
        return pulumi.get(self, "gitea")

    @property
    @pulumi.getter
    def github(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderGithub']:
        """
        Specify the repository from which to fetch the GitHub Pull requests.
        """
        return pulumi.get(self, "github")

    @property
    @pulumi.getter
    def gitlab(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitlab']:
        """
        Specify the project from which to fetch the GitLab merge requests.
        """
        return pulumi.get(self, "gitlab")

    @property
    @pulumi.getter(name="requeueAfterSeconds")
    def requeue_after_seconds(self) -> Optional[str]:
        """
        How often to check for changes (in seconds). Default: 3min.
        """
        return pulumi.get(self, "requeue_after_seconds")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderAzureDevops(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "teamProject":
            suggest = "team_project"
        elif key == "accessTokenRef":
            suggest = "access_token_ref"
        elif key == "allBranches":
            suggest = "all_branches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorScmProviderAzureDevops. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderAzureDevops.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderAzureDevops.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 organization: str,
                 team_project: str,
                 access_token_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef'] = None,
                 all_branches: Optional[bool] = None,
                 api: Optional[str] = None):
        """
        :param str organization: Azure Devops organization. E.g. "my-organization".
        :param str team_project: Azure Devops team project. E.g. "my-team".
        :param 'ApplicationSetSpecGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRefArgs' access_token_ref: The Personal Access Token (PAT) to use when connecting.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "team_project", team_project)
        if access_token_ref is not None:
            pulumi.set(__self__, "access_token_ref", access_token_ref)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if api is not None:
            pulumi.set(__self__, "api", api)

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        Azure Devops organization. E.g. "my-organization".
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="teamProject")
    def team_project(self) -> str:
        """
        Azure Devops team project. E.g. "my-team".
        """
        return pulumi.get(self, "team_project")

    @property
    @pulumi.getter(name="accessTokenRef")
    def access_token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef']:
        """
        The Personal Access Token (PAT) to use when connecting.
        """
        return pulumi.get(self, "access_token_ref")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketCloud(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "appPasswordRef":
            suggest = "app_password_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketCloud. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketCloud.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketCloud.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owner: str,
                 user: str,
                 all_branches: Optional[bool] = None,
                 app_password_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef'] = None):
        """
        :param str owner: Gitea org or user to scan.
        :param str user: Bitbucket user to use when authenticating. Should have a "member" role to be able to read all repositories and branches.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRefArgs' app_password_ref: The app password to use for the user. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/.
        """
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "user", user)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if app_password_ref is not None:
            pulumi.set(__self__, "app_password_ref", app_password_ref)

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Gitea org or user to scan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def user(self) -> str:
        """
        Bitbucket user to use when authenticating. Should have a "member" role to be able to read all repositories and branches.
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter(name="appPasswordRef")
    def app_password_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef']:
        """
        The app password to use for the user. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/.
        """
        return pulumi.get(self, "app_password_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "basicAuth":
            suggest = "basic_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api: str,
                 project: str,
                 all_branches: Optional[bool] = None,
                 basic_auth: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth'] = None):
        """
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthArgs' basic_auth: Credentials for Basic auth.
        """
        pulumi.set(__self__, "api", api)
        pulumi.set(__self__, "project", project)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)

    @property
    @pulumi.getter
    def api(self) -> str:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth']:
        """
        Credentials for Basic auth.
        """
        return pulumi.get(self, "basic_auth")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passwordRef":
            suggest = "password_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef'] = None,
                 username: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRefArgs' password_ref: Password (or personal access token) reference.
        :param str username: Username for Basic auth.
        """
        if password_ref is not None:
            pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef']:
        """
        Password (or personal access token) reference.
        """
        return pulumi.get(self, "password_ref")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        Username for Basic auth.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "branchMatch":
            suggest = "branch_match"
        elif key == "labelMatch":
            suggest = "label_match"
        elif key == "pathsDoNotExists":
            suggest = "paths_do_not_exists"
        elif key == "pathsExists":
            suggest = "paths_exists"
        elif key == "repositoryMatch":
            suggest = "repository_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorScmProviderFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 branch_match: Optional[str] = None,
                 label_match: Optional[str] = None,
                 paths_do_not_exists: Optional[Sequence[str]] = None,
                 paths_exists: Optional[Sequence[str]] = None,
                 repository_match: Optional[str] = None):
        """
        :param str branch_match: A regex which must match the branch name.
        :param str label_match: A regex which must match at least one label.
        :param Sequence[str] paths_do_not_exists: An array of paths, all of which must not exist.
        :param Sequence[str] paths_exists: An array of paths, all of which must exist.
        :param str repository_match: A regex for repo names.
        """
        if branch_match is not None:
            pulumi.set(__self__, "branch_match", branch_match)
        if label_match is not None:
            pulumi.set(__self__, "label_match", label_match)
        if paths_do_not_exists is not None:
            pulumi.set(__self__, "paths_do_not_exists", paths_do_not_exists)
        if paths_exists is not None:
            pulumi.set(__self__, "paths_exists", paths_exists)
        if repository_match is not None:
            pulumi.set(__self__, "repository_match", repository_match)

    @property
    @pulumi.getter(name="branchMatch")
    def branch_match(self) -> Optional[str]:
        """
        A regex which must match the branch name.
        """
        return pulumi.get(self, "branch_match")

    @property
    @pulumi.getter(name="labelMatch")
    def label_match(self) -> Optional[str]:
        """
        A regex which must match at least one label.
        """
        return pulumi.get(self, "label_match")

    @property
    @pulumi.getter(name="pathsDoNotExists")
    def paths_do_not_exists(self) -> Optional[Sequence[str]]:
        """
        An array of paths, all of which must not exist.
        """
        return pulumi.get(self, "paths_do_not_exists")

    @property
    @pulumi.getter(name="pathsExists")
    def paths_exists(self) -> Optional[Sequence[str]]:
        """
        An array of paths, all of which must exist.
        """
        return pulumi.get(self, "paths_exists")

    @property
    @pulumi.getter(name="repositoryMatch")
    def repository_match(self) -> Optional[str]:
        """
        A regex for repo names.
        """
        return pulumi.get(self, "repository_match")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owner: str,
                 all_branches: Optional[bool] = None,
                 api: Optional[str] = None,
                 insecure: Optional[bool] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderGiteaTokenRef'] = None):
        """
        :param str owner: Gitea org or user to scan.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param bool insecure: Allow insecure tls, for self-signed certificates; default: false.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorScmProviderGiteaTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "owner", owner)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Gitea org or user to scan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def insecure(self) -> Optional[bool]:
        """
        Allow insecure tls, for self-signed certificates; default: false.
        """
        return pulumi.get(self, "insecure")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderGiteaTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderGiteaTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorScmProviderGiteaTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderGiteaTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderGiteaTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderGithub(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "appSecretName":
            suggest = "app_secret_name"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorScmProviderGithub. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderGithub.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderGithub.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 organization: str,
                 all_branches: Optional[bool] = None,
                 api: Optional[str] = None,
                 app_secret_name: Optional[str] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderGithubTokenRef'] = None):
        """
        :param str organization: Azure Devops organization. E.g. "my-organization".
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str app_secret_name: Reference to a GitHub App repo-creds secret with permission to access pull requests.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorScmProviderGithubTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "organization", organization)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if app_secret_name is not None:
            pulumi.set(__self__, "app_secret_name", app_secret_name)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        Azure Devops organization. E.g. "my-organization".
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter(name="appSecretName")
    def app_secret_name(self) -> Optional[str]:
        """
        Reference to a GitHub App repo-creds secret with permission to access pull requests.
        """
        return pulumi.get(self, "app_secret_name")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderGithubTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderGithubTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorScmProviderGithubTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderGithubTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderGithubTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitlab(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "includeSubgroups":
            suggest = "include_subgroups"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitlab. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitlab.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitlab.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: str,
                 all_branches: Optional[bool] = None,
                 api: Optional[str] = None,
                 include_subgroups: Optional[bool] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitlabTokenRef'] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param bool include_subgroups: Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitlabTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "group", group)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if include_subgroups is not None:
            pulumi.set(__self__, "include_subgroups", include_subgroups)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter(name="includeSubgroups")
    def include_subgroups(self) -> Optional[bool]:
        """
        Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.
        """
        return pulumi.get(self, "include_subgroups")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitlabTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitlabTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitlabTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitlabTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitlabTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeGeneratorSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeGeneratorSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeGeneratorSelectorMatchExpressionArgs'] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, Any] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeGeneratorSelectorMatchExpression']]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeGeneratorSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str key: The label key that the selector applies to.
        :param str operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param Sequence[str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorMergeTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorMergeTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorMergeTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorMergeTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bitbucketServer":
            suggest = "bitbucket_server"
        elif key == "requeueAfterSeconds":
            suggest = "requeue_after_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorPullRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorPullRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorPullRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitbucket_server: Optional['outputs.ApplicationSetSpecGeneratorPullRequestBitbucketServer'] = None,
                 filters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorPullRequestFilter']] = None,
                 gitea: Optional['outputs.ApplicationSetSpecGeneratorPullRequestGitea'] = None,
                 github: Optional['outputs.ApplicationSetSpecGeneratorPullRequestGithub'] = None,
                 gitlab: Optional['outputs.ApplicationSetSpecGeneratorPullRequestGitlab'] = None,
                 requeue_after_seconds: Optional[str] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorPullRequestTemplate'] = None):
        """
        :param 'ApplicationSetSpecGeneratorPullRequestBitbucketServerArgs' bitbucket_server: Fetch pull requests from a repo hosted on a Bitbucket Server.
        :param Sequence['ApplicationSetSpecGeneratorPullRequestFilterArgs'] filters: Filters allow selecting which pull requests to generate for.
        :param 'ApplicationSetSpecGeneratorPullRequestGiteaArgs' gitea: Specify the repository from which to fetch the Gitea Pull requests.
        :param 'ApplicationSetSpecGeneratorPullRequestGithubArgs' github: Specify the repository from which to fetch the GitHub Pull requests.
        :param 'ApplicationSetSpecGeneratorPullRequestGitlabArgs' gitlab: Specify the project from which to fetch the GitLab merge requests.
        :param str requeue_after_seconds: How often to check for changes (in seconds). Default: 3min.
        :param 'ApplicationSetSpecGeneratorPullRequestTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        if bitbucket_server is not None:
            pulumi.set(__self__, "bitbucket_server", bitbucket_server)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if gitea is not None:
            pulumi.set(__self__, "gitea", gitea)
        if github is not None:
            pulumi.set(__self__, "github", github)
        if gitlab is not None:
            pulumi.set(__self__, "gitlab", gitlab)
        if requeue_after_seconds is not None:
            pulumi.set(__self__, "requeue_after_seconds", requeue_after_seconds)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="bitbucketServer")
    def bitbucket_server(self) -> Optional['outputs.ApplicationSetSpecGeneratorPullRequestBitbucketServer']:
        """
        Fetch pull requests from a repo hosted on a Bitbucket Server.
        """
        return pulumi.get(self, "bitbucket_server")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorPullRequestFilter']]:
        """
        Filters allow selecting which pull requests to generate for.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def gitea(self) -> Optional['outputs.ApplicationSetSpecGeneratorPullRequestGitea']:
        """
        Specify the repository from which to fetch the Gitea Pull requests.
        """
        return pulumi.get(self, "gitea")

    @property
    @pulumi.getter
    def github(self) -> Optional['outputs.ApplicationSetSpecGeneratorPullRequestGithub']:
        """
        Specify the repository from which to fetch the GitHub Pull requests.
        """
        return pulumi.get(self, "github")

    @property
    @pulumi.getter
    def gitlab(self) -> Optional['outputs.ApplicationSetSpecGeneratorPullRequestGitlab']:
        """
        Specify the project from which to fetch the GitLab merge requests.
        """
        return pulumi.get(self, "gitlab")

    @property
    @pulumi.getter(name="requeueAfterSeconds")
    def requeue_after_seconds(self) -> Optional[str]:
        """
        How often to check for changes (in seconds). Default: 3min.
        """
        return pulumi.get(self, "requeue_after_seconds")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorPullRequestTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestBitbucketServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basicAuth":
            suggest = "basic_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorPullRequestBitbucketServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorPullRequestBitbucketServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorPullRequestBitbucketServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api: str,
                 project: str,
                 repo: str,
                 basic_auth: Optional['outputs.ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth'] = None):
        """
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param str repo: Repo name to scan.
        :param 'ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthArgs' basic_auth: Credentials for Basic auth.
        """
        pulumi.set(__self__, "api", api)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "repo", repo)
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)

    @property
    @pulumi.getter
    def api(self) -> str:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def repo(self) -> str:
        """
        Repo name to scan.
        """
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth']:
        """
        Credentials for Basic auth.
        """
        return pulumi.get(self, "basic_auth")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passwordRef":
            suggest = "password_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password_ref: Optional['outputs.ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef'] = None,
                 username: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRefArgs' password_ref: Password (or personal access token) reference.
        :param str username: Username for Basic auth.
        """
        if password_ref is not None:
            pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef']:
        """
        Password (or personal access token) reference.
        """
        return pulumi.get(self, "password_ref")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        Username for Basic auth.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "branchMatch":
            suggest = "branch_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorPullRequestFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorPullRequestFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorPullRequestFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 branch_match: Optional[str] = None):
        """
        :param str branch_match: A regex which must match the branch name.
        """
        if branch_match is not None:
            pulumi.set(__self__, "branch_match", branch_match)

    @property
    @pulumi.getter(name="branchMatch")
    def branch_match(self) -> Optional[str]:
        """
        A regex which must match the branch name.
        """
        return pulumi.get(self, "branch_match")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestGitea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorPullRequestGitea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorPullRequestGitea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorPullRequestGitea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api: str,
                 owner: str,
                 repo: str,
                 insecure: Optional[bool] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorPullRequestGiteaTokenRef'] = None):
        """
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str owner: Gitea org or user to scan.
        :param str repo: Repo name to scan.
        :param bool insecure: Allow insecure tls, for self-signed certificates; default: false.
        :param 'ApplicationSetSpecGeneratorPullRequestGiteaTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "api", api)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "repo", repo)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def api(self) -> str:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Gitea org or user to scan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def repo(self) -> str:
        """
        Repo name to scan.
        """
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter
    def insecure(self) -> Optional[bool]:
        """
        Allow insecure tls, for self-signed certificates; default: false.
        """
        return pulumi.get(self, "insecure")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorPullRequestGiteaTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestGiteaTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorPullRequestGiteaTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorPullRequestGiteaTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorPullRequestGiteaTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestGithub(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appSecretName":
            suggest = "app_secret_name"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorPullRequestGithub. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorPullRequestGithub.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorPullRequestGithub.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owner: str,
                 repo: str,
                 api: Optional[str] = None,
                 app_secret_name: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorPullRequestGithubTokenRef'] = None):
        """
        :param str owner: Gitea org or user to scan.
        :param str repo: Repo name to scan.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str app_secret_name: Reference to a GitHub App repo-creds secret with permission to access pull requests.
        :param Sequence[str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param 'ApplicationSetSpecGeneratorPullRequestGithubTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "repo", repo)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if app_secret_name is not None:
            pulumi.set(__self__, "app_secret_name", app_secret_name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Gitea org or user to scan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def repo(self) -> str:
        """
        Repo name to scan.
        """
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter(name="appSecretName")
    def app_secret_name(self) -> Optional[str]:
        """
        Reference to a GitHub App repo-creds secret with permission to access pull requests.
        """
        return pulumi.get(self, "app_secret_name")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorPullRequestGithubTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestGithubTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorPullRequestGithubTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorPullRequestGithubTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorPullRequestGithubTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestGitlab(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pullRequestState":
            suggest = "pull_request_state"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorPullRequestGitlab. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorPullRequestGitlab.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorPullRequestGitlab.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 project: str,
                 api: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 pull_request_state: Optional[str] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorPullRequestGitlabTokenRef'] = None):
        """
        :param str project: The project the application belongs to. Defaults to `default`.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param Sequence[str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str pull_request_state: additional MRs filter to get only those with a certain state. Default:  "" (all states).
        :param 'ApplicationSetSpecGeneratorPullRequestGitlabTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "project", project)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if pull_request_state is not None:
            pulumi.set(__self__, "pull_request_state", pull_request_state)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="pullRequestState")
    def pull_request_state(self) -> Optional[str]:
        """
        additional MRs filter to get only those with a certain state. Default:  "" (all states).
        """
        return pulumi.get(self, "pull_request_state")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorPullRequestGitlabTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestGitlabTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorPullRequestGitlabTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorPullRequestGitlabTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorPullRequestGitlabTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorPullRequestTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorPullRequestTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorPullRequestTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorPullRequestTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorPullRequestTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorPullRequestTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorPullRequestTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorPullRequestTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorPullRequestTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorPullRequestTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorPullRequestTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorPullRequestTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureDevops":
            suggest = "azure_devops"
        elif key == "bitbucketCloud":
            suggest = "bitbucket_cloud"
        elif key == "bitbucketServer":
            suggest = "bitbucket_server"
        elif key == "cloneProtocol":
            suggest = "clone_protocol"
        elif key == "requeueAfterSeconds":
            suggest = "requeue_after_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorScmProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorScmProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorScmProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_devops: Optional['outputs.ApplicationSetSpecGeneratorScmProviderAzureDevops'] = None,
                 bitbucket_cloud: Optional['outputs.ApplicationSetSpecGeneratorScmProviderBitbucketCloud'] = None,
                 bitbucket_server: Optional['outputs.ApplicationSetSpecGeneratorScmProviderBitbucketServer'] = None,
                 clone_protocol: Optional[str] = None,
                 filters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorScmProviderFilter']] = None,
                 gitea: Optional['outputs.ApplicationSetSpecGeneratorScmProviderGitea'] = None,
                 github: Optional['outputs.ApplicationSetSpecGeneratorScmProviderGithub'] = None,
                 gitlab: Optional['outputs.ApplicationSetSpecGeneratorScmProviderGitlab'] = None,
                 requeue_after_seconds: Optional[str] = None,
                 template: Optional['outputs.ApplicationSetSpecGeneratorScmProviderTemplate'] = None):
        """
        :param 'ApplicationSetSpecGeneratorScmProviderAzureDevopsArgs' azure_devops: Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.
        :param 'ApplicationSetSpecGeneratorScmProviderBitbucketCloudArgs' bitbucket_cloud: Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.
        :param 'ApplicationSetSpecGeneratorScmProviderBitbucketServerArgs' bitbucket_server: Fetch pull requests from a repo hosted on a Bitbucket Server.
        :param str clone_protocol: Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.
        :param Sequence['ApplicationSetSpecGeneratorScmProviderFilterArgs'] filters: Filters allow selecting which pull requests to generate for.
        :param 'ApplicationSetSpecGeneratorScmProviderGiteaArgs' gitea: Specify the repository from which to fetch the Gitea Pull requests.
        :param 'ApplicationSetSpecGeneratorScmProviderGithubArgs' github: Specify the repository from which to fetch the GitHub Pull requests.
        :param 'ApplicationSetSpecGeneratorScmProviderGitlabArgs' gitlab: Specify the project from which to fetch the GitLab merge requests.
        :param str requeue_after_seconds: How often to check for changes (in seconds). Default: 3min.
        :param 'ApplicationSetSpecGeneratorScmProviderTemplateArgs' template: Generator template. Used to override the values of the spec-level template.
        """
        if azure_devops is not None:
            pulumi.set(__self__, "azure_devops", azure_devops)
        if bitbucket_cloud is not None:
            pulumi.set(__self__, "bitbucket_cloud", bitbucket_cloud)
        if bitbucket_server is not None:
            pulumi.set(__self__, "bitbucket_server", bitbucket_server)
        if clone_protocol is not None:
            pulumi.set(__self__, "clone_protocol", clone_protocol)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if gitea is not None:
            pulumi.set(__self__, "gitea", gitea)
        if github is not None:
            pulumi.set(__self__, "github", github)
        if gitlab is not None:
            pulumi.set(__self__, "gitlab", gitlab)
        if requeue_after_seconds is not None:
            pulumi.set(__self__, "requeue_after_seconds", requeue_after_seconds)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="azureDevops")
    def azure_devops(self) -> Optional['outputs.ApplicationSetSpecGeneratorScmProviderAzureDevops']:
        """
        Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.
        """
        return pulumi.get(self, "azure_devops")

    @property
    @pulumi.getter(name="bitbucketCloud")
    def bitbucket_cloud(self) -> Optional['outputs.ApplicationSetSpecGeneratorScmProviderBitbucketCloud']:
        """
        Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.
        """
        return pulumi.get(self, "bitbucket_cloud")

    @property
    @pulumi.getter(name="bitbucketServer")
    def bitbucket_server(self) -> Optional['outputs.ApplicationSetSpecGeneratorScmProviderBitbucketServer']:
        """
        Fetch pull requests from a repo hosted on a Bitbucket Server.
        """
        return pulumi.get(self, "bitbucket_server")

    @property
    @pulumi.getter(name="cloneProtocol")
    def clone_protocol(self) -> Optional[str]:
        """
        Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.
        """
        return pulumi.get(self, "clone_protocol")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorScmProviderFilter']]:
        """
        Filters allow selecting which pull requests to generate for.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def gitea(self) -> Optional['outputs.ApplicationSetSpecGeneratorScmProviderGitea']:
        """
        Specify the repository from which to fetch the Gitea Pull requests.
        """
        return pulumi.get(self, "gitea")

    @property
    @pulumi.getter
    def github(self) -> Optional['outputs.ApplicationSetSpecGeneratorScmProviderGithub']:
        """
        Specify the repository from which to fetch the GitHub Pull requests.
        """
        return pulumi.get(self, "github")

    @property
    @pulumi.getter
    def gitlab(self) -> Optional['outputs.ApplicationSetSpecGeneratorScmProviderGitlab']:
        """
        Specify the project from which to fetch the GitLab merge requests.
        """
        return pulumi.get(self, "gitlab")

    @property
    @pulumi.getter(name="requeueAfterSeconds")
    def requeue_after_seconds(self) -> Optional[str]:
        """
        How often to check for changes (in seconds). Default: 3min.
        """
        return pulumi.get(self, "requeue_after_seconds")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.ApplicationSetSpecGeneratorScmProviderTemplate']:
        """
        Generator template. Used to override the values of the spec-level template.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderAzureDevops(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "teamProject":
            suggest = "team_project"
        elif key == "accessTokenRef":
            suggest = "access_token_ref"
        elif key == "allBranches":
            suggest = "all_branches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorScmProviderAzureDevops. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorScmProviderAzureDevops.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorScmProviderAzureDevops.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 organization: str,
                 team_project: str,
                 access_token_ref: Optional['outputs.ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef'] = None,
                 all_branches: Optional[bool] = None,
                 api: Optional[str] = None):
        """
        :param str organization: Azure Devops organization. E.g. "my-organization".
        :param str team_project: Azure Devops team project. E.g. "my-team".
        :param 'ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRefArgs' access_token_ref: The Personal Access Token (PAT) to use when connecting.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "team_project", team_project)
        if access_token_ref is not None:
            pulumi.set(__self__, "access_token_ref", access_token_ref)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if api is not None:
            pulumi.set(__self__, "api", api)

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        Azure Devops organization. E.g. "my-organization".
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="teamProject")
    def team_project(self) -> str:
        """
        Azure Devops team project. E.g. "my-team".
        """
        return pulumi.get(self, "team_project")

    @property
    @pulumi.getter(name="accessTokenRef")
    def access_token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef']:
        """
        The Personal Access Token (PAT) to use when connecting.
        """
        return pulumi.get(self, "access_token_ref")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderBitbucketCloud(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "appPasswordRef":
            suggest = "app_password_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorScmProviderBitbucketCloud. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorScmProviderBitbucketCloud.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorScmProviderBitbucketCloud.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owner: str,
                 user: str,
                 all_branches: Optional[bool] = None,
                 app_password_ref: Optional['outputs.ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef'] = None):
        """
        :param str owner: Gitea org or user to scan.
        :param str user: Bitbucket user to use when authenticating. Should have a "member" role to be able to read all repositories and branches.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param 'ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRefArgs' app_password_ref: The app password to use for the user. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/.
        """
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "user", user)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if app_password_ref is not None:
            pulumi.set(__self__, "app_password_ref", app_password_ref)

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Gitea org or user to scan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def user(self) -> str:
        """
        Bitbucket user to use when authenticating. Should have a "member" role to be able to read all repositories and branches.
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter(name="appPasswordRef")
    def app_password_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef']:
        """
        The app password to use for the user. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/.
        """
        return pulumi.get(self, "app_password_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderBitbucketServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "basicAuth":
            suggest = "basic_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorScmProviderBitbucketServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorScmProviderBitbucketServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorScmProviderBitbucketServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api: str,
                 project: str,
                 all_branches: Optional[bool] = None,
                 basic_auth: Optional['outputs.ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth'] = None):
        """
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param 'ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthArgs' basic_auth: Credentials for Basic auth.
        """
        pulumi.set(__self__, "api", api)
        pulumi.set(__self__, "project", project)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)

    @property
    @pulumi.getter
    def api(self) -> str:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth']:
        """
        Credentials for Basic auth.
        """
        return pulumi.get(self, "basic_auth")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passwordRef":
            suggest = "password_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password_ref: Optional['outputs.ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef'] = None,
                 username: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRefArgs' password_ref: Password (or personal access token) reference.
        :param str username: Username for Basic auth.
        """
        if password_ref is not None:
            pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef']:
        """
        Password (or personal access token) reference.
        """
        return pulumi.get(self, "password_ref")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        Username for Basic auth.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "branchMatch":
            suggest = "branch_match"
        elif key == "labelMatch":
            suggest = "label_match"
        elif key == "pathsDoNotExists":
            suggest = "paths_do_not_exists"
        elif key == "pathsExists":
            suggest = "paths_exists"
        elif key == "repositoryMatch":
            suggest = "repository_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorScmProviderFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorScmProviderFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorScmProviderFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 branch_match: Optional[str] = None,
                 label_match: Optional[str] = None,
                 paths_do_not_exists: Optional[Sequence[str]] = None,
                 paths_exists: Optional[Sequence[str]] = None,
                 repository_match: Optional[str] = None):
        """
        :param str branch_match: A regex which must match the branch name.
        :param str label_match: A regex which must match at least one label.
        :param Sequence[str] paths_do_not_exists: An array of paths, all of which must not exist.
        :param Sequence[str] paths_exists: An array of paths, all of which must exist.
        :param str repository_match: A regex for repo names.
        """
        if branch_match is not None:
            pulumi.set(__self__, "branch_match", branch_match)
        if label_match is not None:
            pulumi.set(__self__, "label_match", label_match)
        if paths_do_not_exists is not None:
            pulumi.set(__self__, "paths_do_not_exists", paths_do_not_exists)
        if paths_exists is not None:
            pulumi.set(__self__, "paths_exists", paths_exists)
        if repository_match is not None:
            pulumi.set(__self__, "repository_match", repository_match)

    @property
    @pulumi.getter(name="branchMatch")
    def branch_match(self) -> Optional[str]:
        """
        A regex which must match the branch name.
        """
        return pulumi.get(self, "branch_match")

    @property
    @pulumi.getter(name="labelMatch")
    def label_match(self) -> Optional[str]:
        """
        A regex which must match at least one label.
        """
        return pulumi.get(self, "label_match")

    @property
    @pulumi.getter(name="pathsDoNotExists")
    def paths_do_not_exists(self) -> Optional[Sequence[str]]:
        """
        An array of paths, all of which must not exist.
        """
        return pulumi.get(self, "paths_do_not_exists")

    @property
    @pulumi.getter(name="pathsExists")
    def paths_exists(self) -> Optional[Sequence[str]]:
        """
        An array of paths, all of which must exist.
        """
        return pulumi.get(self, "paths_exists")

    @property
    @pulumi.getter(name="repositoryMatch")
    def repository_match(self) -> Optional[str]:
        """
        A regex for repo names.
        """
        return pulumi.get(self, "repository_match")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderGitea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorScmProviderGitea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorScmProviderGitea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorScmProviderGitea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owner: str,
                 all_branches: Optional[bool] = None,
                 api: Optional[str] = None,
                 insecure: Optional[bool] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorScmProviderGiteaTokenRef'] = None):
        """
        :param str owner: Gitea org or user to scan.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param bool insecure: Allow insecure tls, for self-signed certificates; default: false.
        :param 'ApplicationSetSpecGeneratorScmProviderGiteaTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "owner", owner)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Gitea org or user to scan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def insecure(self) -> Optional[bool]:
        """
        Allow insecure tls, for self-signed certificates; default: false.
        """
        return pulumi.get(self, "insecure")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorScmProviderGiteaTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderGiteaTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorScmProviderGiteaTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorScmProviderGiteaTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorScmProviderGiteaTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderGithub(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "appSecretName":
            suggest = "app_secret_name"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorScmProviderGithub. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorScmProviderGithub.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorScmProviderGithub.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 organization: str,
                 all_branches: Optional[bool] = None,
                 api: Optional[str] = None,
                 app_secret_name: Optional[str] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorScmProviderGithubTokenRef'] = None):
        """
        :param str organization: Azure Devops organization. E.g. "my-organization".
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param str app_secret_name: Reference to a GitHub App repo-creds secret with permission to access pull requests.
        :param 'ApplicationSetSpecGeneratorScmProviderGithubTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "organization", organization)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if app_secret_name is not None:
            pulumi.set(__self__, "app_secret_name", app_secret_name)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        Azure Devops organization. E.g. "my-organization".
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter(name="appSecretName")
    def app_secret_name(self) -> Optional[str]:
        """
        Reference to a GitHub App repo-creds secret with permission to access pull requests.
        """
        return pulumi.get(self, "app_secret_name")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorScmProviderGithubTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderGithubTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorScmProviderGithubTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorScmProviderGithubTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorScmProviderGithubTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderGitlab(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allBranches":
            suggest = "all_branches"
        elif key == "includeSubgroups":
            suggest = "include_subgroups"
        elif key == "tokenRef":
            suggest = "token_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorScmProviderGitlab. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorScmProviderGitlab.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorScmProviderGitlab.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: str,
                 all_branches: Optional[bool] = None,
                 api: Optional[str] = None,
                 include_subgroups: Optional[bool] = None,
                 token_ref: Optional['outputs.ApplicationSetSpecGeneratorScmProviderGitlabTokenRef'] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param bool all_branches: Scan all branches instead of just the default branch.
        :param str api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        :param bool include_subgroups: Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.
        :param 'ApplicationSetSpecGeneratorScmProviderGitlabTokenRefArgs' token_ref: Authentication token reference.
        """
        pulumi.set(__self__, "group", group)
        if all_branches is not None:
            pulumi.set(__self__, "all_branches", all_branches)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if include_subgroups is not None:
            pulumi.set(__self__, "include_subgroups", include_subgroups)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="allBranches")
    def all_branches(self) -> Optional[bool]:
        """
        Scan all branches instead of just the default branch.
        """
        return pulumi.get(self, "all_branches")

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter(name="includeSubgroups")
    def include_subgroups(self) -> Optional[bool]:
        """
        Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.
        """
        return pulumi.get(self, "include_subgroups")

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional['outputs.ApplicationSetSpecGeneratorScmProviderGitlabTokenRef']:
        """
        Authentication token reference.
        """
        return pulumi.get(self, "token_ref")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderGitlabTokenRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorScmProviderGitlabTokenRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorScmProviderGitlabTokenRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorScmProviderGitlabTokenRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_name: str):
        """
        :param str key: The label key that the selector applies to.
        :param str secret_name: Name of Kubernetes `Secret`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Name of Kubernetes `Secret`.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.ApplicationSetSpecGeneratorScmProviderTemplateMetadata'] = None,
                 spec: Optional['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpec'] = None):
        """
        :param 'ApplicationSetSpecGeneratorScmProviderTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecGeneratorScmProviderTemplateSpecArgs' spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorScmProviderTemplateMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderTemplateMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorScmProviderTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorScmProviderTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorScmProviderTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecDestination'] = None,
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sources: Optional[Sequence['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSource']] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecGeneratorScmProviderTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecGeneratorScmProviderTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecDestination']:
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSource']]:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorScmProviderTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorScmProviderTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorScmProviderTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSetSpecGeneratorSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecGeneratorSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecGeneratorSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecGeneratorSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ApplicationSetSpecGeneratorSelectorMatchExpression']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        """
        :param Sequence['ApplicationSetSpecGeneratorSelectorMatchExpressionArgs'] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, Any] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ApplicationSetSpecGeneratorSelectorMatchExpression']]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ApplicationSetSpecGeneratorSelectorMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str key: The label key that the selector applies to.
        :param str operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param Sequence[str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecStrategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rollingSyncs":
            suggest = "rolling_syncs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 rolling_syncs: Optional[Sequence['outputs.ApplicationSetSpecStrategyRollingSync']] = None):
        """
        :param str type: Type of progressive sync.
        :param Sequence['ApplicationSetSpecStrategyRollingSyncArgs'] rolling_syncs: Update strategy allowing you to group Applications by labels present on the generated Application resources. When the ApplicationSet changes, the changes will be applied to each group of Application resources sequentially.
        """
        pulumi.set(__self__, "type", type)
        if rolling_syncs is not None:
            pulumi.set(__self__, "rolling_syncs", rolling_syncs)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of progressive sync.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="rollingSyncs")
    def rolling_syncs(self) -> Optional[Sequence['outputs.ApplicationSetSpecStrategyRollingSync']]:
        """
        Update strategy allowing you to group Applications by labels present on the generated Application resources. When the ApplicationSet changes, the changes will be applied to each group of Application resources sequentially.
        """
        return pulumi.get(self, "rolling_syncs")


@pulumi.output_type
class ApplicationSetSpecStrategyRollingSync(dict):
    def __init__(__self__, *,
                 steps: Sequence['outputs.ApplicationSetSpecStrategyRollingSyncStep']):
        """
        :param Sequence['ApplicationSetSpecStrategyRollingSyncStepArgs'] steps: Configuration used to define which applications to include in each stage of the rolling sync. All Applications in each group must become Healthy before the ApplicationSet controller will proceed to update the next group of Applications.
        """
        pulumi.set(__self__, "steps", steps)

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.ApplicationSetSpecStrategyRollingSyncStep']:
        """
        Configuration used to define which applications to include in each stage of the rolling sync. All Applications in each group must become Healthy before the ApplicationSet controller will proceed to update the next group of Applications.
        """
        return pulumi.get(self, "steps")


@pulumi.output_type
class ApplicationSetSpecStrategyRollingSyncStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "maxUpdate":
            suggest = "max_update"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecStrategyRollingSyncStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecStrategyRollingSyncStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecStrategyRollingSyncStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ApplicationSetSpecStrategyRollingSyncStepMatchExpression']] = None,
                 max_update: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecStrategyRollingSyncStepMatchExpressionArgs'] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param str max_update: Maximum number of simultaneous Application updates in a group. Supports both integer and percentage string values (rounds down, but floored at 1 Application for >0%). Default is 100%, unbounded.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if max_update is not None:
            pulumi.set(__self__, "max_update", max_update)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ApplicationSetSpecStrategyRollingSyncStepMatchExpression']]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="maxUpdate")
    def max_update(self) -> Optional[str]:
        """
        Maximum number of simultaneous Application updates in a group. Supports both integer and percentage string values (rounds down, but floored at 1 Application for >0%). Default is 100%, unbounded.
        """
        return pulumi.get(self, "max_update")


@pulumi.output_type
class ApplicationSetSpecStrategyRollingSyncStepMatchExpression(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str key: The label key that the selector applies to.
        :param str operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param Sequence[str] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationsSync":
            suggest = "applications_sync"
        elif key == "preserveResourcesOnDeletion":
            suggest = "preserve_resources_on_deletion"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 applications_sync: Optional[str] = None,
                 preserve_resources_on_deletion: Optional[bool] = None):
        """
        :param str applications_sync: Represents the policy applied on the generated applications. Possible values are create-only, create-update, create-delete, and sync.
        :param bool preserve_resources_on_deletion: Label selector used to narrow the scope of targeted clusters.
        """
        if applications_sync is not None:
            pulumi.set(__self__, "applications_sync", applications_sync)
        if preserve_resources_on_deletion is not None:
            pulumi.set(__self__, "preserve_resources_on_deletion", preserve_resources_on_deletion)

    @property
    @pulumi.getter(name="applicationsSync")
    def applications_sync(self) -> Optional[str]:
        """
        Represents the policy applied on the generated applications. Possible values are create-only, create-update, create-delete, and sync.
        """
        return pulumi.get(self, "applications_sync")

    @property
    @pulumi.getter(name="preserveResourcesOnDeletion")
    def preserve_resources_on_deletion(self) -> Optional[bool]:
        """
        Label selector used to narrow the scope of targeted clusters.
        """
        return pulumi.get(self, "preserve_resources_on_deletion")


@pulumi.output_type
class ApplicationSetSpecTemplate(dict):
    def __init__(__self__, *,
                 metadata: 'outputs.ApplicationSetSpecTemplateMetadata',
                 spec: 'outputs.ApplicationSetSpecTemplateSpec'):
        """
        :param 'ApplicationSetSpecTemplateMetadataArgs' metadata: Kubernetes object metadata for templated Application.
        :param 'ApplicationSetSpecTemplateSpecArgs' spec: The application specification.
        """
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> 'outputs.ApplicationSetSpecTemplateMetadata':
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> 'outputs.ApplicationSetSpecTemplateSpec':
        """
        The application specification.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ApplicationSetSpecTemplateMetadata(dict):
    def __init__(__self__, *,
                 name: str,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 namespace: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Sequence[str] finalizers: List of finalizers to apply to the resulting Application.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        pulumi.set(__self__, "name", name)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        List of finalizers to apply to the resulting Application.
        """
        return pulumi.get(self, "finalizers")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecTemplateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: 'outputs.ApplicationSetSpecTemplateSpecDestination',
                 sources: Sequence['outputs.ApplicationSetSpecTemplateSpecSource'],
                 ignore_differences: Optional[Sequence['outputs.ApplicationSetSpecTemplateSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSetSpecTemplateSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sync_policy: Optional['outputs.ApplicationSetSpecTemplateSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSetSpecTemplateSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSetSpecTemplateSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param Sequence['ApplicationSetSpecTemplateSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSetSpecTemplateSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param 'ApplicationSetSpecTemplateSpecSyncPolicyArgs' sync_policy: Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "sources", sources)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> 'outputs.ApplicationSetSpecTemplateSpecDestination':
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.ApplicationSetSpecTemplateSpecSource']:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSetSpecTemplateSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSetSpecTemplateSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSetSpecTemplateSpecSyncPolicy']:
        """
        Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSetSpecTemplateSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSetSpecTemplateSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecTemplateSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecTemplateSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecTemplateSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSetSpecTemplateSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecTemplateSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecTemplateSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecTemplateSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecTemplateSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repo_url: str,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSetSpecTemplateSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSetSpecTemplateSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSetSpecTemplateSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSetSpecTemplateSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSetSpecTemplateSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSetSpecTemplateSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSetSpecTemplateSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSetSpecTemplateSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        pulumi.set(__self__, "repo_url", repo_url)
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> str:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSetSpecTemplateSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSetSpecTemplateSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSetSpecTemplateSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSetSpecTemplateSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSetSpecTemplateSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecTemplateSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecTemplateSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecTemplateSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecTemplateSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSetSpecTemplateSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSetSpecTemplateSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecTemplateSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSetSpecTemplateSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecTemplateSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSetSpecTemplateSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSetSpecTemplateSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSetSpecTemplateSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecTemplateSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecTemplateSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecTemplateSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecTemplateSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecTemplateSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecTemplateSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSetSpecTemplateSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSetSpecTemplateSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSetSpecTemplateSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSetSpecTemplateSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSetSpecTemplateSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSetSpecTemplateSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecTemplateSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecTemplateSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecTemplateSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSetSpecTemplateSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSetSpecTemplateSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSetSpecTemplateSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSetSpecTemplateSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSetSpecTemplateSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSetSpecTemplateSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSetSpecTemplateSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecTemplateSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecTemplateSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSetSpecTemplateSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: 'outputs.ApplicationSpecDestination',
                 sources: Sequence['outputs.ApplicationSpecSource'],
                 ignore_differences: Optional[Sequence['outputs.ApplicationSpecIgnoreDifference']] = None,
                 infos: Optional[Sequence['outputs.ApplicationSpecInfo']] = None,
                 project: Optional[str] = None,
                 revision_history_limit: Optional[int] = None,
                 sync_policy: Optional['outputs.ApplicationSpecSyncPolicy'] = None):
        """
        :param 'ApplicationSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['ApplicationSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param Sequence['ApplicationSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['ApplicationSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param 'ApplicationSpecSyncPolicyArgs' sync_policy: Controls when and how a sync will be performed.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "sources", sources)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> 'outputs.ApplicationSpecDestination':
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.ApplicationSpecSource']:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSpecIgnoreDifference']]:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.ApplicationSpecInfo']]:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSpecSyncPolicy']:
        """
        Controls when and how a sync will be performed.
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSpecDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: Name of the applications.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applications.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applications.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applications.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSpecIgnoreDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSpecIgnoreDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSpecIgnoreDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSpecIgnoreDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applications.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applications.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applications.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applications.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSpecInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applications.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applications.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSpecSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoUrl":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repo_url: str,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSpecSourceHelm'] = None,
                 kustomize: Optional['outputs.ApplicationSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSpecSourcePlugin'] = None,
                 ref: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'ApplicationSpecSourceHelmArgs' helm: Helm specific options.
        :param 'ApplicationSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Path to the file containing the values for the Helm parameter.
        :param 'ApplicationSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        pulumi.set(__self__, "repo_url", repo_url)
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> str:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSpecSourceDirectory']:
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSpecSourceHelm']:
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSpecSourceKustomize']:
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSpecSourcePlugin']:
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> Optional[str]:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSpecSourceDirectory(dict):
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'ApplicationSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSpecSourceDirectoryJsonnet']:
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSpecSourceDirectoryJsonnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSpecSourceDirectoryJsonnetExtVar']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSpecSourceDirectoryJsonnetTla']] = None):
        """
        :param Sequence['ApplicationSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['ApplicationSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSpecSourceDirectoryJsonnetExtVar']]:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSpecSourceDirectoryJsonnetTla']]:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSpecSourceDirectoryJsonnetExtVar(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applications.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applications.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSpecSourceDirectoryJsonnetTla(dict):
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of the applications.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applications.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSpecSourceHelm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "ignoreMissingValueFiles":
            suggest = "ignore_missing_value_files"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "skipCrds":
            suggest = "skip_crds"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSpecSourceHelmFileParameter']] = None,
                 ignore_missing_value_files: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSpecSourceHelmParameter']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 skip_crds: Optional[bool] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        :param Sequence['ApplicationSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['ApplicationSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: Helm values to be passed to 'helm template', typically defined as a block.
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if ignore_missing_value_files is not None:
            pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if skip_crds is not None:
            pulumi.set(__self__, "skip_crds", skip_crds)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSpecSourceHelmFileParameter']]:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> Optional[bool]:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSpecSourceHelmParameter']]:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[bool]:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        Helm values to be passed to 'helm template', typically defined as a block.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ApplicationSpecSourceHelmFileParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the applications.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str path: Path to the file containing the values for the Helm parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applications.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameter.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSpecSourceHelmParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSpecSourceHelmParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSpecSourceHelmParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSpecSourceHelmParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the applications.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applications.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSpecSourceKustomize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSpecSourcePlugin(dict):
    def __init__(__self__, *,
                 envs: Optional[Sequence['outputs.ApplicationSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['ApplicationSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the applications.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.ApplicationSpecSourcePluginEnv']]:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applications.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the applications.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str value: Value of the information.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applications.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSpecSyncPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedNamespaceMetadata":
            suggest = "managed_namespace_metadata"
        elif key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSpecSyncPolicyAutomated'] = None,
                 managed_namespace_metadata: Optional['outputs.ApplicationSpecSyncPolicyManagedNamespaceMetadata'] = None,
                 retry: Optional['outputs.ApplicationSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param 'ApplicationSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'ApplicationSpecSyncPolicyManagedNamespaceMetadataArgs' managed_namespace_metadata: Controls metadata in the given namespace (if `CreateNamespace=true`).
        :param 'ApplicationSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if managed_namespace_metadata is not None:
            pulumi.set(__self__, "managed_namespace_metadata", managed_namespace_metadata)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSpecSyncPolicyAutomated']:
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter(name="managedNamespaceMetadata")
    def managed_namespace_metadata(self) -> Optional['outputs.ApplicationSpecSyncPolicyManagedNamespaceMetadata']:
        """
        Controls metadata in the given namespace (if `CreateNamespace=true`).
        """
        return pulumi.get(self, "managed_namespace_metadata")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSpecSyncPolicyRetry']:
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSpecSyncPolicyAutomated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSpecSyncPolicyManagedNamespaceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the applications.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applications.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the applications.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the applications.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ApplicationSpecSyncPolicyRetry(dict):
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[str] = None):
        """
        :param 'ApplicationSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param str limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSpecSyncPolicyRetryBackoff']:
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSpecSyncPolicyRetryBackoff(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationStates":
            suggest = "operation_states"
        elif key == "reconciledAt":
            suggest = "reconciled_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.ApplicationStatusCondition']] = None,
                 healths: Optional[Sequence['outputs.ApplicationStatusHealth']] = None,
                 operation_states: Optional[Sequence['outputs.ApplicationStatusOperationState']] = None,
                 reconciled_at: Optional[str] = None,
                 resources: Optional[Sequence['outputs.ApplicationStatusResource']] = None,
                 summaries: Optional[Sequence['outputs.ApplicationStatusSummary']] = None,
                 syncs: Optional[Sequence['outputs.ApplicationStatusSync']] = None):
        """
        :param Sequence['ApplicationStatusConditionArgs'] conditions: List of currently observed application conditions.
        :param Sequence['ApplicationStatusHealthArgs'] healths: Application's current health status.
        :param Sequence['ApplicationStatusOperationStateArgs'] operation_states: Information about any ongoing operations, such as a sync.
        :param str reconciled_at: When the application state was reconciled using the latest git version.
        :param Sequence['ApplicationStatusResourceArgs'] resources: List of Kubernetes resources managed by this application.
        :param Sequence['ApplicationStatusSummaryArgs'] summaries: List of URLs and container images used by this application.
        :param Sequence['ApplicationStatusSyncArgs'] syncs: Application's current sync status
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if healths is not None:
            pulumi.set(__self__, "healths", healths)
        if operation_states is not None:
            pulumi.set(__self__, "operation_states", operation_states)
        if reconciled_at is not None:
            pulumi.set(__self__, "reconciled_at", reconciled_at)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if summaries is not None:
            pulumi.set(__self__, "summaries", summaries)
        if syncs is not None:
            pulumi.set(__self__, "syncs", syncs)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ApplicationStatusCondition']]:
        """
        List of currently observed application conditions.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def healths(self) -> Optional[Sequence['outputs.ApplicationStatusHealth']]:
        """
        Application's current health status.
        """
        return pulumi.get(self, "healths")

    @property
    @pulumi.getter(name="operationStates")
    def operation_states(self) -> Optional[Sequence['outputs.ApplicationStatusOperationState']]:
        """
        Information about any ongoing operations, such as a sync.
        """
        return pulumi.get(self, "operation_states")

    @property
    @pulumi.getter(name="reconciledAt")
    def reconciled_at(self) -> Optional[str]:
        """
        When the application state was reconciled using the latest git version.
        """
        return pulumi.get(self, "reconciled_at")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Sequence['outputs.ApplicationStatusResource']]:
        """
        List of Kubernetes resources managed by this application.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def summaries(self) -> Optional[Sequence['outputs.ApplicationStatusSummary']]:
        """
        List of URLs and container images used by this application.
        """
        return pulumi.get(self, "summaries")

    @property
    @pulumi.getter
    def syncs(self) -> Optional[Sequence['outputs.ApplicationStatusSync']]:
        """
        Application's current sync status
        """
        return pulumi.get(self, "syncs")


@pulumi.output_type
class ApplicationStatusCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastTransitionTime":
            suggest = "last_transition_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str last_transition_time: The time the condition was last observed.
        :param str message: Human-readable message indicating details about condition.
        :param str type: Application condition type.
        """
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        """
        The time the condition was last observed.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Human-readable message indicating details about condition.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Application condition type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ApplicationStatusHealth(dict):
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str message: Human-readable informational message describing the health status.
        :param str status: Status code of the application or resource.
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Human-readable informational message describing the health status.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Status code of the application or resource.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ApplicationStatusOperationState(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "finishedAt":
            suggest = "finished_at"
        elif key == "retryCount":
            suggest = "retry_count"
        elif key == "startedAt":
            suggest = "started_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusOperationState. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusOperationState.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusOperationState.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 finished_at: Optional[str] = None,
                 message: Optional[str] = None,
                 phase: Optional[str] = None,
                 retry_count: Optional[str] = None,
                 started_at: Optional[str] = None):
        """
        :param str finished_at: Time of operation completion.
        :param str message: Any pertinent messages when attempting to perform operation (typically errors).
        :param str phase: The current phase of the operation.
        :param str retry_count: Count of operation retries.
        :param str started_at: Time of operation start.
        """
        if finished_at is not None:
            pulumi.set(__self__, "finished_at", finished_at)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)

    @property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> Optional[str]:
        """
        Time of operation completion.
        """
        return pulumi.get(self, "finished_at")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Any pertinent messages when attempting to perform operation (typically errors).
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        The current phase of the operation.
        """
        return pulumi.get(self, "phase")

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[str]:
        """
        Count of operation retries.
        """
        return pulumi.get(self, "retry_count")

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[str]:
        """
        Time of operation start.
        """
        return pulumi.get(self, "started_at")


@pulumi.output_type
class ApplicationStatusResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requiresPruning":
            suggest = "requires_pruning"
        elif key == "syncWave":
            suggest = "sync_wave"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 healths: Optional[Sequence['outputs.ApplicationStatusResourceHealth']] = None,
                 hook: Optional[bool] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 requires_pruning: Optional[bool] = None,
                 status: Optional[str] = None,
                 sync_wave: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence['ApplicationStatusResourceHealthArgs'] healths: Resource health status.
        :param bool hook: Indicates whether or not this resource has a hook annotation.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the applications.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applications.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param bool requires_pruning: Indicates if the resources requires pruning or not.
        :param str status: Resource sync status.
        :param str sync_wave: Sync wave.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if healths is not None:
            pulumi.set(__self__, "healths", healths)
        if hook is not None:
            pulumi.set(__self__, "hook", hook)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if requires_pruning is not None:
            pulumi.set(__self__, "requires_pruning", requires_pruning)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if sync_wave is not None:
            pulumi.set(__self__, "sync_wave", sync_wave)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def healths(self) -> Optional[Sequence['outputs.ApplicationStatusResourceHealth']]:
        """
        Resource health status.
        """
        return pulumi.get(self, "healths")

    @property
    @pulumi.getter
    def hook(self) -> Optional[bool]:
        """
        Indicates whether or not this resource has a hook annotation.
        """
        return pulumi.get(self, "hook")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the applications.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the applications.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="requiresPruning")
    def requires_pruning(self) -> Optional[bool]:
        """
        Indicates if the resources requires pruning or not.
        """
        return pulumi.get(self, "requires_pruning")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Resource sync status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="syncWave")
    def sync_wave(self) -> Optional[str]:
        """
        Sync wave.
        """
        return pulumi.get(self, "sync_wave")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationStatusResourceHealth(dict):
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str message: Human-readable informational message describing the health status.
        :param str status: Status code of the application or resource.
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Human-readable informational message describing the health status.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Status code of the application or resource.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ApplicationStatusSummary(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalUrls":
            suggest = "external_urls"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusSummary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusSummary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusSummary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_urls: Optional[Sequence[Any]] = None,
                 images: Optional[Sequence[Any]] = None):
        """
        :param Sequence[Any] external_urls: All external URLs of application child resources.
        :param Sequence[Any] images: List of Kustomize image override specifications.
        """
        if external_urls is not None:
            pulumi.set(__self__, "external_urls", external_urls)
        if images is not None:
            pulumi.set(__self__, "images", images)

    @property
    @pulumi.getter(name="externalUrls")
    def external_urls(self) -> Optional[Sequence[Any]]:
        """
        All external URLs of application child resources.
        """
        return pulumi.get(self, "external_urls")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[Any]]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")


@pulumi.output_type
class ApplicationStatusSync(dict):
    def __init__(__self__, *,
                 revision: Optional[str] = None,
                 revisions: Optional[Sequence[Any]] = None,
                 status: Optional[str] = None):
        """
        :param str revision: Information about the revision the comparison has been performed to.
        :param Sequence[Any] revisions: Information about the revision(s) the comparison has been performed to.
        :param str status: Sync state of the comparison.
        """
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if revisions is not None:
            pulumi.set(__self__, "revisions", revisions)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def revision(self) -> Optional[str]:
        """
        Information about the revision the comparison has been performed to.
        """
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter
    def revisions(self) -> Optional[Sequence[Any]]:
        """
        Information about the revision(s) the comparison has been performed to.
        """
        return pulumi.get(self, "revisions")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Sync state of the comparison.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ClusterConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsAuthConfigs":
            suggest = "aws_auth_configs"
        elif key == "bearerToken":
            suggest = "bearer_token"
        elif key == "execProviderConfig":
            suggest = "exec_provider_config"
        elif key == "tlsClientConfig":
            suggest = "tls_client_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_auth_configs: Optional[Sequence['outputs.ClusterConfigAwsAuthConfig']] = None,
                 bearer_token: Optional[str] = None,
                 exec_provider_config: Optional['outputs.ClusterConfigExecProviderConfig'] = None,
                 password: Optional[str] = None,
                 tls_client_config: Optional['outputs.ClusterConfigTlsClientConfig'] = None,
                 username: Optional[str] = None):
        """
        :param str bearer_token: Server requires Bearer authentication. The client will not attempt to use refresh tokens for an OAuth2 flow.
        :param 'ClusterConfigExecProviderConfigArgs' exec_provider_config: Configuration for an exec provider used to call an external command to perform cluster authentication See: https://godoc.org/k8s.io/client-go/tools/clientcmd/api#ExecConfig.
        :param str password: Password for servers that require Basic authentication.
        :param 'ClusterConfigTlsClientConfigArgs' tls_client_config: Settings to enable transport layer security when connecting to the cluster.
        :param str username: Username for servers that require Basic authentication.
        """
        if aws_auth_configs is not None:
            pulumi.set(__self__, "aws_auth_configs", aws_auth_configs)
        if bearer_token is not None:
            pulumi.set(__self__, "bearer_token", bearer_token)
        if exec_provider_config is not None:
            pulumi.set(__self__, "exec_provider_config", exec_provider_config)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if tls_client_config is not None:
            pulumi.set(__self__, "tls_client_config", tls_client_config)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="awsAuthConfigs")
    def aws_auth_configs(self) -> Optional[Sequence['outputs.ClusterConfigAwsAuthConfig']]:
        return pulumi.get(self, "aws_auth_configs")

    @property
    @pulumi.getter(name="bearerToken")
    def bearer_token(self) -> Optional[str]:
        """
        Server requires Bearer authentication. The client will not attempt to use refresh tokens for an OAuth2 flow.
        """
        return pulumi.get(self, "bearer_token")

    @property
    @pulumi.getter(name="execProviderConfig")
    def exec_provider_config(self) -> Optional['outputs.ClusterConfigExecProviderConfig']:
        """
        Configuration for an exec provider used to call an external command to perform cluster authentication See: https://godoc.org/k8s.io/client-go/tools/clientcmd/api#ExecConfig.
        """
        return pulumi.get(self, "exec_provider_config")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password for servers that require Basic authentication.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="tlsClientConfig")
    def tls_client_config(self) -> Optional['outputs.ClusterConfigTlsClientConfig']:
        """
        Settings to enable transport layer security when connecting to the cluster.
        """
        return pulumi.get(self, "tls_client_config")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        Username for servers that require Basic authentication.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class ClusterConfigAwsAuthConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterName":
            suggest = "cluster_name"
        elif key == "roleArn":
            suggest = "role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterConfigAwsAuthConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterConfigAwsAuthConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterConfigAwsAuthConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_name: Optional[str] = None,
                 role_arn: Optional[str] = None):
        """
        :param str cluster_name: AWS cluster name.
        :param str role_arn: IAM role ARN. If set then AWS IAM Authenticator assume a role to perform cluster operations instead of the default AWS credential provider chain.
        """
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        """
        AWS cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        """
        IAM role ARN. If set then AWS IAM Authenticator assume a role to perform cluster operations instead of the default AWS credential provider chain.
        """
        return pulumi.get(self, "role_arn")


@pulumi.output_type
class ClusterConfigExecProviderConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiVersion":
            suggest = "api_version"
        elif key == "installHint":
            suggest = "install_hint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterConfigExecProviderConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterConfigExecProviderConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterConfigExecProviderConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_version: Optional[str] = None,
                 args: Optional[Sequence[str]] = None,
                 command: Optional[str] = None,
                 env: Optional[Mapping[str, str]] = None,
                 install_hint: Optional[str] = None):
        """
        :param str api_version: Preferred input version of the ExecInfo
        :param Sequence[str] args: Arguments to pass to the command when executing it
        :param str command: Command to execute
        :param Mapping[str, str] env: Env defines additional environment variables to expose to the process. Passed as a map of strings
        :param str install_hint: This text is shown to the user when the executable doesn't seem to be present
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if install_hint is not None:
            pulumi.set(__self__, "install_hint", install_hint)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        """
        Preferred input version of the ExecInfo
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        """
        Arguments to pass to the command when executing it
        """
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def command(self) -> Optional[str]:
        """
        Command to execute
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, str]]:
        """
        Env defines additional environment variables to expose to the process. Passed as a map of strings
        """
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="installHint")
    def install_hint(self) -> Optional[str]:
        """
        This text is shown to the user when the executable doesn't seem to be present
        """
        return pulumi.get(self, "install_hint")


@pulumi.output_type
class ClusterConfigTlsClientConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caData":
            suggest = "ca_data"
        elif key == "certData":
            suggest = "cert_data"
        elif key == "keyData":
            suggest = "key_data"
        elif key == "serverName":
            suggest = "server_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterConfigTlsClientConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterConfigTlsClientConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterConfigTlsClientConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_data: Optional[str] = None,
                 cert_data: Optional[str] = None,
                 insecure: Optional[bool] = None,
                 key_data: Optional[str] = None,
                 server_name: Optional[str] = None):
        """
        :param str ca_data: PEM-encoded bytes (typically read from a root certificates bundle).
        :param str cert_data: PEM-encoded bytes (typically read from a client certificate file).
        :param bool insecure: Whether server should be accessed without verifying the TLS certificate.
        :param str key_data: PEM-encoded bytes (typically read from a client certificate key file).
        :param str server_name: Name to pass to the server for SNI and used in the client to check server certificates against. If empty, the hostname used to contact the server is used.
        """
        if ca_data is not None:
            pulumi.set(__self__, "ca_data", ca_data)
        if cert_data is not None:
            pulumi.set(__self__, "cert_data", cert_data)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if key_data is not None:
            pulumi.set(__self__, "key_data", key_data)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)

    @property
    @pulumi.getter(name="caData")
    def ca_data(self) -> Optional[str]:
        """
        PEM-encoded bytes (typically read from a root certificates bundle).
        """
        return pulumi.get(self, "ca_data")

    @property
    @pulumi.getter(name="certData")
    def cert_data(self) -> Optional[str]:
        """
        PEM-encoded bytes (typically read from a client certificate file).
        """
        return pulumi.get(self, "cert_data")

    @property
    @pulumi.getter
    def insecure(self) -> Optional[bool]:
        """
        Whether server should be accessed without verifying the TLS certificate.
        """
        return pulumi.get(self, "insecure")

    @property
    @pulumi.getter(name="keyData")
    def key_data(self) -> Optional[str]:
        """
        PEM-encoded bytes (typically read from a client certificate key file).
        """
        return pulumi.get(self, "key_data")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[str]:
        """
        Name to pass to the server for SNI and used in the client to check server certificates against. If empty, the hostname used to contact the server is used.
        """
        return pulumi.get(self, "server_name")


@pulumi.output_type
class ClusterInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationsCount":
            suggest = "applications_count"
        elif key == "connectionStates":
            suggest = "connection_states"
        elif key == "serverVersion":
            suggest = "server_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 applications_count: Optional[str] = None,
                 connection_states: Optional[Sequence['outputs.ClusterInfoConnectionState']] = None,
                 server_version: Optional[str] = None):
        """
        :param str applications_count: Number of applications managed by Argo CD on the cluster.
        :param Sequence['ClusterInfoConnectionStateArgs'] connection_states: Information about the connection to the cluster.
        :param str server_version: Kubernetes version of the cluster.
        """
        if applications_count is not None:
            pulumi.set(__self__, "applications_count", applications_count)
        if connection_states is not None:
            pulumi.set(__self__, "connection_states", connection_states)
        if server_version is not None:
            pulumi.set(__self__, "server_version", server_version)

    @property
    @pulumi.getter(name="applicationsCount")
    def applications_count(self) -> Optional[str]:
        """
        Number of applications managed by Argo CD on the cluster.
        """
        return pulumi.get(self, "applications_count")

    @property
    @pulumi.getter(name="connectionStates")
    def connection_states(self) -> Optional[Sequence['outputs.ClusterInfoConnectionState']]:
        """
        Information about the connection to the cluster.
        """
        return pulumi.get(self, "connection_states")

    @property
    @pulumi.getter(name="serverVersion")
    def server_version(self) -> Optional[str]:
        """
        Kubernetes version of the cluster.
        """
        return pulumi.get(self, "server_version")


@pulumi.output_type
class ClusterInfoConnectionState(dict):
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str message: Human readable information about the connection status.
        :param str status: Current status indicator for the connection.
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Human readable information about the connection status.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Current status indicator for the connection.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ClusterMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the cluster secret that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the cluster secret. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the cluster secret that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the cluster secret. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ProjectMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceVersion":
            suggest = "resource_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 generation: Optional[int] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 resource_version: Optional[str] = None,
                 uid: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the appprojects.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param int generation: A sequence number representing a specific generation of the desired state.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the appprojects.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the appprojects.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the appprojects.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str resource_version: An opaque value that represents the internal version of this appprojects.argoproj.io that can be used by clients to determine when appprojects.argoproj.io has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        :param str uid: The unique in time and space value for this appprojects.argoproj.io. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if generation is not None:
            pulumi.set(__self__, "generation", generation)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        An unstructured key value map stored with the appprojects.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def generation(self) -> Optional[int]:
        """
        A sequence number representing a specific generation of the desired state.
        """
        return pulumi.get(self, "generation")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the appprojects.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the appprojects.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the appprojects.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[str]:
        """
        An opaque value that represents the internal version of this appprojects.argoproj.io that can be used by clients to determine when appprojects.argoproj.io has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        return pulumi.get(self, "resource_version")

    @property
    @pulumi.getter
    def uid(self) -> Optional[str]:
        """
        The unique in time and space value for this appprojects.argoproj.io. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
        """
        return pulumi.get(self, "uid")


@pulumi.output_type
class ProjectSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceRepos":
            suggest = "source_repos"
        elif key == "clusterResourceBlacklists":
            suggest = "cluster_resource_blacklists"
        elif key == "clusterResourceWhitelists":
            suggest = "cluster_resource_whitelists"
        elif key == "namespaceResourceBlacklists":
            suggest = "namespace_resource_blacklists"
        elif key == "namespaceResourceWhitelists":
            suggest = "namespace_resource_whitelists"
        elif key == "orphanedResources":
            suggest = "orphaned_resources"
        elif key == "signatureKeys":
            suggest = "signature_keys"
        elif key == "sourceNamespaces":
            suggest = "source_namespaces"
        elif key == "syncWindows":
            suggest = "sync_windows"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destinations: Sequence['outputs.ProjectSpecDestination'],
                 source_repos: Sequence[str],
                 cluster_resource_blacklists: Optional[Sequence['outputs.ProjectSpecClusterResourceBlacklist']] = None,
                 cluster_resource_whitelists: Optional[Sequence['outputs.ProjectSpecClusterResourceWhitelist']] = None,
                 description: Optional[str] = None,
                 namespace_resource_blacklists: Optional[Sequence['outputs.ProjectSpecNamespaceResourceBlacklist']] = None,
                 namespace_resource_whitelists: Optional[Sequence['outputs.ProjectSpecNamespaceResourceWhitelist']] = None,
                 orphaned_resources: Optional['outputs.ProjectSpecOrphanedResources'] = None,
                 roles: Optional[Sequence['outputs.ProjectSpecRole']] = None,
                 signature_keys: Optional[Sequence[str]] = None,
                 source_namespaces: Optional[Sequence[str]] = None,
                 sync_windows: Optional[Sequence['outputs.ProjectSpecSyncWindow']] = None):
        """
        :param Sequence['ProjectSpecDestinationArgs'] destinations: Destinations available for deployment.
        :param Sequence[str] source_repos: List of repository URLs which can be used for deployment. Can be set to `["*"]` to allow all configured repositories configured in ArgoCD.
        :param Sequence['ProjectSpecClusterResourceBlacklistArgs'] cluster_resource_blacklists: Blacklisted cluster level resources.
        :param Sequence['ProjectSpecClusterResourceWhitelistArgs'] cluster_resource_whitelists: Whitelisted cluster level resources.
        :param str description: Project description.
        :param Sequence['ProjectSpecNamespaceResourceBlacklistArgs'] namespace_resource_blacklists: Blacklisted namespace level resources.
        :param Sequence['ProjectSpecNamespaceResourceWhitelistArgs'] namespace_resource_whitelists: Whitelisted namespace level resources.
        :param 'ProjectSpecOrphanedResourcesArgs' orphaned_resources: Settings specifying if controller should monitor orphaned resources of apps in this project.
        :param Sequence['ProjectSpecRoleArgs'] roles: User defined RBAC roles associated with this project.
        :param Sequence[str] signature_keys: List of PGP key IDs that commits in Git must be signed with in order to be allowed for sync.
        :param Sequence[str] source_namespaces: List of namespaces that application resources are allowed to be created in.
        :param Sequence['ProjectSpecSyncWindowArgs'] sync_windows: Settings controlling when syncs can be run for apps in this project.
        """
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "source_repos", source_repos)
        if cluster_resource_blacklists is not None:
            pulumi.set(__self__, "cluster_resource_blacklists", cluster_resource_blacklists)
        if cluster_resource_whitelists is not None:
            pulumi.set(__self__, "cluster_resource_whitelists", cluster_resource_whitelists)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if namespace_resource_blacklists is not None:
            pulumi.set(__self__, "namespace_resource_blacklists", namespace_resource_blacklists)
        if namespace_resource_whitelists is not None:
            pulumi.set(__self__, "namespace_resource_whitelists", namespace_resource_whitelists)
        if orphaned_resources is not None:
            pulumi.set(__self__, "orphaned_resources", orphaned_resources)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if signature_keys is not None:
            pulumi.set(__self__, "signature_keys", signature_keys)
        if source_namespaces is not None:
            pulumi.set(__self__, "source_namespaces", source_namespaces)
        if sync_windows is not None:
            pulumi.set(__self__, "sync_windows", sync_windows)

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.ProjectSpecDestination']:
        """
        Destinations available for deployment.
        """
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="sourceRepos")
    def source_repos(self) -> Sequence[str]:
        """
        List of repository URLs which can be used for deployment. Can be set to `["*"]` to allow all configured repositories configured in ArgoCD.
        """
        return pulumi.get(self, "source_repos")

    @property
    @pulumi.getter(name="clusterResourceBlacklists")
    def cluster_resource_blacklists(self) -> Optional[Sequence['outputs.ProjectSpecClusterResourceBlacklist']]:
        """
        Blacklisted cluster level resources.
        """
        return pulumi.get(self, "cluster_resource_blacklists")

    @property
    @pulumi.getter(name="clusterResourceWhitelists")
    def cluster_resource_whitelists(self) -> Optional[Sequence['outputs.ProjectSpecClusterResourceWhitelist']]:
        """
        Whitelisted cluster level resources.
        """
        return pulumi.get(self, "cluster_resource_whitelists")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Project description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="namespaceResourceBlacklists")
    def namespace_resource_blacklists(self) -> Optional[Sequence['outputs.ProjectSpecNamespaceResourceBlacklist']]:
        """
        Blacklisted namespace level resources.
        """
        return pulumi.get(self, "namespace_resource_blacklists")

    @property
    @pulumi.getter(name="namespaceResourceWhitelists")
    def namespace_resource_whitelists(self) -> Optional[Sequence['outputs.ProjectSpecNamespaceResourceWhitelist']]:
        """
        Whitelisted namespace level resources.
        """
        return pulumi.get(self, "namespace_resource_whitelists")

    @property
    @pulumi.getter(name="orphanedResources")
    def orphaned_resources(self) -> Optional['outputs.ProjectSpecOrphanedResources']:
        """
        Settings specifying if controller should monitor orphaned resources of apps in this project.
        """
        return pulumi.get(self, "orphaned_resources")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence['outputs.ProjectSpecRole']]:
        """
        User defined RBAC roles associated with this project.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="signatureKeys")
    def signature_keys(self) -> Optional[Sequence[str]]:
        """
        List of PGP key IDs that commits in Git must be signed with in order to be allowed for sync.
        """
        return pulumi.get(self, "signature_keys")

    @property
    @pulumi.getter(name="sourceNamespaces")
    def source_namespaces(self) -> Optional[Sequence[str]]:
        """
        List of namespaces that application resources are allowed to be created in.
        """
        return pulumi.get(self, "source_namespaces")

    @property
    @pulumi.getter(name="syncWindows")
    def sync_windows(self) -> Optional[Sequence['outputs.ProjectSpecSyncWindow']]:
        """
        Settings controlling when syncs can be run for apps in this project.
        """
        return pulumi.get(self, "sync_windows")


@pulumi.output_type
class ProjectSpecClusterResourceBlacklist(dict):
    def __init__(__self__, *,
                 group: Optional[str] = None,
                 kind: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param str kind: The Kubernetes resource Kind to match for.
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")


@pulumi.output_type
class ProjectSpecClusterResourceWhitelist(dict):
    def __init__(__self__, *,
                 group: Optional[str] = None,
                 kind: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param str kind: The Kubernetes resource Kind to match for.
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")


@pulumi.output_type
class ProjectSpecDestination(dict):
    def __init__(__self__, *,
                 namespace: str,
                 name: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str namespace: Namespace of the appprojects.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str name: Name of the appprojects.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        pulumi.set(__self__, "namespace", namespace)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Namespace of the appprojects.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the appprojects.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ProjectSpecNamespaceResourceBlacklist(dict):
    def __init__(__self__, *,
                 group: Optional[str] = None,
                 kind: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param str kind: The Kubernetes resource Kind to match for.
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")


@pulumi.output_type
class ProjectSpecNamespaceResourceWhitelist(dict):
    def __init__(__self__, *,
                 group: Optional[str] = None,
                 kind: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param str kind: The Kubernetes resource Kind to match for.
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")


@pulumi.output_type
class ProjectSpecOrphanedResources(dict):
    def __init__(__self__, *,
                 ignores: Optional[Sequence['outputs.ProjectSpecOrphanedResourcesIgnore']] = None,
                 warn: Optional[bool] = None):
        """
        :param bool warn: Whether a warning condition should be created for apps which have orphaned resources.
        """
        if ignores is not None:
            pulumi.set(__self__, "ignores", ignores)
        if warn is not None:
            pulumi.set(__self__, "warn", warn)

    @property
    @pulumi.getter
    def ignores(self) -> Optional[Sequence['outputs.ProjectSpecOrphanedResourcesIgnore']]:
        return pulumi.get(self, "ignores")

    @property
    @pulumi.getter
    def warn(self) -> Optional[bool]:
        """
        Whether a warning condition should be created for apps which have orphaned resources.
        """
        return pulumi.get(self, "warn")


@pulumi.output_type
class ProjectSpecOrphanedResourcesIgnore(dict):
    def __init__(__self__, *,
                 group: Optional[str] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: Name of the appprojects.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the appprojects.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProjectSpecRole(dict):
    def __init__(__self__, *,
                 name: str,
                 policies: Sequence[str],
                 description: Optional[str] = None,
                 groups: Optional[Sequence[str]] = None):
        """
        :param str name: Name of the appprojects.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param Sequence[str] policies: List of casbin formatted strings that define access policies for the role in the project. For more information, see the [ArgoCD RBAC reference](https://argoproj.github.io/argo-cd/operator-manual/rbac/#rbac-permission-structure).
        :param str description: Project description.
        :param Sequence[str] groups: List of OIDC group claims bound to this role.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "policies", policies)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the appprojects.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def policies(self) -> Sequence[str]:
        """
        List of casbin formatted strings that define access policies for the role in the project. For more information, see the [ArgoCD RBAC reference](https://argoproj.github.io/argo-cd/operator-manual/rbac/#rbac-permission-structure).
        """
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Project description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def groups(self) -> Optional[Sequence[str]]:
        """
        List of OIDC group claims bound to this role.
        """
        return pulumi.get(self, "groups")


@pulumi.output_type
class ProjectSpecSyncWindow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "manualSync":
            suggest = "manual_sync"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectSpecSyncWindow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectSpecSyncWindow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectSpecSyncWindow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 applications: Optional[Sequence[str]] = None,
                 clusters: Optional[Sequence[str]] = None,
                 duration: Optional[str] = None,
                 kind: Optional[str] = None,
                 manual_sync: Optional[bool] = None,
                 namespaces: Optional[Sequence[str]] = None,
                 schedule: Optional[str] = None,
                 timezone: Optional[str] = None):
        """
        :param Sequence[str] applications: List of applications that the window will apply to.
        :param Sequence[str] clusters: List of clusters that the window will apply to.
        :param str duration: Amount of time the sync window will be open.
        :param str kind: The Kubernetes resource Kind to match for.
        :param bool manual_sync: Enables manual syncs when they would otherwise be blocked.
        :param Sequence[str] namespaces: List of namespaces that the window will apply to.
        :param str schedule: Time the window will begin, specified in cron format.
        :param str timezone: Timezone that the schedule will be evaluated in.
        """
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if manual_sync is not None:
            pulumi.set(__self__, "manual_sync", manual_sync)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter
    def applications(self) -> Optional[Sequence[str]]:
        """
        List of applications that the window will apply to.
        """
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter
    def clusters(self) -> Optional[Sequence[str]]:
        """
        List of clusters that the window will apply to.
        """
        return pulumi.get(self, "clusters")

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Amount of time the sync window will be open.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="manualSync")
    def manual_sync(self) -> Optional[bool]:
        """
        Enables manual syncs when they would otherwise be blocked.
        """
        return pulumi.get(self, "manual_sync")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        List of namespaces that the window will apply to.
        """
        return pulumi.get(self, "namespaces")

    @property
    @pulumi.getter
    def schedule(self) -> Optional[str]:
        """
        Time the window will begin, specified in cron format.
        """
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        """
        Timezone that the schedule will be evaluated in.
        """
        return pulumi.get(self, "timezone")


@pulumi.output_type
class RepositoryCertificateHttps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certData":
            suggest = "cert_data"
        elif key == "serverName":
            suggest = "server_name"
        elif key == "certInfo":
            suggest = "cert_info"
        elif key == "certSubtype":
            suggest = "cert_subtype"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RepositoryCertificateHttps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RepositoryCertificateHttps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RepositoryCertificateHttps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cert_data: str,
                 server_name: str,
                 cert_info: Optional[str] = None,
                 cert_subtype: Optional[str] = None):
        """
        :param str cert_data: The actual certificate data, dependent on the certificate type.
        :param str server_name: DNS name of the server this certificate is intended for.
        :param str cert_info: Additional certificate info, dependent on the certificate type (e.g. SSH fingerprint, X509 CommonName).
        :param str cert_subtype: The sub type of the cert, i.e. `ssh-rsa`.
        """
        pulumi.set(__self__, "cert_data", cert_data)
        pulumi.set(__self__, "server_name", server_name)
        if cert_info is not None:
            pulumi.set(__self__, "cert_info", cert_info)
        if cert_subtype is not None:
            pulumi.set(__self__, "cert_subtype", cert_subtype)

    @property
    @pulumi.getter(name="certData")
    def cert_data(self) -> str:
        """
        The actual certificate data, dependent on the certificate type.
        """
        return pulumi.get(self, "cert_data")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> str:
        """
        DNS name of the server this certificate is intended for.
        """
        return pulumi.get(self, "server_name")

    @property
    @pulumi.getter(name="certInfo")
    def cert_info(self) -> Optional[str]:
        """
        Additional certificate info, dependent on the certificate type (e.g. SSH fingerprint, X509 CommonName).
        """
        return pulumi.get(self, "cert_info")

    @property
    @pulumi.getter(name="certSubtype")
    def cert_subtype(self) -> Optional[str]:
        """
        The sub type of the cert, i.e. `ssh-rsa`.
        """
        return pulumi.get(self, "cert_subtype")


@pulumi.output_type
class RepositoryCertificateSsh(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certData":
            suggest = "cert_data"
        elif key == "certSubtype":
            suggest = "cert_subtype"
        elif key == "serverName":
            suggest = "server_name"
        elif key == "certInfo":
            suggest = "cert_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RepositoryCertificateSsh. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RepositoryCertificateSsh.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RepositoryCertificateSsh.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cert_data: str,
                 cert_subtype: str,
                 server_name: str,
                 cert_info: Optional[str] = None):
        """
        :param str cert_data: The actual certificate data, dependent on the certificate type.
        :param str cert_subtype: The sub type of the cert, i.e. `ssh-rsa`.
        :param str server_name: DNS name of the server this certificate is intended for.
        :param str cert_info: Additional certificate info, dependent on the certificate type (e.g. SSH fingerprint, X509 CommonName).
        """
        pulumi.set(__self__, "cert_data", cert_data)
        pulumi.set(__self__, "cert_subtype", cert_subtype)
        pulumi.set(__self__, "server_name", server_name)
        if cert_info is not None:
            pulumi.set(__self__, "cert_info", cert_info)

    @property
    @pulumi.getter(name="certData")
    def cert_data(self) -> str:
        """
        The actual certificate data, dependent on the certificate type.
        """
        return pulumi.get(self, "cert_data")

    @property
    @pulumi.getter(name="certSubtype")
    def cert_subtype(self) -> str:
        """
        The sub type of the cert, i.e. `ssh-rsa`.
        """
        return pulumi.get(self, "cert_subtype")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> str:
        """
        DNS name of the server this certificate is intended for.
        """
        return pulumi.get(self, "server_name")

    @property
    @pulumi.getter(name="certInfo")
    def cert_info(self) -> Optional[str]:
        """
        Additional certificate info, dependent on the certificate type (e.g. SSH fingerprint, X509 CommonName).
        """
        return pulumi.get(self, "cert_info")


