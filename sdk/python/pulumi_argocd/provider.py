# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from ._inputs import *

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 auth_token: Optional[pulumi.Input[str]] = None,
                 cert_file: Optional[pulumi.Input[str]] = None,
                 client_cert_file: Optional[pulumi.Input[str]] = None,
                 client_cert_key: Optional[pulumi.Input[str]] = None,
                 config_path: Optional[pulumi.Input[str]] = None,
                 context: Optional[pulumi.Input[str]] = None,
                 core: Optional[pulumi.Input[bool]] = None,
                 grpc_web: Optional[pulumi.Input[bool]] = None,
                 grpc_web_root_path: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 kubernetes: Optional[pulumi.Input['ProviderKubernetesArgs']] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 plain_text: Optional[pulumi.Input[bool]] = None,
                 port_forward: Optional[pulumi.Input[bool]] = None,
                 port_forward_with_namespace: Optional[pulumi.Input[str]] = None,
                 server_addr: Optional[pulumi.Input[str]] = None,
                 use_local_config: Optional[pulumi.Input[bool]] = None,
                 user_agent: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[str] auth_token: ArgoCD authentication token, takes precedence over `username`/`password`. Can be set through the `ARGOCD_AUTH_TOKEN`
               environment variable.
        :param pulumi.Input[str] cert_file: Additional root CA certificates file to add to the client TLS connection pool.
        :param pulumi.Input[str] client_cert_file: Client certificate.
        :param pulumi.Input[str] client_cert_key: Client certificate key.
        :param pulumi.Input[str] config_path: Override the default config path of `$HOME/.config/argocd/config`. Only relevant when `use_local_config`. Can be set
               through the `ARGOCD_CONFIG_PATH` environment variable.
        :param pulumi.Input[str] context: Context to choose when using a local ArgoCD config file. Only relevant when `use_local_config`. Can be set through
               `ARGOCD_CONTEXT` environment variable.
        :param pulumi.Input[bool] core: Configure direct access using Kubernetes API server. **Warning**: this feature works by starting a local ArgoCD API
               server that talks directly to the Kubernetes API using the **current context in the default kubeconfig**
               (`~/.kube/config`). This behavior cannot be overridden using either environment variables or the `kubernetes` block in
               the provider configuration at present). If the server fails to start (e.g. your kubeconfig is misconfigured) then the
               provider will fail as a result of the `argocd` module forcing it to exit and no logs will be available to help you debug
               this. The error message will be similar to > `The plugin encountered an error, and failed to respond to the
               plugin.(*GRPCProvider).ReadResource call. The plugin logs may contain more details.` To debug this, you will need to
               login via the ArgoCD CLI using `argocd login --core` and then running an operation. E.g. `argocd app list`.
        :param pulumi.Input[bool] grpc_web: Whether to use gRPC web proxy client. Useful if Argo CD server is behind proxy which does not support HTTP2.
        :param pulumi.Input[str] grpc_web_root_path: Use the gRPC web proxy client and set the web root, e.g. `argo-cd`. Useful if the Argo CD server is behind a proxy at a
               non-root path.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] headers: Additional headers to add to each request to the ArgoCD server.
        :param pulumi.Input[bool] insecure: Whether to skip TLS server certificate. Can be set through the `ARGOCD_INSECURE` environment variable.
        :param pulumi.Input['ProviderKubernetesArgs'] kubernetes: Kubernetes configuration overrides. Only relevant when `port_forward = true` or `port_forward_with_namespace = "foo"`.
               The kubeconfig file that is used can be overridden using the [`KUBECONFIG` environment
               variable](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#the-kubeconfig-environment-variable)).
        :param pulumi.Input[str] password: Authentication password. Can be set through the `ARGOCD_AUTH_PASSWORD` environment variable.
        :param pulumi.Input[bool] plain_text: Whether to initiate an unencrypted connection to ArgoCD server.
        :param pulumi.Input[bool] port_forward: Connect to a random argocd-server port using port forwarding.
        :param pulumi.Input[str] port_forward_with_namespace: Namespace name which should be used for port forwarding.
        :param pulumi.Input[str] server_addr: ArgoCD server address with port. Can be set through the `ARGOCD_SERVER` environment variable.
        :param pulumi.Input[bool] use_local_config: Use the authentication settings found in the local config file. Useful when you have previously logged in using SSO.
               Conflicts with `auth_token`, `username` and `password`.
        :param pulumi.Input[str] user_agent: User-Agent request header override.
        :param pulumi.Input[str] username: Authentication username. Can be set through the `ARGOCD_AUTH_USERNAME` environment variable.
        """
        if auth_token is not None:
            pulumi.set(__self__, "auth_token", auth_token)
        if cert_file is not None:
            pulumi.set(__self__, "cert_file", cert_file)
        if client_cert_file is not None:
            pulumi.set(__self__, "client_cert_file", client_cert_file)
        if client_cert_key is not None:
            pulumi.set(__self__, "client_cert_key", client_cert_key)
        if config_path is not None:
            pulumi.set(__self__, "config_path", config_path)
        if context is not None:
            pulumi.set(__self__, "context", context)
        if core is not None:
            pulumi.set(__self__, "core", core)
        if grpc_web is not None:
            pulumi.set(__self__, "grpc_web", grpc_web)
        if grpc_web_root_path is not None:
            pulumi.set(__self__, "grpc_web_root_path", grpc_web_root_path)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if plain_text is not None:
            pulumi.set(__self__, "plain_text", plain_text)
        if port_forward is not None:
            pulumi.set(__self__, "port_forward", port_forward)
        if port_forward_with_namespace is not None:
            pulumi.set(__self__, "port_forward_with_namespace", port_forward_with_namespace)
        if server_addr is not None:
            pulumi.set(__self__, "server_addr", server_addr)
        if use_local_config is not None:
            pulumi.set(__self__, "use_local_config", use_local_config)
        if user_agent is not None:
            pulumi.set(__self__, "user_agent", user_agent)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> Optional[pulumi.Input[str]]:
        """
        ArgoCD authentication token, takes precedence over `username`/`password`. Can be set through the `ARGOCD_AUTH_TOKEN`
        environment variable.
        """
        return pulumi.get(self, "auth_token")

    @auth_token.setter
    def auth_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_token", value)

    @property
    @pulumi.getter(name="certFile")
    def cert_file(self) -> Optional[pulumi.Input[str]]:
        """
        Additional root CA certificates file to add to the client TLS connection pool.
        """
        return pulumi.get(self, "cert_file")

    @cert_file.setter
    def cert_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_file", value)

    @property
    @pulumi.getter(name="clientCertFile")
    def client_cert_file(self) -> Optional[pulumi.Input[str]]:
        """
        Client certificate.
        """
        return pulumi.get(self, "client_cert_file")

    @client_cert_file.setter
    def client_cert_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert_file", value)

    @property
    @pulumi.getter(name="clientCertKey")
    def client_cert_key(self) -> Optional[pulumi.Input[str]]:
        """
        Client certificate key.
        """
        return pulumi.get(self, "client_cert_key")

    @client_cert_key.setter
    def client_cert_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert_key", value)

    @property
    @pulumi.getter(name="configPath")
    def config_path(self) -> Optional[pulumi.Input[str]]:
        """
        Override the default config path of `$HOME/.config/argocd/config`. Only relevant when `use_local_config`. Can be set
        through the `ARGOCD_CONFIG_PATH` environment variable.
        """
        return pulumi.get(self, "config_path")

    @config_path.setter
    def config_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_path", value)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[str]]:
        """
        Context to choose when using a local ArgoCD config file. Only relevant when `use_local_config`. Can be set through
        `ARGOCD_CONTEXT` environment variable.
        """
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def core(self) -> Optional[pulumi.Input[bool]]:
        """
        Configure direct access using Kubernetes API server. **Warning**: this feature works by starting a local ArgoCD API
        server that talks directly to the Kubernetes API using the **current context in the default kubeconfig**
        (`~/.kube/config`). This behavior cannot be overridden using either environment variables or the `kubernetes` block in
        the provider configuration at present). If the server fails to start (e.g. your kubeconfig is misconfigured) then the
        provider will fail as a result of the `argocd` module forcing it to exit and no logs will be available to help you debug
        this. The error message will be similar to > `The plugin encountered an error, and failed to respond to the
        plugin.(*GRPCProvider).ReadResource call. The plugin logs may contain more details.` To debug this, you will need to
        login via the ArgoCD CLI using `argocd login --core` and then running an operation. E.g. `argocd app list`.
        """
        return pulumi.get(self, "core")

    @core.setter
    def core(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "core", value)

    @property
    @pulumi.getter(name="grpcWeb")
    def grpc_web(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to use gRPC web proxy client. Useful if Argo CD server is behind proxy which does not support HTTP2.
        """
        return pulumi.get(self, "grpc_web")

    @grpc_web.setter
    def grpc_web(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "grpc_web", value)

    @property
    @pulumi.getter(name="grpcWebRootPath")
    def grpc_web_root_path(self) -> Optional[pulumi.Input[str]]:
        """
        Use the gRPC web proxy client and set the web root, e.g. `argo-cd`. Useful if the Argo CD server is behind a proxy at a
        non-root path.
        """
        return pulumi.get(self, "grpc_web_root_path")

    @grpc_web_root_path.setter
    def grpc_web_root_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grpc_web_root_path", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Additional headers to add to each request to the ArgoCD server.
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to skip TLS server certificate. Can be set through the `ARGOCD_INSECURE` environment variable.
        """
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter
    def kubernetes(self) -> Optional[pulumi.Input['ProviderKubernetesArgs']]:
        """
        Kubernetes configuration overrides. Only relevant when `port_forward = true` or `port_forward_with_namespace = "foo"`.
        The kubeconfig file that is used can be overridden using the [`KUBECONFIG` environment
        variable](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#the-kubeconfig-environment-variable)).
        """
        return pulumi.get(self, "kubernetes")

    @kubernetes.setter
    def kubernetes(self, value: Optional[pulumi.Input['ProviderKubernetesArgs']]):
        pulumi.set(self, "kubernetes", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication password. Can be set through the `ARGOCD_AUTH_PASSWORD` environment variable.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="plainText")
    def plain_text(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to initiate an unencrypted connection to ArgoCD server.
        """
        return pulumi.get(self, "plain_text")

    @plain_text.setter
    def plain_text(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "plain_text", value)

    @property
    @pulumi.getter(name="portForward")
    def port_forward(self) -> Optional[pulumi.Input[bool]]:
        """
        Connect to a random argocd-server port using port forwarding.
        """
        return pulumi.get(self, "port_forward")

    @port_forward.setter
    def port_forward(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "port_forward", value)

    @property
    @pulumi.getter(name="portForwardWithNamespace")
    def port_forward_with_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace name which should be used for port forwarding.
        """
        return pulumi.get(self, "port_forward_with_namespace")

    @port_forward_with_namespace.setter
    def port_forward_with_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_forward_with_namespace", value)

    @property
    @pulumi.getter(name="serverAddr")
    def server_addr(self) -> Optional[pulumi.Input[str]]:
        """
        ArgoCD server address with port. Can be set through the `ARGOCD_SERVER` environment variable.
        """
        return pulumi.get(self, "server_addr")

    @server_addr.setter
    def server_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_addr", value)

    @property
    @pulumi.getter(name="useLocalConfig")
    def use_local_config(self) -> Optional[pulumi.Input[bool]]:
        """
        Use the authentication settings found in the local config file. Useful when you have previously logged in using SSO.
        Conflicts with `auth_token`, `username` and `password`.
        """
        return pulumi.get(self, "use_local_config")

    @use_local_config.setter
    def use_local_config(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_local_config", value)

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> Optional[pulumi.Input[str]]:
        """
        User-Agent request header override.
        """
        return pulumi.get(self, "user_agent")

    @user_agent.setter
    def user_agent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_agent", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication username. Can be set through the `ARGOCD_AUTH_USERNAME` environment variable.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_token: Optional[pulumi.Input[str]] = None,
                 cert_file: Optional[pulumi.Input[str]] = None,
                 client_cert_file: Optional[pulumi.Input[str]] = None,
                 client_cert_key: Optional[pulumi.Input[str]] = None,
                 config_path: Optional[pulumi.Input[str]] = None,
                 context: Optional[pulumi.Input[str]] = None,
                 core: Optional[pulumi.Input[bool]] = None,
                 grpc_web: Optional[pulumi.Input[bool]] = None,
                 grpc_web_root_path: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 kubernetes: Optional[pulumi.Input[pulumi.InputType['ProviderKubernetesArgs']]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 plain_text: Optional[pulumi.Input[bool]] = None,
                 port_forward: Optional[pulumi.Input[bool]] = None,
                 port_forward_with_namespace: Optional[pulumi.Input[str]] = None,
                 server_addr: Optional[pulumi.Input[str]] = None,
                 use_local_config: Optional[pulumi.Input[bool]] = None,
                 user_agent: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The provider type for the argocd package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auth_token: ArgoCD authentication token, takes precedence over `username`/`password`. Can be set through the `ARGOCD_AUTH_TOKEN`
               environment variable.
        :param pulumi.Input[str] cert_file: Additional root CA certificates file to add to the client TLS connection pool.
        :param pulumi.Input[str] client_cert_file: Client certificate.
        :param pulumi.Input[str] client_cert_key: Client certificate key.
        :param pulumi.Input[str] config_path: Override the default config path of `$HOME/.config/argocd/config`. Only relevant when `use_local_config`. Can be set
               through the `ARGOCD_CONFIG_PATH` environment variable.
        :param pulumi.Input[str] context: Context to choose when using a local ArgoCD config file. Only relevant when `use_local_config`. Can be set through
               `ARGOCD_CONTEXT` environment variable.
        :param pulumi.Input[bool] core: Configure direct access using Kubernetes API server. **Warning**: this feature works by starting a local ArgoCD API
               server that talks directly to the Kubernetes API using the **current context in the default kubeconfig**
               (`~/.kube/config`). This behavior cannot be overridden using either environment variables or the `kubernetes` block in
               the provider configuration at present). If the server fails to start (e.g. your kubeconfig is misconfigured) then the
               provider will fail as a result of the `argocd` module forcing it to exit and no logs will be available to help you debug
               this. The error message will be similar to > `The plugin encountered an error, and failed to respond to the
               plugin.(*GRPCProvider).ReadResource call. The plugin logs may contain more details.` To debug this, you will need to
               login via the ArgoCD CLI using `argocd login --core` and then running an operation. E.g. `argocd app list`.
        :param pulumi.Input[bool] grpc_web: Whether to use gRPC web proxy client. Useful if Argo CD server is behind proxy which does not support HTTP2.
        :param pulumi.Input[str] grpc_web_root_path: Use the gRPC web proxy client and set the web root, e.g. `argo-cd`. Useful if the Argo CD server is behind a proxy at a
               non-root path.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] headers: Additional headers to add to each request to the ArgoCD server.
        :param pulumi.Input[bool] insecure: Whether to skip TLS server certificate. Can be set through the `ARGOCD_INSECURE` environment variable.
        :param pulumi.Input[pulumi.InputType['ProviderKubernetesArgs']] kubernetes: Kubernetes configuration overrides. Only relevant when `port_forward = true` or `port_forward_with_namespace = "foo"`.
               The kubeconfig file that is used can be overridden using the [`KUBECONFIG` environment
               variable](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#the-kubeconfig-environment-variable)).
        :param pulumi.Input[str] password: Authentication password. Can be set through the `ARGOCD_AUTH_PASSWORD` environment variable.
        :param pulumi.Input[bool] plain_text: Whether to initiate an unencrypted connection to ArgoCD server.
        :param pulumi.Input[bool] port_forward: Connect to a random argocd-server port using port forwarding.
        :param pulumi.Input[str] port_forward_with_namespace: Namespace name which should be used for port forwarding.
        :param pulumi.Input[str] server_addr: ArgoCD server address with port. Can be set through the `ARGOCD_SERVER` environment variable.
        :param pulumi.Input[bool] use_local_config: Use the authentication settings found in the local config file. Useful when you have previously logged in using SSO.
               Conflicts with `auth_token`, `username` and `password`.
        :param pulumi.Input[str] user_agent: User-Agent request header override.
        :param pulumi.Input[str] username: Authentication username. Can be set through the `ARGOCD_AUTH_USERNAME` environment variable.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the argocd package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_token: Optional[pulumi.Input[str]] = None,
                 cert_file: Optional[pulumi.Input[str]] = None,
                 client_cert_file: Optional[pulumi.Input[str]] = None,
                 client_cert_key: Optional[pulumi.Input[str]] = None,
                 config_path: Optional[pulumi.Input[str]] = None,
                 context: Optional[pulumi.Input[str]] = None,
                 core: Optional[pulumi.Input[bool]] = None,
                 grpc_web: Optional[pulumi.Input[bool]] = None,
                 grpc_web_root_path: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 kubernetes: Optional[pulumi.Input[pulumi.InputType['ProviderKubernetesArgs']]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 plain_text: Optional[pulumi.Input[bool]] = None,
                 port_forward: Optional[pulumi.Input[bool]] = None,
                 port_forward_with_namespace: Optional[pulumi.Input[str]] = None,
                 server_addr: Optional[pulumi.Input[str]] = None,
                 use_local_config: Optional[pulumi.Input[bool]] = None,
                 user_agent: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            __props__.__dict__["auth_token"] = None if auth_token is None else pulumi.Output.secret(auth_token)
            __props__.__dict__["cert_file"] = cert_file
            __props__.__dict__["client_cert_file"] = client_cert_file
            __props__.__dict__["client_cert_key"] = client_cert_key
            __props__.__dict__["config_path"] = config_path
            __props__.__dict__["context"] = context
            __props__.__dict__["core"] = pulumi.Output.from_input(core).apply(pulumi.runtime.to_json) if core is not None else None
            __props__.__dict__["grpc_web"] = pulumi.Output.from_input(grpc_web).apply(pulumi.runtime.to_json) if grpc_web is not None else None
            __props__.__dict__["grpc_web_root_path"] = grpc_web_root_path
            __props__.__dict__["headers"] = pulumi.Output.from_input(headers).apply(pulumi.runtime.to_json) if headers is not None else None
            __props__.__dict__["insecure"] = pulumi.Output.from_input(insecure).apply(pulumi.runtime.to_json) if insecure is not None else None
            __props__.__dict__["kubernetes"] = pulumi.Output.from_input(kubernetes).apply(pulumi.runtime.to_json) if kubernetes is not None else None
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["plain_text"] = pulumi.Output.from_input(plain_text).apply(pulumi.runtime.to_json) if plain_text is not None else None
            __props__.__dict__["port_forward"] = pulumi.Output.from_input(port_forward).apply(pulumi.runtime.to_json) if port_forward is not None else None
            __props__.__dict__["port_forward_with_namespace"] = port_forward_with_namespace
            __props__.__dict__["server_addr"] = server_addr
            __props__.__dict__["use_local_config"] = pulumi.Output.from_input(use_local_config).apply(pulumi.runtime.to_json) if use_local_config is not None else None
            __props__.__dict__["user_agent"] = user_agent
            __props__.__dict__["username"] = username
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["authToken", "password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Provider, __self__).__init__(
            'argocd',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> pulumi.Output[Optional[str]]:
        """
        ArgoCD authentication token, takes precedence over `username`/`password`. Can be set through the `ARGOCD_AUTH_TOKEN`
        environment variable.
        """
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="certFile")
    def cert_file(self) -> pulumi.Output[Optional[str]]:
        """
        Additional root CA certificates file to add to the client TLS connection pool.
        """
        return pulumi.get(self, "cert_file")

    @property
    @pulumi.getter(name="clientCertFile")
    def client_cert_file(self) -> pulumi.Output[Optional[str]]:
        """
        Client certificate.
        """
        return pulumi.get(self, "client_cert_file")

    @property
    @pulumi.getter(name="clientCertKey")
    def client_cert_key(self) -> pulumi.Output[Optional[str]]:
        """
        Client certificate key.
        """
        return pulumi.get(self, "client_cert_key")

    @property
    @pulumi.getter(name="configPath")
    def config_path(self) -> pulumi.Output[Optional[str]]:
        """
        Override the default config path of `$HOME/.config/argocd/config`. Only relevant when `use_local_config`. Can be set
        through the `ARGOCD_CONFIG_PATH` environment variable.
        """
        return pulumi.get(self, "config_path")

    @property
    @pulumi.getter
    def context(self) -> pulumi.Output[Optional[str]]:
        """
        Context to choose when using a local ArgoCD config file. Only relevant when `use_local_config`. Can be set through
        `ARGOCD_CONTEXT` environment variable.
        """
        return pulumi.get(self, "context")

    @property
    @pulumi.getter(name="grpcWebRootPath")
    def grpc_web_root_path(self) -> pulumi.Output[Optional[str]]:
        """
        Use the gRPC web proxy client and set the web root, e.g. `argo-cd`. Useful if the Argo CD server is behind a proxy at a
        non-root path.
        """
        return pulumi.get(self, "grpc_web_root_path")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Authentication password. Can be set through the `ARGOCD_AUTH_PASSWORD` environment variable.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="portForwardWithNamespace")
    def port_forward_with_namespace(self) -> pulumi.Output[Optional[str]]:
        """
        Namespace name which should be used for port forwarding.
        """
        return pulumi.get(self, "port_forward_with_namespace")

    @property
    @pulumi.getter(name="serverAddr")
    def server_addr(self) -> pulumi.Output[Optional[str]]:
        """
        ArgoCD server address with port. Can be set through the `ARGOCD_SERVER` environment variable.
        """
        return pulumi.get(self, "server_addr")

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> pulumi.Output[Optional[str]]:
        """
        User-Agent request header override.
        """
        return pulumi.get(self, "user_agent")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[Optional[str]]:
        """
        Authentication username. Can be set through the `ARGOCD_AUTH_USERNAME` environment variable.
        """
        return pulumi.get(self, "username")

