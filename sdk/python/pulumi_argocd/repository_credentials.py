# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['RepositoryCredentialsArgs', 'RepositoryCredentials']

@pulumi.input_type
class RepositoryCredentialsArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 enable_oci: Optional[pulumi.Input[bool]] = None,
                 githubapp_enterprise_base_url: Optional[pulumi.Input[str]] = None,
                 githubapp_id: Optional[pulumi.Input[str]] = None,
                 githubapp_installation_id: Optional[pulumi.Input[str]] = None,
                 githubapp_private_key: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 ssh_private_key: Optional[pulumi.Input[str]] = None,
                 tls_client_cert_data: Optional[pulumi.Input[str]] = None,
                 tls_client_cert_key: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RepositoryCredentials resource.
        :param pulumi.Input[str] url: URL that these credentials matches to.
        :param pulumi.Input[bool] enable_oci: Whether `helm-oci` support should be enabled for this repo.
        :param pulumi.Input[str] githubapp_enterprise_base_url: GitHub API URL for GitHub app authentication.
        :param pulumi.Input[str] githubapp_id: Github App ID of the app used to access the repo for GitHub app authentication.
        :param pulumi.Input[str] githubapp_installation_id: ID of the installed GitHub App for GitHub app authentication.
        :param pulumi.Input[str] githubapp_private_key: Private key data (PEM) for authentication via GitHub app.
        :param pulumi.Input[str] password: Password for authenticating at the repo server.
        :param pulumi.Input[str] ssh_private_key: Private key data for authenticating at the repo server using SSH (only Git repos).
        :param pulumi.Input[str] tls_client_cert_data: TLS client cert data for authenticating at the repo server.
        :param pulumi.Input[str] tls_client_cert_key: TLS client cert key for authenticating at the repo server.
        :param pulumi.Input[str] username: Username for authenticating at the repo server.
        """
        pulumi.set(__self__, "url", url)
        if enable_oci is not None:
            pulumi.set(__self__, "enable_oci", enable_oci)
        if githubapp_enterprise_base_url is not None:
            pulumi.set(__self__, "githubapp_enterprise_base_url", githubapp_enterprise_base_url)
        if githubapp_id is not None:
            pulumi.set(__self__, "githubapp_id", githubapp_id)
        if githubapp_installation_id is not None:
            pulumi.set(__self__, "githubapp_installation_id", githubapp_installation_id)
        if githubapp_private_key is not None:
            pulumi.set(__self__, "githubapp_private_key", githubapp_private_key)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if ssh_private_key is not None:
            pulumi.set(__self__, "ssh_private_key", ssh_private_key)
        if tls_client_cert_data is not None:
            pulumi.set(__self__, "tls_client_cert_data", tls_client_cert_data)
        if tls_client_cert_key is not None:
            pulumi.set(__self__, "tls_client_cert_key", tls_client_cert_key)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        URL that these credentials matches to.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="enableOci")
    def enable_oci(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether `helm-oci` support should be enabled for this repo.
        """
        return pulumi.get(self, "enable_oci")

    @enable_oci.setter
    def enable_oci(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_oci", value)

    @property
    @pulumi.getter(name="githubappEnterpriseBaseUrl")
    def githubapp_enterprise_base_url(self) -> Optional[pulumi.Input[str]]:
        """
        GitHub API URL for GitHub app authentication.
        """
        return pulumi.get(self, "githubapp_enterprise_base_url")

    @githubapp_enterprise_base_url.setter
    def githubapp_enterprise_base_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "githubapp_enterprise_base_url", value)

    @property
    @pulumi.getter(name="githubappId")
    def githubapp_id(self) -> Optional[pulumi.Input[str]]:
        """
        Github App ID of the app used to access the repo for GitHub app authentication.
        """
        return pulumi.get(self, "githubapp_id")

    @githubapp_id.setter
    def githubapp_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "githubapp_id", value)

    @property
    @pulumi.getter(name="githubappInstallationId")
    def githubapp_installation_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the installed GitHub App for GitHub app authentication.
        """
        return pulumi.get(self, "githubapp_installation_id")

    @githubapp_installation_id.setter
    def githubapp_installation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "githubapp_installation_id", value)

    @property
    @pulumi.getter(name="githubappPrivateKey")
    def githubapp_private_key(self) -> Optional[pulumi.Input[str]]:
        """
        Private key data (PEM) for authentication via GitHub app.
        """
        return pulumi.get(self, "githubapp_private_key")

    @githubapp_private_key.setter
    def githubapp_private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "githubapp_private_key", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for authenticating at the repo server.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="sshPrivateKey")
    def ssh_private_key(self) -> Optional[pulumi.Input[str]]:
        """
        Private key data for authenticating at the repo server using SSH (only Git repos).
        """
        return pulumi.get(self, "ssh_private_key")

    @ssh_private_key.setter
    def ssh_private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_private_key", value)

    @property
    @pulumi.getter(name="tlsClientCertData")
    def tls_client_cert_data(self) -> Optional[pulumi.Input[str]]:
        """
        TLS client cert data for authenticating at the repo server.
        """
        return pulumi.get(self, "tls_client_cert_data")

    @tls_client_cert_data.setter
    def tls_client_cert_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_client_cert_data", value)

    @property
    @pulumi.getter(name="tlsClientCertKey")
    def tls_client_cert_key(self) -> Optional[pulumi.Input[str]]:
        """
        TLS client cert key for authenticating at the repo server.
        """
        return pulumi.get(self, "tls_client_cert_key")

    @tls_client_cert_key.setter
    def tls_client_cert_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_client_cert_key", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for authenticating at the repo server.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class _RepositoryCredentialsState:
    def __init__(__self__, *,
                 enable_oci: Optional[pulumi.Input[bool]] = None,
                 githubapp_enterprise_base_url: Optional[pulumi.Input[str]] = None,
                 githubapp_id: Optional[pulumi.Input[str]] = None,
                 githubapp_installation_id: Optional[pulumi.Input[str]] = None,
                 githubapp_private_key: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 ssh_private_key: Optional[pulumi.Input[str]] = None,
                 tls_client_cert_data: Optional[pulumi.Input[str]] = None,
                 tls_client_cert_key: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RepositoryCredentials resources.
        :param pulumi.Input[bool] enable_oci: Whether `helm-oci` support should be enabled for this repo.
        :param pulumi.Input[str] githubapp_enterprise_base_url: GitHub API URL for GitHub app authentication.
        :param pulumi.Input[str] githubapp_id: Github App ID of the app used to access the repo for GitHub app authentication.
        :param pulumi.Input[str] githubapp_installation_id: ID of the installed GitHub App for GitHub app authentication.
        :param pulumi.Input[str] githubapp_private_key: Private key data (PEM) for authentication via GitHub app.
        :param pulumi.Input[str] password: Password for authenticating at the repo server.
        :param pulumi.Input[str] ssh_private_key: Private key data for authenticating at the repo server using SSH (only Git repos).
        :param pulumi.Input[str] tls_client_cert_data: TLS client cert data for authenticating at the repo server.
        :param pulumi.Input[str] tls_client_cert_key: TLS client cert key for authenticating at the repo server.
        :param pulumi.Input[str] url: URL that these credentials matches to.
        :param pulumi.Input[str] username: Username for authenticating at the repo server.
        """
        if enable_oci is not None:
            pulumi.set(__self__, "enable_oci", enable_oci)
        if githubapp_enterprise_base_url is not None:
            pulumi.set(__self__, "githubapp_enterprise_base_url", githubapp_enterprise_base_url)
        if githubapp_id is not None:
            pulumi.set(__self__, "githubapp_id", githubapp_id)
        if githubapp_installation_id is not None:
            pulumi.set(__self__, "githubapp_installation_id", githubapp_installation_id)
        if githubapp_private_key is not None:
            pulumi.set(__self__, "githubapp_private_key", githubapp_private_key)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if ssh_private_key is not None:
            pulumi.set(__self__, "ssh_private_key", ssh_private_key)
        if tls_client_cert_data is not None:
            pulumi.set(__self__, "tls_client_cert_data", tls_client_cert_data)
        if tls_client_cert_key is not None:
            pulumi.set(__self__, "tls_client_cert_key", tls_client_cert_key)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="enableOci")
    def enable_oci(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether `helm-oci` support should be enabled for this repo.
        """
        return pulumi.get(self, "enable_oci")

    @enable_oci.setter
    def enable_oci(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_oci", value)

    @property
    @pulumi.getter(name="githubappEnterpriseBaseUrl")
    def githubapp_enterprise_base_url(self) -> Optional[pulumi.Input[str]]:
        """
        GitHub API URL for GitHub app authentication.
        """
        return pulumi.get(self, "githubapp_enterprise_base_url")

    @githubapp_enterprise_base_url.setter
    def githubapp_enterprise_base_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "githubapp_enterprise_base_url", value)

    @property
    @pulumi.getter(name="githubappId")
    def githubapp_id(self) -> Optional[pulumi.Input[str]]:
        """
        Github App ID of the app used to access the repo for GitHub app authentication.
        """
        return pulumi.get(self, "githubapp_id")

    @githubapp_id.setter
    def githubapp_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "githubapp_id", value)

    @property
    @pulumi.getter(name="githubappInstallationId")
    def githubapp_installation_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the installed GitHub App for GitHub app authentication.
        """
        return pulumi.get(self, "githubapp_installation_id")

    @githubapp_installation_id.setter
    def githubapp_installation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "githubapp_installation_id", value)

    @property
    @pulumi.getter(name="githubappPrivateKey")
    def githubapp_private_key(self) -> Optional[pulumi.Input[str]]:
        """
        Private key data (PEM) for authentication via GitHub app.
        """
        return pulumi.get(self, "githubapp_private_key")

    @githubapp_private_key.setter
    def githubapp_private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "githubapp_private_key", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for authenticating at the repo server.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="sshPrivateKey")
    def ssh_private_key(self) -> Optional[pulumi.Input[str]]:
        """
        Private key data for authenticating at the repo server using SSH (only Git repos).
        """
        return pulumi.get(self, "ssh_private_key")

    @ssh_private_key.setter
    def ssh_private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_private_key", value)

    @property
    @pulumi.getter(name="tlsClientCertData")
    def tls_client_cert_data(self) -> Optional[pulumi.Input[str]]:
        """
        TLS client cert data for authenticating at the repo server.
        """
        return pulumi.get(self, "tls_client_cert_data")

    @tls_client_cert_data.setter
    def tls_client_cert_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_client_cert_data", value)

    @property
    @pulumi.getter(name="tlsClientCertKey")
    def tls_client_cert_key(self) -> Optional[pulumi.Input[str]]:
        """
        TLS client cert key for authenticating at the repo server.
        """
        return pulumi.get(self, "tls_client_cert_key")

    @tls_client_cert_key.setter
    def tls_client_cert_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_client_cert_key", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL that these credentials matches to.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for authenticating at the repo server.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


class RepositoryCredentials(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_oci: Optional[pulumi.Input[bool]] = None,
                 githubapp_enterprise_base_url: Optional[pulumi.Input[str]] = None,
                 githubapp_id: Optional[pulumi.Input[str]] = None,
                 githubapp_installation_id: Optional[pulumi.Input[str]] = None,
                 githubapp_private_key: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 ssh_private_key: Optional[pulumi.Input[str]] = None,
                 tls_client_cert_data: Optional[pulumi.Input[str]] = None,
                 tls_client_cert_key: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_argocd as argocd

        private = argocd.RepositoryCredentials("private",
            ssh_private_key=\"\"\"-----BEGIN OPENSSH PRIVATE KEY-----
        foo
        bar
        -----END OPENSSH PRIVATE KEY-----
        \"\"\",
            url="git@private-git-repository.local",
            username="git")
        ```

        ## Import

        Repository credentials can be imported using the repository URL.

         Note: as the ArgoCD API does not return any sensitive information, a

         subsequent `pulumi up` should be executed to make the `password`,

         `ssh_private_key` and `tls_client_cert_key` attributes converge to their

         expected values defined within the plan.

         Example:

        ```sh
        $ pulumi import argocd:index/repositoryCredentials:RepositoryCredentials myrepocreds git@private-git-repository.local:somerepo.git
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enable_oci: Whether `helm-oci` support should be enabled for this repo.
        :param pulumi.Input[str] githubapp_enterprise_base_url: GitHub API URL for GitHub app authentication.
        :param pulumi.Input[str] githubapp_id: Github App ID of the app used to access the repo for GitHub app authentication.
        :param pulumi.Input[str] githubapp_installation_id: ID of the installed GitHub App for GitHub app authentication.
        :param pulumi.Input[str] githubapp_private_key: Private key data (PEM) for authentication via GitHub app.
        :param pulumi.Input[str] password: Password for authenticating at the repo server.
        :param pulumi.Input[str] ssh_private_key: Private key data for authenticating at the repo server using SSH (only Git repos).
        :param pulumi.Input[str] tls_client_cert_data: TLS client cert data for authenticating at the repo server.
        :param pulumi.Input[str] tls_client_cert_key: TLS client cert key for authenticating at the repo server.
        :param pulumi.Input[str] url: URL that these credentials matches to.
        :param pulumi.Input[str] username: Username for authenticating at the repo server.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RepositoryCredentialsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_argocd as argocd

        private = argocd.RepositoryCredentials("private",
            ssh_private_key=\"\"\"-----BEGIN OPENSSH PRIVATE KEY-----
        foo
        bar
        -----END OPENSSH PRIVATE KEY-----
        \"\"\",
            url="git@private-git-repository.local",
            username="git")
        ```

        ## Import

        Repository credentials can be imported using the repository URL.

         Note: as the ArgoCD API does not return any sensitive information, a

         subsequent `pulumi up` should be executed to make the `password`,

         `ssh_private_key` and `tls_client_cert_key` attributes converge to their

         expected values defined within the plan.

         Example:

        ```sh
        $ pulumi import argocd:index/repositoryCredentials:RepositoryCredentials myrepocreds git@private-git-repository.local:somerepo.git
        ```

        :param str resource_name: The name of the resource.
        :param RepositoryCredentialsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RepositoryCredentialsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_oci: Optional[pulumi.Input[bool]] = None,
                 githubapp_enterprise_base_url: Optional[pulumi.Input[str]] = None,
                 githubapp_id: Optional[pulumi.Input[str]] = None,
                 githubapp_installation_id: Optional[pulumi.Input[str]] = None,
                 githubapp_private_key: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 ssh_private_key: Optional[pulumi.Input[str]] = None,
                 tls_client_cert_data: Optional[pulumi.Input[str]] = None,
                 tls_client_cert_key: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RepositoryCredentialsArgs.__new__(RepositoryCredentialsArgs)

            __props__.__dict__["enable_oci"] = enable_oci
            __props__.__dict__["githubapp_enterprise_base_url"] = githubapp_enterprise_base_url
            __props__.__dict__["githubapp_id"] = githubapp_id
            __props__.__dict__["githubapp_installation_id"] = githubapp_installation_id
            __props__.__dict__["githubapp_private_key"] = None if githubapp_private_key is None else pulumi.Output.secret(githubapp_private_key)
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["ssh_private_key"] = None if ssh_private_key is None else pulumi.Output.secret(ssh_private_key)
            __props__.__dict__["tls_client_cert_data"] = tls_client_cert_data
            __props__.__dict__["tls_client_cert_key"] = None if tls_client_cert_key is None else pulumi.Output.secret(tls_client_cert_key)
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = url
            __props__.__dict__["username"] = username
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["githubappPrivateKey", "password", "sshPrivateKey", "tlsClientCertKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(RepositoryCredentials, __self__).__init__(
            'argocd:index/repositoryCredentials:RepositoryCredentials',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_oci: Optional[pulumi.Input[bool]] = None,
            githubapp_enterprise_base_url: Optional[pulumi.Input[str]] = None,
            githubapp_id: Optional[pulumi.Input[str]] = None,
            githubapp_installation_id: Optional[pulumi.Input[str]] = None,
            githubapp_private_key: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            ssh_private_key: Optional[pulumi.Input[str]] = None,
            tls_client_cert_data: Optional[pulumi.Input[str]] = None,
            tls_client_cert_key: Optional[pulumi.Input[str]] = None,
            url: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None) -> 'RepositoryCredentials':
        """
        Get an existing RepositoryCredentials resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enable_oci: Whether `helm-oci` support should be enabled for this repo.
        :param pulumi.Input[str] githubapp_enterprise_base_url: GitHub API URL for GitHub app authentication.
        :param pulumi.Input[str] githubapp_id: Github App ID of the app used to access the repo for GitHub app authentication.
        :param pulumi.Input[str] githubapp_installation_id: ID of the installed GitHub App for GitHub app authentication.
        :param pulumi.Input[str] githubapp_private_key: Private key data (PEM) for authentication via GitHub app.
        :param pulumi.Input[str] password: Password for authenticating at the repo server.
        :param pulumi.Input[str] ssh_private_key: Private key data for authenticating at the repo server using SSH (only Git repos).
        :param pulumi.Input[str] tls_client_cert_data: TLS client cert data for authenticating at the repo server.
        :param pulumi.Input[str] tls_client_cert_key: TLS client cert key for authenticating at the repo server.
        :param pulumi.Input[str] url: URL that these credentials matches to.
        :param pulumi.Input[str] username: Username for authenticating at the repo server.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RepositoryCredentialsState.__new__(_RepositoryCredentialsState)

        __props__.__dict__["enable_oci"] = enable_oci
        __props__.__dict__["githubapp_enterprise_base_url"] = githubapp_enterprise_base_url
        __props__.__dict__["githubapp_id"] = githubapp_id
        __props__.__dict__["githubapp_installation_id"] = githubapp_installation_id
        __props__.__dict__["githubapp_private_key"] = githubapp_private_key
        __props__.__dict__["password"] = password
        __props__.__dict__["ssh_private_key"] = ssh_private_key
        __props__.__dict__["tls_client_cert_data"] = tls_client_cert_data
        __props__.__dict__["tls_client_cert_key"] = tls_client_cert_key
        __props__.__dict__["url"] = url
        __props__.__dict__["username"] = username
        return RepositoryCredentials(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="enableOci")
    def enable_oci(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether `helm-oci` support should be enabled for this repo.
        """
        return pulumi.get(self, "enable_oci")

    @property
    @pulumi.getter(name="githubappEnterpriseBaseUrl")
    def githubapp_enterprise_base_url(self) -> pulumi.Output[Optional[str]]:
        """
        GitHub API URL for GitHub app authentication.
        """
        return pulumi.get(self, "githubapp_enterprise_base_url")

    @property
    @pulumi.getter(name="githubappId")
    def githubapp_id(self) -> pulumi.Output[Optional[str]]:
        """
        Github App ID of the app used to access the repo for GitHub app authentication.
        """
        return pulumi.get(self, "githubapp_id")

    @property
    @pulumi.getter(name="githubappInstallationId")
    def githubapp_installation_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the installed GitHub App for GitHub app authentication.
        """
        return pulumi.get(self, "githubapp_installation_id")

    @property
    @pulumi.getter(name="githubappPrivateKey")
    def githubapp_private_key(self) -> pulumi.Output[Optional[str]]:
        """
        Private key data (PEM) for authentication via GitHub app.
        """
        return pulumi.get(self, "githubapp_private_key")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Password for authenticating at the repo server.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="sshPrivateKey")
    def ssh_private_key(self) -> pulumi.Output[Optional[str]]:
        """
        Private key data for authenticating at the repo server using SSH (only Git repos).
        """
        return pulumi.get(self, "ssh_private_key")

    @property
    @pulumi.getter(name="tlsClientCertData")
    def tls_client_cert_data(self) -> pulumi.Output[Optional[str]]:
        """
        TLS client cert data for authenticating at the repo server.
        """
        return pulumi.get(self, "tls_client_cert_data")

    @property
    @pulumi.getter(name="tlsClientCertKey")
    def tls_client_cert_key(self) -> pulumi.Output[Optional[str]]:
        """
        TLS client cert key for authenticating at the repo server.
        """
        return pulumi.get(self, "tls_client_cert_key")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        URL that these credentials matches to.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[Optional[str]]:
        """
        Username for authenticating at the repo server.
        """
        return pulumi.get(self, "username")

