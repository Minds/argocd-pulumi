# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ClusterArgs', 'Cluster']

@pulumi.input_type
class ClusterArgs:
    def __init__(__self__, *,
                 config: pulumi.Input['ClusterConfigArgs'],
                 metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterMetadataArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 shard: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Cluster resource.
        :param pulumi.Input['ClusterConfigArgs'] config: Cluster information for connecting to a cluster.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterMetadataArgs']]] metadatas: Standard cluster secret's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input[str] name: Name of the cluster. If omitted, will use the server address.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: List of namespaces which are accessible in that cluster. Cluster level resources would be ignored if namespace list is not empty.
        :param pulumi.Input[str] project: Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-scoped-repositories-and-clusters.
        :param pulumi.Input[str] server: Server is the API server URL of the Kubernetes cluster.
        :param pulumi.Input[str] shard: Optional shard number. Calculated on the fly by the application controller if not specified.
        """
        pulumi.set(__self__, "config", config)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if shard is not None:
            pulumi.set(__self__, "shard", shard)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Input['ClusterConfigArgs']:
        """
        Cluster information for connecting to a cluster.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: pulumi.Input['ClusterConfigArgs']):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterMetadataArgs']]]]:
        """
        Standard cluster secret's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        return pulumi.get(self, "metadatas")

    @metadatas.setter
    def metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterMetadataArgs']]]]):
        pulumi.set(self, "metadatas", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the cluster. If omitted, will use the server address.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of namespaces which are accessible in that cluster. Cluster level resources would be ignored if namespace list is not empty.
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-scoped-repositories-and-clusters.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        Server is the API server URL of the Kubernetes cluster.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def shard(self) -> Optional[pulumi.Input[str]]:
        """
        Optional shard number. Calculated on the fly by the application controller if not specified.
        """
        return pulumi.get(self, "shard")

    @shard.setter
    def shard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shard", value)


@pulumi.input_type
class _ClusterState:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['ClusterConfigArgs']] = None,
                 infos: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterInfoArgs']]]] = None,
                 metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterMetadataArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 shard: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Cluster resources.
        :param pulumi.Input['ClusterConfigArgs'] config: Cluster information for connecting to a cluster.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterInfoArgs']]] infos: Information about cluster cache and state.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterMetadataArgs']]] metadatas: Standard cluster secret's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input[str] name: Name of the cluster. If omitted, will use the server address.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: List of namespaces which are accessible in that cluster. Cluster level resources would be ignored if namespace list is not empty.
        :param pulumi.Input[str] project: Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-scoped-repositories-and-clusters.
        :param pulumi.Input[str] server: Server is the API server URL of the Kubernetes cluster.
        :param pulumi.Input[str] shard: Optional shard number. Calculated on the fly by the application controller if not specified.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if shard is not None:
            pulumi.set(__self__, "shard", shard)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['ClusterConfigArgs']]:
        """
        Cluster information for connecting to a cluster.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['ClusterConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterInfoArgs']]]]:
        """
        Information about cluster cache and state.
        """
        return pulumi.get(self, "infos")

    @infos.setter
    def infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterInfoArgs']]]]):
        pulumi.set(self, "infos", value)

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterMetadataArgs']]]]:
        """
        Standard cluster secret's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        return pulumi.get(self, "metadatas")

    @metadatas.setter
    def metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterMetadataArgs']]]]):
        pulumi.set(self, "metadatas", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the cluster. If omitted, will use the server address.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of namespaces which are accessible in that cluster. Cluster level resources would be ignored if namespace list is not empty.
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-scoped-repositories-and-clusters.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        Server is the API server URL of the Kubernetes cluster.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def shard(self) -> Optional[pulumi.Input[str]]:
        """
        Optional shard number. Calculated on the fly by the application controller if not specified.
        """
        return pulumi.get(self, "shard")

    @shard.setter
    def shard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shard", value)


class Cluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[pulumi.InputType['ClusterConfigArgs']]] = None,
                 metadatas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterMetadataArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 shard: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages [clusters](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#clusters) within ArgoCD.

        ## Bearer token Authentication

        resource "Cluster" "kubernetes" {
          server = "https://1.2.3.4:12345"

          config {
            bearer_token = "eyJhbGciOiJSUzI..."

            tls_client_config {
              ca_data = file("path/to/ca.pem")
              // ca_data = "-----BEGIN CERTIFICATE-----\\nfoo\\nbar\\n-----END CERTIFICATE-----"
              // ca_data = base64decode("LS0tLS1CRUdJTiBDRVJUSUZ...")
              // insecure = true
            }
          }
        }

        ## GCP GKE cluster

        data "google_container_cluster" "cluster" {
          name     = "cluster"
          location = "europe-west1"
        }

        resource "kubernetes_service_account" "argocd_manager" {
          metadata {
            name      = "argocd-manager"
            namespace = "kube-system"
          }
        }

        resource "kubernetes_cluster_role" "argocd_manager" {
          metadata {
            name = "argocd-manager-role"
          }

          rule {
            api_groups = ["*"]
            resources  = ["*"]
            verbs      = ["*"]
          }

          rule {
            non_resource_urls = ["*"]
            verbs             = ["*"]
          }
        }

        resource "kubernetes_cluster_role_binding" "argocd_manager" {
          metadata {
            name = "argocd-manager-role-binding"
          }

          role_ref {
            api_group = "rbac.authorization.k8s.io"
            kind      = "ClusterRole"
            name      = kubernetes_cluster_role.argocd_manager.metadata.0.name
          }

          subject {
            kind      = "ServiceAccount"
            name      = kubernetes_service_account.argocd_manager.metadata.0.name
            namespace = kubernetes_service_account.argocd_manager.metadata.0.namespace
          }
        }

        data "kubernetes_secret" "argocd_manager" {
          metadata {
            name      = kubernetes_service_account.argocd_manager.default_secret_name
            namespace = kubernetes_service_account.argocd_manager.metadata.0.namespace
          }
        }

        resource "Cluster" "gke" {
          server = format("https://%s", data.google_container_cluster.cluster.endpoint)
          name   = "gke"

          config {
            bearer_token = data.kubernetes_secret.argocd_manager.data["token"]
            tls_client_config {
              ca_data = base64decode(data.google_container_cluster.cluster.master_auth.0.cluster_ca_certificate)
            }
          }
        }

        ## Import

        Cluster credentials can be imported using the server URL.

         Example:

        ```sh
        $ pulumi import argocd:index/cluster:Cluster mycluster https://mycluster.io:443
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ClusterConfigArgs']] config: Cluster information for connecting to a cluster.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterMetadataArgs']]]] metadatas: Standard cluster secret's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input[str] name: Name of the cluster. If omitted, will use the server address.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: List of namespaces which are accessible in that cluster. Cluster level resources would be ignored if namespace list is not empty.
        :param pulumi.Input[str] project: Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-scoped-repositories-and-clusters.
        :param pulumi.Input[str] server: Server is the API server URL of the Kubernetes cluster.
        :param pulumi.Input[str] shard: Optional shard number. Calculated on the fly by the application controller if not specified.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages [clusters](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#clusters) within ArgoCD.

        ## Bearer token Authentication

        resource "Cluster" "kubernetes" {
          server = "https://1.2.3.4:12345"

          config {
            bearer_token = "eyJhbGciOiJSUzI..."

            tls_client_config {
              ca_data = file("path/to/ca.pem")
              // ca_data = "-----BEGIN CERTIFICATE-----\\nfoo\\nbar\\n-----END CERTIFICATE-----"
              // ca_data = base64decode("LS0tLS1CRUdJTiBDRVJUSUZ...")
              // insecure = true
            }
          }
        }

        ## GCP GKE cluster

        data "google_container_cluster" "cluster" {
          name     = "cluster"
          location = "europe-west1"
        }

        resource "kubernetes_service_account" "argocd_manager" {
          metadata {
            name      = "argocd-manager"
            namespace = "kube-system"
          }
        }

        resource "kubernetes_cluster_role" "argocd_manager" {
          metadata {
            name = "argocd-manager-role"
          }

          rule {
            api_groups = ["*"]
            resources  = ["*"]
            verbs      = ["*"]
          }

          rule {
            non_resource_urls = ["*"]
            verbs             = ["*"]
          }
        }

        resource "kubernetes_cluster_role_binding" "argocd_manager" {
          metadata {
            name = "argocd-manager-role-binding"
          }

          role_ref {
            api_group = "rbac.authorization.k8s.io"
            kind      = "ClusterRole"
            name      = kubernetes_cluster_role.argocd_manager.metadata.0.name
          }

          subject {
            kind      = "ServiceAccount"
            name      = kubernetes_service_account.argocd_manager.metadata.0.name
            namespace = kubernetes_service_account.argocd_manager.metadata.0.namespace
          }
        }

        data "kubernetes_secret" "argocd_manager" {
          metadata {
            name      = kubernetes_service_account.argocd_manager.default_secret_name
            namespace = kubernetes_service_account.argocd_manager.metadata.0.namespace
          }
        }

        resource "Cluster" "gke" {
          server = format("https://%s", data.google_container_cluster.cluster.endpoint)
          name   = "gke"

          config {
            bearer_token = data.kubernetes_secret.argocd_manager.data["token"]
            tls_client_config {
              ca_data = base64decode(data.google_container_cluster.cluster.master_auth.0.cluster_ca_certificate)
            }
          }
        }

        ## Import

        Cluster credentials can be imported using the server URL.

         Example:

        ```sh
        $ pulumi import argocd:index/cluster:Cluster mycluster https://mycluster.io:443
        ```

        :param str resource_name: The name of the resource.
        :param ClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[pulumi.InputType['ClusterConfigArgs']]] = None,
                 metadatas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterMetadataArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 shard: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterArgs.__new__(ClusterArgs)

            if config is None and not opts.urn:
                raise TypeError("Missing required property 'config'")
            __props__.__dict__["config"] = config
            __props__.__dict__["metadatas"] = metadatas
            __props__.__dict__["name"] = name
            __props__.__dict__["namespaces"] = namespaces
            __props__.__dict__["project"] = project
            __props__.__dict__["server"] = server
            __props__.__dict__["shard"] = shard
            __props__.__dict__["infos"] = None
        super(Cluster, __self__).__init__(
            'argocd:index/cluster:Cluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config: Optional[pulumi.Input[pulumi.InputType['ClusterConfigArgs']]] = None,
            infos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterInfoArgs']]]]] = None,
            metadatas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterMetadataArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            project: Optional[pulumi.Input[str]] = None,
            server: Optional[pulumi.Input[str]] = None,
            shard: Optional[pulumi.Input[str]] = None) -> 'Cluster':
        """
        Get an existing Cluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ClusterConfigArgs']] config: Cluster information for connecting to a cluster.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterInfoArgs']]]] infos: Information about cluster cache and state.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterMetadataArgs']]]] metadatas: Standard cluster secret's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input[str] name: Name of the cluster. If omitted, will use the server address.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: List of namespaces which are accessible in that cluster. Cluster level resources would be ignored if namespace list is not empty.
        :param pulumi.Input[str] project: Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-scoped-repositories-and-clusters.
        :param pulumi.Input[str] server: Server is the API server URL of the Kubernetes cluster.
        :param pulumi.Input[str] shard: Optional shard number. Calculated on the fly by the application controller if not specified.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterState.__new__(_ClusterState)

        __props__.__dict__["config"] = config
        __props__.__dict__["infos"] = infos
        __props__.__dict__["metadatas"] = metadatas
        __props__.__dict__["name"] = name
        __props__.__dict__["namespaces"] = namespaces
        __props__.__dict__["project"] = project
        __props__.__dict__["server"] = server
        __props__.__dict__["shard"] = shard
        return Cluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output['outputs.ClusterConfig']:
        """
        Cluster information for connecting to a cluster.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def infos(self) -> pulumi.Output[Sequence['outputs.ClusterInfo']]:
        """
        Information about cluster cache and state.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def metadatas(self) -> pulumi.Output[Optional[Sequence['outputs.ClusterMetadata']]]:
        """
        Standard cluster secret's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the cluster. If omitted, will use the server address.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespaces(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of namespaces which are accessible in that cluster. Cluster level resources would be ignored if namespace list is not empty.
        """
        return pulumi.get(self, "namespaces")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[Optional[str]]:
        """
        Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-scoped-repositories-and-clusters.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def server(self) -> pulumi.Output[Optional[str]]:
        """
        Server is the API server URL of the Kubernetes cluster.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter
    def shard(self) -> pulumi.Output[Optional[str]]:
        """
        Optional shard number. Calculated on the fly by the application controller if not specified.
        """
        return pulumi.get(self, "shard")

