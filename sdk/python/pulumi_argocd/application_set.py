# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ApplicationSetArgs', 'ApplicationSet']

@pulumi.input_type
class ApplicationSetArgs:
    def __init__(__self__, *,
                 metadata: pulumi.Input['ApplicationSetMetadataArgs'],
                 spec: pulumi.Input['ApplicationSetSpecArgs']):
        """
        The set of arguments for constructing a ApplicationSet resource.
        :param pulumi.Input['ApplicationSetMetadataArgs'] metadata: Kubernetes object metadata for templated Application.
        :param pulumi.Input['ApplicationSetSpecArgs'] spec: The application specification.
        """
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Input['ApplicationSetMetadataArgs']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: pulumi.Input['ApplicationSetMetadataArgs']):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Input['ApplicationSetSpecArgs']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: pulumi.Input['ApplicationSetSpecArgs']):
        pulumi.set(self, "spec", value)


@pulumi.input_type
class _ApplicationSetState:
    def __init__(__self__, *,
                 metadata: Optional[pulumi.Input['ApplicationSetMetadataArgs']] = None,
                 spec: Optional[pulumi.Input['ApplicationSetSpecArgs']] = None):
        """
        Input properties used for looking up and filtering ApplicationSet resources.
        :param pulumi.Input['ApplicationSetMetadataArgs'] metadata: Kubernetes object metadata for templated Application.
        :param pulumi.Input['ApplicationSetSpecArgs'] spec: The application specification.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ApplicationSetMetadataArgs']]:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ApplicationSetMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['ApplicationSetSpecArgs']]:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['ApplicationSetSpecArgs']]):
        pulumi.set(self, "spec", value)


class ApplicationSet(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 metadata: Optional[pulumi.Input[pulumi.InputType['ApplicationSetMetadataArgs']]] = None,
                 spec: Optional[pulumi.Input[pulumi.InputType['ApplicationSetSpecArgs']]] = None,
                 __props__=None):
        """
        Manages [application sets](https://argo-cd.readthedocs.io/en/stable/user-guide/application-set/) within ArgoCD.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ApplicationSetMetadataArgs']] metadata: Kubernetes object metadata for templated Application.
        :param pulumi.Input[pulumi.InputType['ApplicationSetSpecArgs']] spec: The application specification.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApplicationSetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages [application sets](https://argo-cd.readthedocs.io/en/stable/user-guide/application-set/) within ArgoCD.

        :param str resource_name: The name of the resource.
        :param ApplicationSetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApplicationSetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 metadata: Optional[pulumi.Input[pulumi.InputType['ApplicationSetMetadataArgs']]] = None,
                 spec: Optional[pulumi.Input[pulumi.InputType['ApplicationSetSpecArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApplicationSetArgs.__new__(ApplicationSetArgs)

            if metadata is None and not opts.urn:
                raise TypeError("Missing required property 'metadata'")
            __props__.__dict__["metadata"] = metadata
            if spec is None and not opts.urn:
                raise TypeError("Missing required property 'spec'")
            __props__.__dict__["spec"] = spec
        super(ApplicationSet, __self__).__init__(
            'argocd:index/applicationSet:ApplicationSet',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            metadata: Optional[pulumi.Input[pulumi.InputType['ApplicationSetMetadataArgs']]] = None,
            spec: Optional[pulumi.Input[pulumi.InputType['ApplicationSetSpecArgs']]] = None) -> 'ApplicationSet':
        """
        Get an existing ApplicationSet resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ApplicationSetMetadataArgs']] metadata: Kubernetes object metadata for templated Application.
        :param pulumi.Input[pulumi.InputType['ApplicationSetSpecArgs']] spec: The application specification.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApplicationSetState.__new__(_ApplicationSetState)

        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["spec"] = spec
        return ApplicationSet(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output['outputs.ApplicationSetMetadata']:
        """
        Kubernetes object metadata for templated Application.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Output['outputs.ApplicationSetSpec']:
        """
        The application specification.
        """
        return pulumi.get(self, "spec")

